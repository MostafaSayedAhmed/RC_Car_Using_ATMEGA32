
Template.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000038fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  000038fe  00003992  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000019  00800078  00800078  000039aa  2**0
                  ALLOC
  3 .stab         00004aa0  00000000  00000000  000039ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002174  00000000  00000000  0000844c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000a5c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000a720  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000a8af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000c8f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000d9f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000e978  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000eaf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000edba  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f648  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 dc 0c 	jmp	0x19b8	; 0x19b8 <__vector_1>
       8:	0c 94 0f 0d 	jmp	0x1a1e	; 0x1a1e <__vector_2>
       c:	0c 94 42 0d 	jmp	0x1a84	; 0x1a84 <__vector_3>
      10:	0c 94 07 0b 	jmp	0x160e	; 0x160e <__vector_4>
      14:	0c 94 d4 0a 	jmp	0x15a8	; 0x15a8 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 6e 0a 	jmp	0x14dc	; 0x14dc <__vector_7>
      20:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <__vector_8>
      24:	0c 94 3b 0a 	jmp	0x1476	; 0x1476 <__vector_9>
      28:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__vector_10>
      2c:	0c 94 d5 09 	jmp	0x13aa	; 0x13aa <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 79 07 	jmp	0xef2	; 0xef2 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 ac 07 	jmp	0xf58	; 0xf58 <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ef       	ldi	r30, 0xFE	; 254
      68:	f8 e3       	ldi	r31, 0x38	; 56
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 39       	cpi	r26, 0x91	; 145
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 19 1c 	call	0x3832	; 0x3832 <main>
      8a:	0c 94 7d 1c 	jmp	0x38fa	; 0x38fa <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 46 1c 	jmp	0x388c	; 0x388c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 62 1c 	jmp	0x38c4	; 0x38c4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 52 1c 	jmp	0x38a4	; 0x38a4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 6e 1c 	jmp	0x38dc	; 0x38dc <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 52 1c 	jmp	0x38a4	; 0x38a4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 6e 1c 	jmp	0x38dc	; 0x38dc <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 46 1c 	jmp	0x388c	; 0x388c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 62 1c 	jmp	0x38c4	; 0x38c4 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 4e 1c 	jmp	0x389c	; 0x389c <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 6a 1c 	jmp	0x38d4	; 0x38d4 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 52 1c 	jmp	0x38a4	; 0x38a4 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 6e 1c 	jmp	0x38dc	; 0x38dc <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 52 1c 	jmp	0x38a4	; 0x38a4 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 6e 1c 	jmp	0x38dc	; 0x38dc <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 52 1c 	jmp	0x38a4	; 0x38a4 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 6e 1c 	jmp	0x38dc	; 0x38dc <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 56 1c 	jmp	0x38ac	; 0x38ac <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 72 1c 	jmp	0x38e4	; 0x38e4 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <USART_init>:

void (*ptr_RXC) (void);
void (*ptr_TXC) (void);

void USART_init()
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <USART_init+0x6>
     ca4:	0f 92       	push	r0
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
//
	unsigned char UCSRA_temp = 0;
     caa:	1b 82       	std	Y+3, r1	; 0x03
	unsigned char UCSRB_temp = 0;
     cac:	1a 82       	std	Y+2, r1	; 0x02
	unsigned char UCSRC_temp = 0;
     cae:	19 82       	std	Y+1, r1	; 0x01
// Selecting Baud rate Register
//  CLR_BIT(UCSRC,URSEL);
	UBRRL = (unsigned char) BAUD_PRESCALE;
     cb0:	e9 e2       	ldi	r30, 0x29	; 41
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	87 e6       	ldi	r24, 0x67	; 103
     cb6:	80 83       	st	Z, r24
	UBRRH = (unsigned char) (BAUD_PRESCALE >> 8);
     cb8:	e0 e4       	ldi	r30, 0x40	; 64
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	10 82       	st	Z, r1

// Important Bits to Clear
	CLR_BIT(UCSRA_temp,DOR);
     cbe:	8b 81       	ldd	r24, Y+3	; 0x03
     cc0:	87 7f       	andi	r24, 0xF7	; 247
     cc2:	8b 83       	std	Y+3, r24	; 0x03
	CLR_BIT(UCSRA_temp,PE);
     cc4:	8b 81       	ldd	r24, Y+3	; 0x03
     cc6:	8b 7f       	andi	r24, 0xFB	; 251
     cc8:	8b 83       	std	Y+3, r24	; 0x03
	CLR_BIT(UCSRA_temp,FE);
     cca:	8b 81       	ldd	r24, Y+3	; 0x03
     ccc:	8f 7e       	andi	r24, 0xEF	; 239
     cce:	8b 83       	std	Y+3, r24	; 0x03

// Selecting UCSRC Register
	SET_BIT(UCSRC_temp,URSEL);
     cd0:	89 81       	ldd	r24, Y+1	; 0x01
     cd2:	80 68       	ori	r24, 0x80	; 128
     cd4:	89 83       	std	Y+1, r24	; 0x01
	#elif CHAR_SIZE == 	BIT_7
		CLR_BIT(UCSRC_temp,UCSZ0);
		SET_BIT(UCSRC_temp,UCSZ1);
		CLR_BIT(UCSRB_temp,UCSZ2);
	#elif CHAR_SIZE == 	BIT_8
		SET_BIT(UCSRC_temp,UCSZ0);
     cd6:	89 81       	ldd	r24, Y+1	; 0x01
     cd8:	82 60       	ori	r24, 0x02	; 2
     cda:	89 83       	std	Y+1, r24	; 0x01
		SET_BIT(UCSRC_temp,UCSZ1);
     cdc:	89 81       	ldd	r24, Y+1	; 0x01
     cde:	84 60       	ori	r24, 0x04	; 4
     ce0:	89 83       	std	Y+1, r24	; 0x01
		CLR_BIT(UCSRB_temp,UCSZ2);
     ce2:	8a 81       	ldd	r24, Y+2	; 0x02
     ce4:	8b 7f       	andi	r24, 0xFB	; 251
     ce6:	8a 83       	std	Y+2, r24	; 0x02
		SET_BIT(UCSRB_temp,UCSZ2);
	#endif

// Mode Select
	#if   MODE_SEL == ASYNC
		CLR_BIT(UCSRC_temp,UMSEL);
     ce8:	89 81       	ldd	r24, Y+1	; 0x01
     cea:	8f 7b       	andi	r24, 0xBF	; 191
     cec:	89 83       	std	Y+1, r24	; 0x01
		// Selecting Speed
		#if   SPEED == SINGLE_SPEED
			CLR_BIT(UCSRA_temp,U2X);
     cee:	8b 81       	ldd	r24, Y+3	; 0x03
     cf0:	8d 7f       	andi	r24, 0xFD	; 253
     cf2:	8b 83       	std	Y+3, r24	; 0x03
		#endif
	#endif

// Parity Mode
	#if   PARITY == OFF
		CLR_BIT(UCSRC_temp,UPM0);
     cf4:	89 81       	ldd	r24, Y+1	; 0x01
     cf6:	8f 7e       	andi	r24, 0xEF	; 239
     cf8:	89 83       	std	Y+1, r24	; 0x01
		CLR_BIT(UCSRC_temp,UPM1);
     cfa:	89 81       	ldd	r24, Y+1	; 0x01
     cfc:	8f 7d       	andi	r24, 0xDF	; 223
     cfe:	89 83       	std	Y+1, r24	; 0x01
		SET_BIT(UCSRC_temp,UPM1);
	#endif

// Stop Bit Mode
	#if   STOP_BIT == BIT_1
		CLR_BIT(UCSRC_temp,USBS);
     d00:	89 81       	ldd	r24, Y+1	; 0x01
     d02:	87 7f       	andi	r24, 0xF7	; 247
     d04:	89 83       	std	Y+1, r24	; 0x01
		SET_BIT(UCSRC_temp,USBS);
	#endif

// Empty Interrupt Setting
	#if   EMPTY_INT == DIS
		CLR_BIT(UCSRB_temp,UDRIE);
     d06:	8a 81       	ldd	r24, Y+2	; 0x02
     d08:	8f 7d       	andi	r24, 0xDF	; 223
     d0a:	8a 83       	std	Y+2, r24	; 0x02
		SET_BIT(SREG,7);
	#endif

// TX Interrupt Setting
	#if   TX_INT == DIS
		CLR_BIT(UCSRB_temp,TXCIE);
     d0c:	8a 81       	ldd	r24, Y+2	; 0x02
     d0e:	8f 7b       	andi	r24, 0xBF	; 191
     d10:	8a 83       	std	Y+2, r24	; 0x02

// RX Interrupt Setting
	#if   RX_INT == DIS
		CLR_BIT(UCSRB_temp,RXCIE);
	#else
		SET_BIT(UCSRB_temp,RXCIE);
     d12:	8a 81       	ldd	r24, Y+2	; 0x02
     d14:	80 68       	ori	r24, 0x80	; 128
     d16:	8a 83       	std	Y+2, r24	; 0x02
		SET_BIT(SREG,7);
     d18:	af e5       	ldi	r26, 0x5F	; 95
     d1a:	b0 e0       	ldi	r27, 0x00	; 0
     d1c:	ef e5       	ldi	r30, 0x5F	; 95
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	80 81       	ld	r24, Z
     d22:	80 68       	ori	r24, 0x80	; 128
     d24:	8c 93       	st	X, r24
// Enabling Transmitter and Receiver
// Transmitter
	#if   TX_EN == DIS
		CLR_BIT(UCSRB_temp,TXEN);
	#else
		SET_BIT(UCSRB_temp,TXEN);
     d26:	8a 81       	ldd	r24, Y+2	; 0x02
     d28:	88 60       	ori	r24, 0x08	; 8
     d2a:	8a 83       	std	Y+2, r24	; 0x02

// Receiver
	#if   RX_EN == DIS
		CLR_BIT(UCSRB_temp,RXEN);
	#else
		SET_BIT(UCSRB_temp,RXEN);
     d2c:	8a 81       	ldd	r24, Y+2	; 0x02
     d2e:	80 61       	ori	r24, 0x10	; 16
     d30:	8a 83       	std	Y+2, r24	; 0x02
	#endif

// Loading UCSRC with Configured value
	UCSRA = UCSRA_temp;
     d32:	eb e2       	ldi	r30, 0x2B	; 43
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	8b 81       	ldd	r24, Y+3	; 0x03
     d38:	80 83       	st	Z, r24
	UCSRB = UCSRB_temp;
     d3a:	ea e2       	ldi	r30, 0x2A	; 42
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	8a 81       	ldd	r24, Y+2	; 0x02
     d40:	80 83       	st	Z, r24
	UCSRC = UCSRC_temp;
     d42:	e0 e4       	ldi	r30, 0x40	; 64
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	89 81       	ldd	r24, Y+1	; 0x01
     d48:	80 83       	st	Z, r24

// Pin Configuration
	DIO_SetPinDir(PORTD_0,INPUT);
     d4a:	88 e1       	ldi	r24, 0x18	; 24
     d4c:	60 e0       	ldi	r22, 0x00	; 0
     d4e:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <DIO_SetPinDir>
	DIO_SetPinDir(PORTD_1,OUTPUT);
     d52:	89 e1       	ldi	r24, 0x19	; 25
     d54:	61 e0       	ldi	r22, 0x01	; 1
     d56:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <DIO_SetPinDir>

}
     d5a:	0f 90       	pop	r0
     d5c:	0f 90       	pop	r0
     d5e:	0f 90       	pop	r0
     d60:	cf 91       	pop	r28
     d62:	df 91       	pop	r29
     d64:	08 95       	ret

00000d66 <USART_Write>:

void USART_Write(unit16 Data)
{
     d66:	df 93       	push	r29
     d68:	cf 93       	push	r28
     d6a:	00 d0       	rcall	.+0      	; 0xd6c <USART_Write+0x6>
     d6c:	cd b7       	in	r28, 0x3d	; 61
     d6e:	de b7       	in	r29, 0x3e	; 62
     d70:	9a 83       	std	Y+2, r25	; 0x02
     d72:	89 83       	std	Y+1, r24	; 0x01
  // Wait till Buffer is Empty
   while(GET_BIT(UCSRA,UDRE) == 0);
     d74:	eb e2       	ldi	r30, 0x2B	; 43
     d76:	f0 e0       	ldi	r31, 0x00	; 0
     d78:	80 81       	ld	r24, Z
     d7a:	82 95       	swap	r24
     d7c:	86 95       	lsr	r24
     d7e:	87 70       	andi	r24, 0x07	; 7
     d80:	88 2f       	mov	r24, r24
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	81 70       	andi	r24, 0x01	; 1
     d86:	90 70       	andi	r25, 0x00	; 0
     d88:	00 97       	sbiw	r24, 0x00	; 0
     d8a:	a1 f3       	breq	.-24     	; 0xd74 <USART_Write+0xe>
   if(GET_BIT(Data,8)) SET_BIT(UCSRB,TXB8);
   else                CLR_BIT(UCSRB,TXB8);
#endif

  // Load UDR with Data
  UDR = (unit8) Data;
     d8c:	ec e2       	ldi	r30, 0x2C	; 44
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	89 81       	ldd	r24, Y+1	; 0x01
     d92:	80 83       	st	Z, r24

  // Wait Till Transmission is complete
  while(GET_BIT(UCSRA,TXC) == 0);
     d94:	eb e2       	ldi	r30, 0x2B	; 43
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	80 81       	ld	r24, Z
     d9a:	82 95       	swap	r24
     d9c:	86 95       	lsr	r24
     d9e:	86 95       	lsr	r24
     da0:	83 70       	andi	r24, 0x03	; 3
     da2:	88 2f       	mov	r24, r24
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	81 70       	andi	r24, 0x01	; 1
     da8:	90 70       	andi	r25, 0x00	; 0
     daa:	00 97       	sbiw	r24, 0x00	; 0
     dac:	99 f3       	breq	.-26     	; 0xd94 <USART_Write+0x2e>

  // Clear Transmission Flag (Optional)
  SET_BIT(UCSRA,TXC);
     dae:	ab e2       	ldi	r26, 0x2B	; 43
     db0:	b0 e0       	ldi	r27, 0x00	; 0
     db2:	eb e2       	ldi	r30, 0x2B	; 43
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	80 81       	ld	r24, Z
     db8:	80 64       	ori	r24, 0x40	; 64
     dba:	8c 93       	st	X, r24
}
     dbc:	0f 90       	pop	r0
     dbe:	0f 90       	pop	r0
     dc0:	cf 91       	pop	r28
     dc2:	df 91       	pop	r29
     dc4:	08 95       	ret

00000dc6 <USART_Read>:

unit16 USART_Read()
{
     dc6:	df 93       	push	r29
     dc8:	cf 93       	push	r28
     dca:	00 d0       	rcall	.+0      	; 0xdcc <USART_Read+0x6>
     dcc:	00 d0       	rcall	.+0      	; 0xdce <USART_Read+0x8>
     dce:	0f 92       	push	r0
     dd0:	cd b7       	in	r28, 0x3d	; 61
     dd2:	de b7       	in	r29, 0x3e	; 62
   // Variable to store Received data
   unit16 data = 0;
     dd4:	1b 82       	std	Y+3, r1	; 0x03
     dd6:	1a 82       	std	Y+2, r1	; 0x02

   // Status Checking Variable
   unit8 status = 0;
     dd8:	19 82       	std	Y+1, r1	; 0x01

   // Wait till reception is completed
  while(GET_BIT(UCSRA,RXC) == 0);
     dda:	eb e2       	ldi	r30, 0x2B	; 43
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	88 23       	and	r24, r24
     de2:	dc f7       	brge	.-10     	; 0xdda <USART_Read+0x14>

  // Reading Status
   status = UCSRA;
     de4:	eb e2       	ldi	r30, 0x2B	; 43
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	80 81       	ld	r24, Z
     dea:	89 83       	std	Y+1, r24	; 0x01

   // Generate error in case of Frame Error , Parity Error and Data Over-Run
   if(GET_BIT(status,FE) | GET_BIT(status,PE) | GET_BIT(status,DOR))  return -1;
     dec:	89 81       	ldd	r24, Y+1	; 0x01
     dee:	82 95       	swap	r24
     df0:	8f 70       	andi	r24, 0x0F	; 15
     df2:	28 2f       	mov	r18, r24
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	89 81       	ldd	r24, Y+1	; 0x01
     df8:	86 95       	lsr	r24
     dfa:	86 95       	lsr	r24
     dfc:	88 2f       	mov	r24, r24
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	28 2b       	or	r18, r24
     e02:	39 2b       	or	r19, r25
     e04:	89 81       	ldd	r24, Y+1	; 0x01
     e06:	86 95       	lsr	r24
     e08:	86 95       	lsr	r24
     e0a:	86 95       	lsr	r24
     e0c:	88 2f       	mov	r24, r24
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	82 2b       	or	r24, r18
     e12:	93 2b       	or	r25, r19
     e14:	81 70       	andi	r24, 0x01	; 1
     e16:	90 70       	andi	r25, 0x00	; 0
     e18:	88 23       	and	r24, r24
     e1a:	29 f0       	breq	.+10     	; 0xe26 <USART_Read+0x60>
     e1c:	8f ef       	ldi	r24, 0xFF	; 255
     e1e:	9f ef       	ldi	r25, 0xFF	; 255
     e20:	9d 83       	std	Y+5, r25	; 0x05
     e22:	8c 83       	std	Y+4, r24	; 0x04
     e24:	0f c0       	rjmp	.+30     	; 0xe44 <USART_Read+0x7e>

#if CHAR_SIZE == 	BIT_9
   // Get Data in Case of 9 Bit
   data = GET_BIT(UCSRB,RXB8) << 8;
#endif
  data |= (unit16)UDR;
     e26:	ec e2       	ldi	r30, 0x2C	; 44
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	80 81       	ld	r24, Z
     e2c:	28 2f       	mov	r18, r24
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	8a 81       	ldd	r24, Y+2	; 0x02
     e32:	9b 81       	ldd	r25, Y+3	; 0x03
     e34:	82 2b       	or	r24, r18
     e36:	93 2b       	or	r25, r19
     e38:	9b 83       	std	Y+3, r25	; 0x03
     e3a:	8a 83       	std	Y+2, r24	; 0x02

  // Return data
  return data;
     e3c:	8a 81       	ldd	r24, Y+2	; 0x02
     e3e:	9b 81       	ldd	r25, Y+3	; 0x03
     e40:	9d 83       	std	Y+5, r25	; 0x05
     e42:	8c 83       	std	Y+4, r24	; 0x04
     e44:	8c 81       	ldd	r24, Y+4	; 0x04
     e46:	9d 81       	ldd	r25, Y+5	; 0x05

}
     e48:	0f 90       	pop	r0
     e4a:	0f 90       	pop	r0
     e4c:	0f 90       	pop	r0
     e4e:	0f 90       	pop	r0
     e50:	0f 90       	pop	r0
     e52:	cf 91       	pop	r28
     e54:	df 91       	pop	r29
     e56:	08 95       	ret

00000e58 <USART_Flush>:

// Function used to Flush UDR Buffer in case of Error to Empty Register to be ready for another Reception
void USART_Flush(void){
     e58:	df 93       	push	r29
     e5a:	cf 93       	push	r28
     e5c:	0f 92       	push	r0
     e5e:	cd b7       	in	r28, 0x3d	; 61
     e60:	de b7       	in	r29, 0x3e	; 62
     e62:	04 c0       	rjmp	.+8      	; 0xe6c <USART_Flush+0x14>
	// Read Data till UDR is empty
	unit8 dummy;
	while(GET_BIT(UCSRA,RXC) == 1) dummy = UDR;
     e64:	ec e2       	ldi	r30, 0x2C	; 44
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	89 83       	std	Y+1, r24	; 0x01
     e6c:	eb e2       	ldi	r30, 0x2B	; 43
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	88 1f       	adc	r24, r24
     e74:	88 27       	eor	r24, r24
     e76:	88 1f       	adc	r24, r24
     e78:	81 30       	cpi	r24, 0x01	; 1
     e7a:	a1 f3       	breq	.-24     	; 0xe64 <USART_Flush+0xc>
}
     e7c:	0f 90       	pop	r0
     e7e:	cf 91       	pop	r28
     e80:	df 91       	pop	r29
     e82:	08 95       	ret

00000e84 <Rx_Interrupt>:

unit8 Rx_Interrupt(void)
{
     e84:	df 93       	push	r29
     e86:	cf 93       	push	r28
     e88:	0f 92       	push	r0
     e8a:	cd b7       	in	r28, 0x3d	; 61
     e8c:	de b7       	in	r29, 0x3e	; 62

	USART_Read();
     e8e:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <USART_Read>
}
     e92:	0f 90       	pop	r0
     e94:	cf 91       	pop	r28
     e96:	df 91       	pop	r29
     e98:	08 95       	ret

00000e9a <SetUSARTReceiveCallBack>:
void SetUSARTReceiveCallBack(void (*ptr)())
{
     e9a:	df 93       	push	r29
     e9c:	cf 93       	push	r28
     e9e:	00 d0       	rcall	.+0      	; 0xea0 <SetUSARTReceiveCallBack+0x6>
     ea0:	cd b7       	in	r28, 0x3d	; 61
     ea2:	de b7       	in	r29, 0x3e	; 62
     ea4:	9a 83       	std	Y+2, r25	; 0x02
     ea6:	89 83       	std	Y+1, r24	; 0x01
	if(ptr != 0LL)
     ea8:	89 81       	ldd	r24, Y+1	; 0x01
     eaa:	9a 81       	ldd	r25, Y+2	; 0x02
     eac:	00 97       	sbiw	r24, 0x00	; 0
     eae:	31 f0       	breq	.+12     	; 0xebc <SetUSARTReceiveCallBack+0x22>
	{
		ptr_RXC = ptr;
     eb0:	89 81       	ldd	r24, Y+1	; 0x01
     eb2:	9a 81       	ldd	r25, Y+2	; 0x02
     eb4:	90 93 8e 00 	sts	0x008E, r25
     eb8:	80 93 8d 00 	sts	0x008D, r24
	}
}
     ebc:	0f 90       	pop	r0
     ebe:	0f 90       	pop	r0
     ec0:	cf 91       	pop	r28
     ec2:	df 91       	pop	r29
     ec4:	08 95       	ret

00000ec6 <SetUSARTTransmitCallBack>:

void SetUSARTTransmitCallBack(void (*ptr)())
{
     ec6:	df 93       	push	r29
     ec8:	cf 93       	push	r28
     eca:	00 d0       	rcall	.+0      	; 0xecc <SetUSARTTransmitCallBack+0x6>
     ecc:	cd b7       	in	r28, 0x3d	; 61
     ece:	de b7       	in	r29, 0x3e	; 62
     ed0:	9a 83       	std	Y+2, r25	; 0x02
     ed2:	89 83       	std	Y+1, r24	; 0x01
	if(ptr != 0LL)
     ed4:	89 81       	ldd	r24, Y+1	; 0x01
     ed6:	9a 81       	ldd	r25, Y+2	; 0x02
     ed8:	00 97       	sbiw	r24, 0x00	; 0
     eda:	31 f0       	breq	.+12     	; 0xee8 <SetUSARTTransmitCallBack+0x22>
	{
		ptr_TXC = ptr;
     edc:	89 81       	ldd	r24, Y+1	; 0x01
     ede:	9a 81       	ldd	r25, Y+2	; 0x02
     ee0:	90 93 90 00 	sts	0x0090, r25
     ee4:	80 93 8f 00 	sts	0x008F, r24
	}
}
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <__vector_13>:

ISR(USART_RXC_vect)
{
     ef2:	1f 92       	push	r1
     ef4:	0f 92       	push	r0
     ef6:	0f b6       	in	r0, 0x3f	; 63
     ef8:	0f 92       	push	r0
     efa:	11 24       	eor	r1, r1
     efc:	2f 93       	push	r18
     efe:	3f 93       	push	r19
     f00:	4f 93       	push	r20
     f02:	5f 93       	push	r21
     f04:	6f 93       	push	r22
     f06:	7f 93       	push	r23
     f08:	8f 93       	push	r24
     f0a:	9f 93       	push	r25
     f0c:	af 93       	push	r26
     f0e:	bf 93       	push	r27
     f10:	ef 93       	push	r30
     f12:	ff 93       	push	r31
     f14:	df 93       	push	r29
     f16:	cf 93       	push	r28
     f18:	cd b7       	in	r28, 0x3d	; 61
     f1a:	de b7       	in	r29, 0x3e	; 62
	if(ptr_RXC != 0LL) ptr_RXC();
     f1c:	80 91 8d 00 	lds	r24, 0x008D
     f20:	90 91 8e 00 	lds	r25, 0x008E
     f24:	00 97       	sbiw	r24, 0x00	; 0
     f26:	29 f0       	breq	.+10     	; 0xf32 <__vector_13+0x40>
     f28:	e0 91 8d 00 	lds	r30, 0x008D
     f2c:	f0 91 8e 00 	lds	r31, 0x008E
     f30:	09 95       	icall
}
     f32:	cf 91       	pop	r28
     f34:	df 91       	pop	r29
     f36:	ff 91       	pop	r31
     f38:	ef 91       	pop	r30
     f3a:	bf 91       	pop	r27
     f3c:	af 91       	pop	r26
     f3e:	9f 91       	pop	r25
     f40:	8f 91       	pop	r24
     f42:	7f 91       	pop	r23
     f44:	6f 91       	pop	r22
     f46:	5f 91       	pop	r21
     f48:	4f 91       	pop	r20
     f4a:	3f 91       	pop	r19
     f4c:	2f 91       	pop	r18
     f4e:	0f 90       	pop	r0
     f50:	0f be       	out	0x3f, r0	; 63
     f52:	0f 90       	pop	r0
     f54:	1f 90       	pop	r1
     f56:	18 95       	reti

00000f58 <__vector_15>:

ISR(USART_TXC_vect)
{
     f58:	1f 92       	push	r1
     f5a:	0f 92       	push	r0
     f5c:	0f b6       	in	r0, 0x3f	; 63
     f5e:	0f 92       	push	r0
     f60:	11 24       	eor	r1, r1
     f62:	2f 93       	push	r18
     f64:	3f 93       	push	r19
     f66:	4f 93       	push	r20
     f68:	5f 93       	push	r21
     f6a:	6f 93       	push	r22
     f6c:	7f 93       	push	r23
     f6e:	8f 93       	push	r24
     f70:	9f 93       	push	r25
     f72:	af 93       	push	r26
     f74:	bf 93       	push	r27
     f76:	ef 93       	push	r30
     f78:	ff 93       	push	r31
     f7a:	df 93       	push	r29
     f7c:	cf 93       	push	r28
     f7e:	cd b7       	in	r28, 0x3d	; 61
     f80:	de b7       	in	r29, 0x3e	; 62
	if(ptr_TXC != 0LL) ptr_TXC();
     f82:	80 91 8f 00 	lds	r24, 0x008F
     f86:	90 91 90 00 	lds	r25, 0x0090
     f8a:	00 97       	sbiw	r24, 0x00	; 0
     f8c:	29 f0       	breq	.+10     	; 0xf98 <__vector_15+0x40>
     f8e:	e0 91 8f 00 	lds	r30, 0x008F
     f92:	f0 91 90 00 	lds	r31, 0x0090
     f96:	09 95       	icall
}
     f98:	cf 91       	pop	r28
     f9a:	df 91       	pop	r29
     f9c:	ff 91       	pop	r31
     f9e:	ef 91       	pop	r30
     fa0:	bf 91       	pop	r27
     fa2:	af 91       	pop	r26
     fa4:	9f 91       	pop	r25
     fa6:	8f 91       	pop	r24
     fa8:	7f 91       	pop	r23
     faa:	6f 91       	pop	r22
     fac:	5f 91       	pop	r21
     fae:	4f 91       	pop	r20
     fb0:	3f 91       	pop	r19
     fb2:	2f 91       	pop	r18
     fb4:	0f 90       	pop	r0
     fb6:	0f be       	out	0x3f, r0	; 63
     fb8:	0f 90       	pop	r0
     fba:	1f 90       	pop	r1
     fbc:	18 95       	reti

00000fbe <Timer0_init>:
static void (*ptr2fun2OVF) ();
static void (*ptr2fun2CMP) ();

// Initializing Section
void Timer0_init()
{
     fbe:	df 93       	push	r29
     fc0:	cf 93       	push	r28
     fc2:	cd b7       	in	r28, 0x3d	; 61
     fc4:	de b7       	in	r29, 0x3e	; 62
	  CLR_BIT(TCCR0,WGM00);
	  SET_BIT(TCCR0,WGM01);
	  // Load Compare Match Register with Compare Value
	  	  OCR0 = Tim0_CTC ;
#elif WAVEFORM_Timer0 == FAST_PWM
	  SET_BIT(TCCR0,WGM00);
     fc6:	a3 e5       	ldi	r26, 0x53	; 83
     fc8:	b0 e0       	ldi	r27, 0x00	; 0
     fca:	e3 e5       	ldi	r30, 0x53	; 83
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	80 64       	ori	r24, 0x40	; 64
     fd2:	8c 93       	st	X, r24
	  SET_BIT(TCCR0,WGM01);
     fd4:	a3 e5       	ldi	r26, 0x53	; 83
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	e3 e5       	ldi	r30, 0x53	; 83
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	80 81       	ld	r24, Z
     fde:	88 60       	ori	r24, 0x08	; 8
     fe0:	8c 93       	st	X, r24
	  CLR_BIT(TCCR0,FOC0);
     fe2:	a3 e5       	ldi	r26, 0x53	; 83
     fe4:	b0 e0       	ldi	r27, 0x00	; 0
     fe6:	e3 e5       	ldi	r30, 0x53	; 83
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	80 81       	ld	r24, Z
     fec:	8f 77       	andi	r24, 0x7F	; 127
     fee:	8c 93       	st	X, r24
#elif CLK_SEL_Timer0 == PRE_256
	  CLR_BIT(TCCR0,CS00);
	  CLR_BIT(TCCR0,CS01);
	  SET_BIT(TCCR0,CS02);
#elif CLK_SEL_Timer0 == PRE_1024
	  SET_BIT(TCCR0,CS00);
     ff0:	a3 e5       	ldi	r26, 0x53	; 83
     ff2:	b0 e0       	ldi	r27, 0x00	; 0
     ff4:	e3 e5       	ldi	r30, 0x53	; 83
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	81 60       	ori	r24, 0x01	; 1
     ffc:	8c 93       	st	X, r24
	  CLR_BIT(TCCR0,CS01);
     ffe:	a3 e5       	ldi	r26, 0x53	; 83
    1000:	b0 e0       	ldi	r27, 0x00	; 0
    1002:	e3 e5       	ldi	r30, 0x53	; 83
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	80 81       	ld	r24, Z
    1008:	8d 7f       	andi	r24, 0xFD	; 253
    100a:	8c 93       	st	X, r24
	  SET_BIT(TCCR0,CS02);
    100c:	a3 e5       	ldi	r26, 0x53	; 83
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	e3 e5       	ldi	r30, 0x53	; 83
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	80 81       	ld	r24, Z
    1016:	84 60       	ori	r24, 0x04	; 4
    1018:	8c 93       	st	X, r24
	  SET_BIT(TCCR0,COM00);
	  CLR_BIT(TCCR0,COM01);
	  // Configure Pin OC0 as Output
	  SET_BIT(DDRB,OC0);
#elif  COMPARE_MATCH_Timer0 == CLR_OC        //  Clear On CM and Set at TOP     Clear CM up and Set CM down
	  CLR_BIT(TCCR0,COM00);
    101a:	a3 e5       	ldi	r26, 0x53	; 83
    101c:	b0 e0       	ldi	r27, 0x00	; 0
    101e:	e3 e5       	ldi	r30, 0x53	; 83
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 81       	ld	r24, Z
    1024:	8f 7e       	andi	r24, 0xEF	; 239
    1026:	8c 93       	st	X, r24
	  SET_BIT(TCCR0,COM01);
    1028:	a3 e5       	ldi	r26, 0x53	; 83
    102a:	b0 e0       	ldi	r27, 0x00	; 0
    102c:	e3 e5       	ldi	r30, 0x53	; 83
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	80 81       	ld	r24, Z
    1032:	80 62       	ori	r24, 0x20	; 32
    1034:	8c 93       	st	X, r24
	  // Configure Pin OC0 as Output
	  SET_BIT(DDRB,OC0);
    1036:	a7 e3       	ldi	r26, 0x37	; 55
    1038:	b0 e0       	ldi	r27, 0x00	; 0
    103a:	e7 e3       	ldi	r30, 0x37	; 55
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	88 60       	ori	r24, 0x08	; 8
    1042:	8c 93       	st	X, r24
	  SET_BIT(TCCR0,COM01);
	  // Configure Pin OC0 as Output
	  SET_BIT(DDRB,OC0);
#endif
// Initializing Timer0
  TCNT0 = 0;
    1044:	e2 e5       	ldi	r30, 0x52	; 82
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	10 82       	st	Z, r1

// Enable Timer0 Overflow Interrupt
#if Tim0_OV_INT == DISABLE
  CLR_BIT(TIMSK,TOIE0);
    104a:	a9 e5       	ldi	r26, 0x59	; 89
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	e9 e5       	ldi	r30, 0x59	; 89
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	8e 7f       	andi	r24, 0xFE	; 254
    1056:	8c 93       	st	X, r24
  SET_BIT(TIMSK,TOIE0);
#endif

// Enable Timer0 Compare Match Interrupt
#if Tim0_CMP_INT == DISABLE
  CLR_BIT(TIMSK,OCIE0);
    1058:	a9 e5       	ldi	r26, 0x59	; 89
    105a:	b0 e0       	ldi	r27, 0x00	; 0
    105c:	e9 e5       	ldi	r30, 0x59	; 89
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	8d 7f       	andi	r24, 0xFD	; 253
    1064:	8c 93       	st	X, r24
#else
  SET_BIT(TIMSK,OCIE0);
#endif

}
    1066:	cf 91       	pop	r28
    1068:	df 91       	pop	r29
    106a:	08 95       	ret

0000106c <Timer1_init>:

void Timer1_init()
{
    106c:	df 93       	push	r29
    106e:	cf 93       	push	r28
    1070:	cd b7       	in	r28, 0x3d	; 61
    1072:	de b7       	in	r29, 0x3e	; 62
	// Selecting Mode for Timer 1
#if     WAVEFORM_Timer1 == NORMAL_MODE
	CLR_BIT(TCCR1A,WGM10);
    1074:	af e4       	ldi	r26, 0x4F	; 79
    1076:	b0 e0       	ldi	r27, 0x00	; 0
    1078:	ef e4       	ldi	r30, 0x4F	; 79
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	8e 7f       	andi	r24, 0xFE	; 254
    1080:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,WGM11);
    1082:	af e4       	ldi	r26, 0x4F	; 79
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	ef e4       	ldi	r30, 0x4F	; 79
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	8d 7f       	andi	r24, 0xFD	; 253
    108e:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,WGM12);
    1090:	ae e4       	ldi	r26, 0x4E	; 78
    1092:	b0 e0       	ldi	r27, 0x00	; 0
    1094:	ee e4       	ldi	r30, 0x4E	; 78
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	80 81       	ld	r24, Z
    109a:	87 7f       	andi	r24, 0xF7	; 247
    109c:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,WGM13);
    109e:	ae e4       	ldi	r26, 0x4E	; 78
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	ee e4       	ldi	r30, 0x4E	; 78
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	8f 7e       	andi	r24, 0xEF	; 239
    10aa:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM13);
#endif

	// Compare Match Mode For Timer1A
	#if    COMPARE_MATCH_Timer1A == NORMAL_PORT
		  CLR_BIT(TCCR1A,COM1A0);
    10ac:	af e4       	ldi	r26, 0x4F	; 79
    10ae:	b0 e0       	ldi	r27, 0x00	; 0
    10b0:	ef e4       	ldi	r30, 0x4F	; 79
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	80 81       	ld	r24, Z
    10b6:	8f 7b       	andi	r24, 0xBF	; 191
    10b8:	8c 93       	st	X, r24
		  CLR_BIT(TCCR1A,COM1A1);
    10ba:	af e4       	ldi	r26, 0x4F	; 79
    10bc:	b0 e0       	ldi	r27, 0x00	; 0
    10be:	ef e4       	ldi	r30, 0x4F	; 79
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	80 81       	ld	r24, Z
    10c4:	8f 77       	andi	r24, 0x7F	; 127
    10c6:	8c 93       	st	X, r24
		  CLR_BIT(TCCR1A,COM1A1);
	#endif

	// CompBre Match Mode For Timer1B
	#if    COMPBRE_MBTCH_Timer1B == NORMBL_PORT
		   CLR_BIT(TCCR1A,COM1B0);
    10c8:	af e4       	ldi	r26, 0x4F	; 79
    10ca:	b0 e0       	ldi	r27, 0x00	; 0
    10cc:	ef e4       	ldi	r30, 0x4F	; 79
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	80 81       	ld	r24, Z
    10d2:	8f 7e       	andi	r24, 0xEF	; 239
    10d4:	8c 93       	st	X, r24
		   CLR_BIT(TCCR1A,COM1B1);
    10d6:	af e4       	ldi	r26, 0x4F	; 79
    10d8:	b0 e0       	ldi	r27, 0x00	; 0
    10da:	ef e4       	ldi	r30, 0x4F	; 79
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	80 81       	ld	r24, Z
    10e0:	8f 7d       	andi	r24, 0xDF	; 223
    10e2:	8c 93       	st	X, r24
		   CLR_BIT(TCCR1A,COM1B0);
		   CLR_BIT(TCCR1A,COM1B1);
	#endif


}
    10e4:	cf 91       	pop	r28
    10e6:	df 91       	pop	r29
    10e8:	08 95       	ret

000010ea <Timer2_init>:

void Timer2_init()
{
    10ea:	df 93       	push	r29
    10ec:	cf 93       	push	r28
    10ee:	cd b7       	in	r28, 0x3d	; 61
    10f0:	de b7       	in	r29, 0x3e	; 62
		  CLR_BIT(TCCR2,WGM20);
		  SET_BIT(TCCR2,WGM21);
		  // Load Compare Match Register with Compare Value
		  	  OCR2 = Tim2_CTC ;
	#elif WAVEFORM_Timer2 == FAST_PWM
		  SET_BIT(TCCR2,WGM20);
    10f2:	a5 e4       	ldi	r26, 0x45	; 69
    10f4:	b0 e0       	ldi	r27, 0x00	; 0
    10f6:	e5 e4       	ldi	r30, 0x45	; 69
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	80 81       	ld	r24, Z
    10fc:	80 64       	ori	r24, 0x40	; 64
    10fe:	8c 93       	st	X, r24
		  SET_BIT(TCCR2,WGM21);
    1100:	a5 e4       	ldi	r26, 0x45	; 69
    1102:	b0 e0       	ldi	r27, 0x00	; 0
    1104:	e5 e4       	ldi	r30, 0x45	; 69
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	80 81       	ld	r24, Z
    110a:	88 60       	ori	r24, 0x08	; 8
    110c:	8c 93       	st	X, r24
		  CLR_BIT(TCCR2,FOC2);
    110e:	a5 e4       	ldi	r26, 0x45	; 69
    1110:	b0 e0       	ldi	r27, 0x00	; 0
    1112:	e5 e4       	ldi	r30, 0x45	; 69
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	80 81       	ld	r24, Z
    1118:	8f 77       	andi	r24, 0x7F	; 127
    111a:	8c 93       	st	X, r24
	#elif CLK_SEL_Timer2 == PRE_256
		  CLR_BIT(TCCR2,CS20);
		  CLR_BIT(TCCR2,CS21);
		  SET_BIT(TCCR2,CS22);
	#elif CLK_SEL_Timer2 == PRE_1024
		  SET_BIT(TCCR2,CS20);
    111c:	a5 e4       	ldi	r26, 0x45	; 69
    111e:	b0 e0       	ldi	r27, 0x00	; 0
    1120:	e5 e4       	ldi	r30, 0x45	; 69
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
    1126:	81 60       	ori	r24, 0x01	; 1
    1128:	8c 93       	st	X, r24
		  CLR_BIT(TCCR2,CS21);
    112a:	a5 e4       	ldi	r26, 0x45	; 69
    112c:	b0 e0       	ldi	r27, 0x00	; 0
    112e:	e5 e4       	ldi	r30, 0x45	; 69
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	80 81       	ld	r24, Z
    1134:	8d 7f       	andi	r24, 0xFD	; 253
    1136:	8c 93       	st	X, r24
		  SET_BIT(TCCR2,CS22);
    1138:	a5 e4       	ldi	r26, 0x45	; 69
    113a:	b0 e0       	ldi	r27, 0x00	; 0
    113c:	e5 e4       	ldi	r30, 0x45	; 69
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	84 60       	ori	r24, 0x04	; 4
    1144:	8c 93       	st	X, r24
		  SET_BIT(TCCR2,COM20);
		  CLR_BIT(TCCR2,COM21);
		  // Configure Pin OC2 as Output
		  SET_BIT(DDRD,OC2);
	#elif  COMPARE_MATCH_Timer2 == CLR_OC
		  CLR_BIT(TCCR2,COM20);
    1146:	a5 e4       	ldi	r26, 0x45	; 69
    1148:	b0 e0       	ldi	r27, 0x00	; 0
    114a:	e5 e4       	ldi	r30, 0x45	; 69
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	80 81       	ld	r24, Z
    1150:	8f 7e       	andi	r24, 0xEF	; 239
    1152:	8c 93       	st	X, r24
		  SET_BIT(TCCR2,COM21);
    1154:	a5 e4       	ldi	r26, 0x45	; 69
    1156:	b0 e0       	ldi	r27, 0x00	; 0
    1158:	e5 e4       	ldi	r30, 0x45	; 69
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	80 81       	ld	r24, Z
    115e:	80 62       	ori	r24, 0x20	; 32
    1160:	8c 93       	st	X, r24
		  // Configure Pin OC2 as Output
		  SET_BIT(DDRD,OC2);
    1162:	a1 e3       	ldi	r26, 0x31	; 49
    1164:	b0 e0       	ldi	r27, 0x00	; 0
    1166:	e1 e3       	ldi	r30, 0x31	; 49
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	80 81       	ld	r24, Z
    116c:	80 68       	ori	r24, 0x80	; 128
    116e:	8c 93       	st	X, r24
		  SET_BIT(TCCR2,COM21);
		  // Configure Pin OC2 as Output
		  SET_BIT(DDRD,OC2);
	#endif
	// Initializing Timer2
	  TCNT2 = 0;
    1170:	e4 e4       	ldi	r30, 0x44	; 68
    1172:	f0 e0       	ldi	r31, 0x00	; 0
    1174:	10 82       	st	Z, r1

	// Enable Timer2 Overflow Interrupt
	#if Tim2_OV_INT == DISABLE
	  CLR_BIT(TIMSK,TOIE2);
    1176:	a9 e5       	ldi	r26, 0x59	; 89
    1178:	b0 e0       	ldi	r27, 0x00	; 0
    117a:	e9 e5       	ldi	r30, 0x59	; 89
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	80 81       	ld	r24, Z
    1180:	8f 7b       	andi	r24, 0xBF	; 191
    1182:	8c 93       	st	X, r24
	  SET_BIT(TIMSK,TOIE2);
	#endif

	// Disable Timer2 Overflow Interrupt
	#if Tim2_CMP_INT == DISABLE
	  CLR_BIT(TIMSK,OCIE2);
    1184:	a9 e5       	ldi	r26, 0x59	; 89
    1186:	b0 e0       	ldi	r27, 0x00	; 0
    1188:	e9 e5       	ldi	r30, 0x59	; 89
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	80 81       	ld	r24, Z
    118e:	8f 77       	andi	r24, 0x7F	; 127
    1190:	8c 93       	st	X, r24
	#else
	  SET_BIT(TIMSK,OCIE2);
	#endif
}
    1192:	cf 91       	pop	r28
    1194:	df 91       	pop	r29
    1196:	08 95       	ret

00001198 <CheckTimer0>:

// Timer Check Section
unit8 CheckTimer0()
{
    1198:	df 93       	push	r29
    119a:	cf 93       	push	r28
    119c:	0f 92       	push	r0
    119e:	cd b7       	in	r28, 0x3d	; 61
    11a0:	de b7       	in	r29, 0x3e	; 62
   // Variable used to store Value of Timer
   unit8 counter = 0;
    11a2:	19 82       	std	Y+1, r1	; 0x01
   // Wait until Timer Overflow occurs
   while(GET_BIT(TIFR,TOV0) == 0);
    11a4:	e8 e5       	ldi	r30, 0x58	; 88
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	80 81       	ld	r24, Z
    11aa:	88 2f       	mov	r24, r24
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	81 70       	andi	r24, 0x01	; 1
    11b0:	90 70       	andi	r25, 0x00	; 0
    11b2:	00 97       	sbiw	r24, 0x00	; 0
    11b4:	b9 f3       	breq	.-18     	; 0x11a4 <CheckTimer0+0xc>
   // Clear Timer Overflow flag by writing one to TOV0 Bit
   SET_BIT(TIFR,TOV0);
    11b6:	a8 e5       	ldi	r26, 0x58	; 88
    11b8:	b0 e0       	ldi	r27, 0x00	; 0
    11ba:	e8 e5       	ldi	r30, 0x58	; 88
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	80 81       	ld	r24, Z
    11c0:	81 60       	ori	r24, 0x01	; 1
    11c2:	8c 93       	st	X, r24
   // Counter used as indicator that overflow occurred
   counter = 1;
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	89 83       	std	Y+1, r24	; 0x01
   return counter;
    11c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    11ca:	0f 90       	pop	r0
    11cc:	cf 91       	pop	r28
    11ce:	df 91       	pop	r29
    11d0:	08 95       	ret

000011d2 <CheckTimer1>:

unit8 CheckTimer1()
{
    11d2:	df 93       	push	r29
    11d4:	cf 93       	push	r28
    11d6:	0f 92       	push	r0
    11d8:	cd b7       	in	r28, 0x3d	; 61
    11da:	de b7       	in	r29, 0x3e	; 62
	   unit8 counter = 0;
    11dc:	19 82       	std	Y+1, r1	; 0x01
	   while(GET_BIT(TIFR,TOV1) == 0);
    11de:	e8 e5       	ldi	r30, 0x58	; 88
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	86 95       	lsr	r24
    11e6:	86 95       	lsr	r24
    11e8:	88 2f       	mov	r24, r24
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	81 70       	andi	r24, 0x01	; 1
    11ee:	90 70       	andi	r25, 0x00	; 0
    11f0:	00 97       	sbiw	r24, 0x00	; 0
    11f2:	a9 f3       	breq	.-22     	; 0x11de <CheckTimer1+0xc>
	   CLR_BIT(TIFR,TOV1);
    11f4:	a8 e5       	ldi	r26, 0x58	; 88
    11f6:	b0 e0       	ldi	r27, 0x00	; 0
    11f8:	e8 e5       	ldi	r30, 0x58	; 88
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 81       	ld	r24, Z
    11fe:	8b 7f       	andi	r24, 0xFB	; 251
    1200:	8c 93       	st	X, r24
	   counter = 1;
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	89 83       	std	Y+1, r24	; 0x01
	   return counter;
    1206:	89 81       	ldd	r24, Y+1	; 0x01
}
    1208:	0f 90       	pop	r0
    120a:	cf 91       	pop	r28
    120c:	df 91       	pop	r29
    120e:	08 95       	ret

00001210 <CheckTimer2>:

unit8 CheckTimer2()
{
    1210:	df 93       	push	r29
    1212:	cf 93       	push	r28
    1214:	0f 92       	push	r0
    1216:	cd b7       	in	r28, 0x3d	; 61
    1218:	de b7       	in	r29, 0x3e	; 62
	  // Variable used to store Value of Timer
	   unit8 counter = 0;
    121a:	19 82       	std	Y+1, r1	; 0x01
	   // Wait until Timer Overflow occurs
	   while(GET_BIT(TIFR,TOV2) == 0);
    121c:	e8 e5       	ldi	r30, 0x58	; 88
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	80 81       	ld	r24, Z
    1222:	82 95       	swap	r24
    1224:	86 95       	lsr	r24
    1226:	86 95       	lsr	r24
    1228:	83 70       	andi	r24, 0x03	; 3
    122a:	88 2f       	mov	r24, r24
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	81 70       	andi	r24, 0x01	; 1
    1230:	90 70       	andi	r25, 0x00	; 0
    1232:	00 97       	sbiw	r24, 0x00	; 0
    1234:	99 f3       	breq	.-26     	; 0x121c <CheckTimer2+0xc>
	   // Clear Timer Overflow flag by writing one to TOV0 Bit
	   SET_BIT(TIFR,TOV2);
    1236:	a8 e5       	ldi	r26, 0x58	; 88
    1238:	b0 e0       	ldi	r27, 0x00	; 0
    123a:	e8 e5       	ldi	r30, 0x58	; 88
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	80 81       	ld	r24, Z
    1240:	80 64       	ori	r24, 0x40	; 64
    1242:	8c 93       	st	X, r24
	   // Counter used as indicator that overflow occurred
	   counter = 1;
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	89 83       	std	Y+1, r24	; 0x01
	   return counter;
    1248:	89 81       	ldd	r24, Y+1	; 0x01
}
    124a:	0f 90       	pop	r0
    124c:	cf 91       	pop	r28
    124e:	df 91       	pop	r29
    1250:	08 95       	ret

00001252 <Counter0>:

// Counter Value Section
unit8 Counter0(){
    1252:	df 93       	push	r29
    1254:	cf 93       	push	r28
    1256:	0f 92       	push	r0
    1258:	cd b7       	in	r28, 0x3d	; 61
    125a:	de b7       	in	r29, 0x3e	; 62
	unit8 counter = TCNT0;
    125c:	e2 e5       	ldi	r30, 0x52	; 82
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	80 81       	ld	r24, Z
    1262:	89 83       	std	Y+1, r24	; 0x01
	return counter;
    1264:	89 81       	ldd	r24, Y+1	; 0x01
}
    1266:	0f 90       	pop	r0
    1268:	cf 91       	pop	r28
    126a:	df 91       	pop	r29
    126c:	08 95       	ret

0000126e <Counter1>:

unit16 Counter1(){
    126e:	df 93       	push	r29
    1270:	cf 93       	push	r28
    1272:	00 d0       	rcall	.+0      	; 0x1274 <Counter1+0x6>
    1274:	cd b7       	in	r28, 0x3d	; 61
    1276:	de b7       	in	r29, 0x3e	; 62
	unit16 counter = TCNT1;
    1278:	ec e4       	ldi	r30, 0x4C	; 76
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	80 81       	ld	r24, Z
    127e:	91 81       	ldd	r25, Z+1	; 0x01
    1280:	9a 83       	std	Y+2, r25	; 0x02
    1282:	89 83       	std	Y+1, r24	; 0x01
	return counter;
    1284:	89 81       	ldd	r24, Y+1	; 0x01
    1286:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1288:	0f 90       	pop	r0
    128a:	0f 90       	pop	r0
    128c:	cf 91       	pop	r28
    128e:	df 91       	pop	r29
    1290:	08 95       	ret

00001292 <Counter2>:

unit8 Counter2(){
    1292:	df 93       	push	r29
    1294:	cf 93       	push	r28
    1296:	0f 92       	push	r0
    1298:	cd b7       	in	r28, 0x3d	; 61
    129a:	de b7       	in	r29, 0x3e	; 62
	unit8 counter = TCNT2;
    129c:	e4 e4       	ldi	r30, 0x44	; 68
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	80 81       	ld	r24, Z
    12a2:	89 83       	std	Y+1, r24	; 0x01
	return counter;
    12a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    12a6:	0f 90       	pop	r0
    12a8:	cf 91       	pop	r28
    12aa:	df 91       	pop	r29
    12ac:	08 95       	ret

000012ae <SetCallBackTimer0OVF>:

// Interrupt Call Back function Section
void SetCallBackTimer0OVF(void (*ptr)())
{
    12ae:	df 93       	push	r29
    12b0:	cf 93       	push	r28
    12b2:	00 d0       	rcall	.+0      	; 0x12b4 <SetCallBackTimer0OVF+0x6>
    12b4:	cd b7       	in	r28, 0x3d	; 61
    12b6:	de b7       	in	r29, 0x3e	; 62
    12b8:	9a 83       	std	Y+2, r25	; 0x02
    12ba:	89 83       	std	Y+1, r24	; 0x01
	ptr2fun0OVF = ptr;
    12bc:	89 81       	ldd	r24, Y+1	; 0x01
    12be:	9a 81       	ldd	r25, Y+2	; 0x02
    12c0:	90 93 79 00 	sts	0x0079, r25
    12c4:	80 93 78 00 	sts	0x0078, r24
}
    12c8:	0f 90       	pop	r0
    12ca:	0f 90       	pop	r0
    12cc:	cf 91       	pop	r28
    12ce:	df 91       	pop	r29
    12d0:	08 95       	ret

000012d2 <SetCallBackTimer0CMP>:

void SetCallBackTimer0CMP(void (*ptr)())
{
    12d2:	df 93       	push	r29
    12d4:	cf 93       	push	r28
    12d6:	00 d0       	rcall	.+0      	; 0x12d8 <SetCallBackTimer0CMP+0x6>
    12d8:	cd b7       	in	r28, 0x3d	; 61
    12da:	de b7       	in	r29, 0x3e	; 62
    12dc:	9a 83       	std	Y+2, r25	; 0x02
    12de:	89 83       	std	Y+1, r24	; 0x01
	ptr2fun0CMP = ptr;
    12e0:	89 81       	ldd	r24, Y+1	; 0x01
    12e2:	9a 81       	ldd	r25, Y+2	; 0x02
    12e4:	90 93 7b 00 	sts	0x007B, r25
    12e8:	80 93 7a 00 	sts	0x007A, r24
}
    12ec:	0f 90       	pop	r0
    12ee:	0f 90       	pop	r0
    12f0:	cf 91       	pop	r28
    12f2:	df 91       	pop	r29
    12f4:	08 95       	ret

000012f6 <SetCallBackTimer1OVF>:

void SetCallBackTimer1OVF(void (*ptr)()){
    12f6:	df 93       	push	r29
    12f8:	cf 93       	push	r28
    12fa:	00 d0       	rcall	.+0      	; 0x12fc <SetCallBackTimer1OVF+0x6>
    12fc:	cd b7       	in	r28, 0x3d	; 61
    12fe:	de b7       	in	r29, 0x3e	; 62
    1300:	9a 83       	std	Y+2, r25	; 0x02
    1302:	89 83       	std	Y+1, r24	; 0x01
	ptr2fun1OVF = ptr;
    1304:	89 81       	ldd	r24, Y+1	; 0x01
    1306:	9a 81       	ldd	r25, Y+2	; 0x02
    1308:	90 93 7d 00 	sts	0x007D, r25
    130c:	80 93 7c 00 	sts	0x007C, r24

}
    1310:	0f 90       	pop	r0
    1312:	0f 90       	pop	r0
    1314:	cf 91       	pop	r28
    1316:	df 91       	pop	r29
    1318:	08 95       	ret

0000131a <SetCallBackTimer1COMPA>:

void SetCallBackTimer1COMPA(void (*ptr)()){
    131a:	df 93       	push	r29
    131c:	cf 93       	push	r28
    131e:	00 d0       	rcall	.+0      	; 0x1320 <SetCallBackTimer1COMPA+0x6>
    1320:	cd b7       	in	r28, 0x3d	; 61
    1322:	de b7       	in	r29, 0x3e	; 62
    1324:	9a 83       	std	Y+2, r25	; 0x02
    1326:	89 83       	std	Y+1, r24	; 0x01
	ptr2fun1CMPA = ptr;
    1328:	89 81       	ldd	r24, Y+1	; 0x01
    132a:	9a 81       	ldd	r25, Y+2	; 0x02
    132c:	90 93 7f 00 	sts	0x007F, r25
    1330:	80 93 7e 00 	sts	0x007E, r24
}
    1334:	0f 90       	pop	r0
    1336:	0f 90       	pop	r0
    1338:	cf 91       	pop	r28
    133a:	df 91       	pop	r29
    133c:	08 95       	ret

0000133e <SetCallBackTimer1COMPB>:

void SetCallBackTimer1COMPB(void (*ptr)()){
    133e:	df 93       	push	r29
    1340:	cf 93       	push	r28
    1342:	00 d0       	rcall	.+0      	; 0x1344 <SetCallBackTimer1COMPB+0x6>
    1344:	cd b7       	in	r28, 0x3d	; 61
    1346:	de b7       	in	r29, 0x3e	; 62
    1348:	9a 83       	std	Y+2, r25	; 0x02
    134a:	89 83       	std	Y+1, r24	; 0x01
	ptr2fun1CMPA = ptr;
    134c:	89 81       	ldd	r24, Y+1	; 0x01
    134e:	9a 81       	ldd	r25, Y+2	; 0x02
    1350:	90 93 7f 00 	sts	0x007F, r25
    1354:	80 93 7e 00 	sts	0x007E, r24
}
    1358:	0f 90       	pop	r0
    135a:	0f 90       	pop	r0
    135c:	cf 91       	pop	r28
    135e:	df 91       	pop	r29
    1360:	08 95       	ret

00001362 <SetCallBackTimer2OVF>:

void SetCallBackTimer2OVF(void (*ptr)())
{
    1362:	df 93       	push	r29
    1364:	cf 93       	push	r28
    1366:	00 d0       	rcall	.+0      	; 0x1368 <SetCallBackTimer2OVF+0x6>
    1368:	cd b7       	in	r28, 0x3d	; 61
    136a:	de b7       	in	r29, 0x3e	; 62
    136c:	9a 83       	std	Y+2, r25	; 0x02
    136e:	89 83       	std	Y+1, r24	; 0x01
	ptr2fun2OVF = ptr;
    1370:	89 81       	ldd	r24, Y+1	; 0x01
    1372:	9a 81       	ldd	r25, Y+2	; 0x02
    1374:	90 93 83 00 	sts	0x0083, r25
    1378:	80 93 82 00 	sts	0x0082, r24
}
    137c:	0f 90       	pop	r0
    137e:	0f 90       	pop	r0
    1380:	cf 91       	pop	r28
    1382:	df 91       	pop	r29
    1384:	08 95       	ret

00001386 <SetCallBackTimer2CMP>:

void SetCallBackTimer2CMP(void (*ptr)())
{
    1386:	df 93       	push	r29
    1388:	cf 93       	push	r28
    138a:	00 d0       	rcall	.+0      	; 0x138c <SetCallBackTimer2CMP+0x6>
    138c:	cd b7       	in	r28, 0x3d	; 61
    138e:	de b7       	in	r29, 0x3e	; 62
    1390:	9a 83       	std	Y+2, r25	; 0x02
    1392:	89 83       	std	Y+1, r24	; 0x01
	ptr2fun2CMP = ptr;
    1394:	89 81       	ldd	r24, Y+1	; 0x01
    1396:	9a 81       	ldd	r25, Y+2	; 0x02
    1398:	90 93 85 00 	sts	0x0085, r25
    139c:	80 93 84 00 	sts	0x0084, r24
}
    13a0:	0f 90       	pop	r0
    13a2:	0f 90       	pop	r0
    13a4:	cf 91       	pop	r28
    13a6:	df 91       	pop	r29
    13a8:	08 95       	ret

000013aa <__vector_11>:

// ISR Setting Section
ISR(TIMER0_OVF_vect)
{
    13aa:	1f 92       	push	r1
    13ac:	0f 92       	push	r0
    13ae:	0f b6       	in	r0, 0x3f	; 63
    13b0:	0f 92       	push	r0
    13b2:	11 24       	eor	r1, r1
    13b4:	2f 93       	push	r18
    13b6:	3f 93       	push	r19
    13b8:	4f 93       	push	r20
    13ba:	5f 93       	push	r21
    13bc:	6f 93       	push	r22
    13be:	7f 93       	push	r23
    13c0:	8f 93       	push	r24
    13c2:	9f 93       	push	r25
    13c4:	af 93       	push	r26
    13c6:	bf 93       	push	r27
    13c8:	ef 93       	push	r30
    13ca:	ff 93       	push	r31
    13cc:	df 93       	push	r29
    13ce:	cf 93       	push	r28
    13d0:	cd b7       	in	r28, 0x3d	; 61
    13d2:	de b7       	in	r29, 0x3e	; 62
	if(ptr2fun0OVF != 0) ptr2fun0OVF();
    13d4:	80 91 78 00 	lds	r24, 0x0078
    13d8:	90 91 79 00 	lds	r25, 0x0079
    13dc:	00 97       	sbiw	r24, 0x00	; 0
    13de:	29 f0       	breq	.+10     	; 0x13ea <__vector_11+0x40>
    13e0:	e0 91 78 00 	lds	r30, 0x0078
    13e4:	f0 91 79 00 	lds	r31, 0x0079
    13e8:	09 95       	icall
}
    13ea:	cf 91       	pop	r28
    13ec:	df 91       	pop	r29
    13ee:	ff 91       	pop	r31
    13f0:	ef 91       	pop	r30
    13f2:	bf 91       	pop	r27
    13f4:	af 91       	pop	r26
    13f6:	9f 91       	pop	r25
    13f8:	8f 91       	pop	r24
    13fa:	7f 91       	pop	r23
    13fc:	6f 91       	pop	r22
    13fe:	5f 91       	pop	r21
    1400:	4f 91       	pop	r20
    1402:	3f 91       	pop	r19
    1404:	2f 91       	pop	r18
    1406:	0f 90       	pop	r0
    1408:	0f be       	out	0x3f, r0	; 63
    140a:	0f 90       	pop	r0
    140c:	1f 90       	pop	r1
    140e:	18 95       	reti

00001410 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
    1410:	1f 92       	push	r1
    1412:	0f 92       	push	r0
    1414:	0f b6       	in	r0, 0x3f	; 63
    1416:	0f 92       	push	r0
    1418:	11 24       	eor	r1, r1
    141a:	2f 93       	push	r18
    141c:	3f 93       	push	r19
    141e:	4f 93       	push	r20
    1420:	5f 93       	push	r21
    1422:	6f 93       	push	r22
    1424:	7f 93       	push	r23
    1426:	8f 93       	push	r24
    1428:	9f 93       	push	r25
    142a:	af 93       	push	r26
    142c:	bf 93       	push	r27
    142e:	ef 93       	push	r30
    1430:	ff 93       	push	r31
    1432:	df 93       	push	r29
    1434:	cf 93       	push	r28
    1436:	cd b7       	in	r28, 0x3d	; 61
    1438:	de b7       	in	r29, 0x3e	; 62
	if(ptr2fun0CMP != 0) ptr2fun0CMP();
    143a:	80 91 7a 00 	lds	r24, 0x007A
    143e:	90 91 7b 00 	lds	r25, 0x007B
    1442:	00 97       	sbiw	r24, 0x00	; 0
    1444:	29 f0       	breq	.+10     	; 0x1450 <__vector_10+0x40>
    1446:	e0 91 7a 00 	lds	r30, 0x007A
    144a:	f0 91 7b 00 	lds	r31, 0x007B
    144e:	09 95       	icall
}
    1450:	cf 91       	pop	r28
    1452:	df 91       	pop	r29
    1454:	ff 91       	pop	r31
    1456:	ef 91       	pop	r30
    1458:	bf 91       	pop	r27
    145a:	af 91       	pop	r26
    145c:	9f 91       	pop	r25
    145e:	8f 91       	pop	r24
    1460:	7f 91       	pop	r23
    1462:	6f 91       	pop	r22
    1464:	5f 91       	pop	r21
    1466:	4f 91       	pop	r20
    1468:	3f 91       	pop	r19
    146a:	2f 91       	pop	r18
    146c:	0f 90       	pop	r0
    146e:	0f be       	out	0x3f, r0	; 63
    1470:	0f 90       	pop	r0
    1472:	1f 90       	pop	r1
    1474:	18 95       	reti

00001476 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
    1476:	1f 92       	push	r1
    1478:	0f 92       	push	r0
    147a:	0f b6       	in	r0, 0x3f	; 63
    147c:	0f 92       	push	r0
    147e:	11 24       	eor	r1, r1
    1480:	2f 93       	push	r18
    1482:	3f 93       	push	r19
    1484:	4f 93       	push	r20
    1486:	5f 93       	push	r21
    1488:	6f 93       	push	r22
    148a:	7f 93       	push	r23
    148c:	8f 93       	push	r24
    148e:	9f 93       	push	r25
    1490:	af 93       	push	r26
    1492:	bf 93       	push	r27
    1494:	ef 93       	push	r30
    1496:	ff 93       	push	r31
    1498:	df 93       	push	r29
    149a:	cf 93       	push	r28
    149c:	cd b7       	in	r28, 0x3d	; 61
    149e:	de b7       	in	r29, 0x3e	; 62
	if(ptr2fun1OVF != 0) ptr2fun1OVF();
    14a0:	80 91 7c 00 	lds	r24, 0x007C
    14a4:	90 91 7d 00 	lds	r25, 0x007D
    14a8:	00 97       	sbiw	r24, 0x00	; 0
    14aa:	29 f0       	breq	.+10     	; 0x14b6 <__vector_9+0x40>
    14ac:	e0 91 7c 00 	lds	r30, 0x007C
    14b0:	f0 91 7d 00 	lds	r31, 0x007D
    14b4:	09 95       	icall
}
    14b6:	cf 91       	pop	r28
    14b8:	df 91       	pop	r29
    14ba:	ff 91       	pop	r31
    14bc:	ef 91       	pop	r30
    14be:	bf 91       	pop	r27
    14c0:	af 91       	pop	r26
    14c2:	9f 91       	pop	r25
    14c4:	8f 91       	pop	r24
    14c6:	7f 91       	pop	r23
    14c8:	6f 91       	pop	r22
    14ca:	5f 91       	pop	r21
    14cc:	4f 91       	pop	r20
    14ce:	3f 91       	pop	r19
    14d0:	2f 91       	pop	r18
    14d2:	0f 90       	pop	r0
    14d4:	0f be       	out	0x3f, r0	; 63
    14d6:	0f 90       	pop	r0
    14d8:	1f 90       	pop	r1
    14da:	18 95       	reti

000014dc <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    14dc:	1f 92       	push	r1
    14de:	0f 92       	push	r0
    14e0:	0f b6       	in	r0, 0x3f	; 63
    14e2:	0f 92       	push	r0
    14e4:	11 24       	eor	r1, r1
    14e6:	2f 93       	push	r18
    14e8:	3f 93       	push	r19
    14ea:	4f 93       	push	r20
    14ec:	5f 93       	push	r21
    14ee:	6f 93       	push	r22
    14f0:	7f 93       	push	r23
    14f2:	8f 93       	push	r24
    14f4:	9f 93       	push	r25
    14f6:	af 93       	push	r26
    14f8:	bf 93       	push	r27
    14fa:	ef 93       	push	r30
    14fc:	ff 93       	push	r31
    14fe:	df 93       	push	r29
    1500:	cf 93       	push	r28
    1502:	cd b7       	in	r28, 0x3d	; 61
    1504:	de b7       	in	r29, 0x3e	; 62
	if(ptr2fun1CMPA != 0) ptr2fun1CMPA();
    1506:	80 91 7e 00 	lds	r24, 0x007E
    150a:	90 91 7f 00 	lds	r25, 0x007F
    150e:	00 97       	sbiw	r24, 0x00	; 0
    1510:	29 f0       	breq	.+10     	; 0x151c <__vector_7+0x40>
    1512:	e0 91 7e 00 	lds	r30, 0x007E
    1516:	f0 91 7f 00 	lds	r31, 0x007F
    151a:	09 95       	icall
}
    151c:	cf 91       	pop	r28
    151e:	df 91       	pop	r29
    1520:	ff 91       	pop	r31
    1522:	ef 91       	pop	r30
    1524:	bf 91       	pop	r27
    1526:	af 91       	pop	r26
    1528:	9f 91       	pop	r25
    152a:	8f 91       	pop	r24
    152c:	7f 91       	pop	r23
    152e:	6f 91       	pop	r22
    1530:	5f 91       	pop	r21
    1532:	4f 91       	pop	r20
    1534:	3f 91       	pop	r19
    1536:	2f 91       	pop	r18
    1538:	0f 90       	pop	r0
    153a:	0f be       	out	0x3f, r0	; 63
    153c:	0f 90       	pop	r0
    153e:	1f 90       	pop	r1
    1540:	18 95       	reti

00001542 <__vector_8>:

ISR(TIMER1_COMPB_vect)
{
    1542:	1f 92       	push	r1
    1544:	0f 92       	push	r0
    1546:	0f b6       	in	r0, 0x3f	; 63
    1548:	0f 92       	push	r0
    154a:	11 24       	eor	r1, r1
    154c:	2f 93       	push	r18
    154e:	3f 93       	push	r19
    1550:	4f 93       	push	r20
    1552:	5f 93       	push	r21
    1554:	6f 93       	push	r22
    1556:	7f 93       	push	r23
    1558:	8f 93       	push	r24
    155a:	9f 93       	push	r25
    155c:	af 93       	push	r26
    155e:	bf 93       	push	r27
    1560:	ef 93       	push	r30
    1562:	ff 93       	push	r31
    1564:	df 93       	push	r29
    1566:	cf 93       	push	r28
    1568:	cd b7       	in	r28, 0x3d	; 61
    156a:	de b7       	in	r29, 0x3e	; 62
	if(ptr2fun1CMPB != 0) ptr2fun1CMPB();
    156c:	80 91 80 00 	lds	r24, 0x0080
    1570:	90 91 81 00 	lds	r25, 0x0081
    1574:	00 97       	sbiw	r24, 0x00	; 0
    1576:	29 f0       	breq	.+10     	; 0x1582 <__vector_8+0x40>
    1578:	e0 91 80 00 	lds	r30, 0x0080
    157c:	f0 91 81 00 	lds	r31, 0x0081
    1580:	09 95       	icall
}
    1582:	cf 91       	pop	r28
    1584:	df 91       	pop	r29
    1586:	ff 91       	pop	r31
    1588:	ef 91       	pop	r30
    158a:	bf 91       	pop	r27
    158c:	af 91       	pop	r26
    158e:	9f 91       	pop	r25
    1590:	8f 91       	pop	r24
    1592:	7f 91       	pop	r23
    1594:	6f 91       	pop	r22
    1596:	5f 91       	pop	r21
    1598:	4f 91       	pop	r20
    159a:	3f 91       	pop	r19
    159c:	2f 91       	pop	r18
    159e:	0f 90       	pop	r0
    15a0:	0f be       	out	0x3f, r0	; 63
    15a2:	0f 90       	pop	r0
    15a4:	1f 90       	pop	r1
    15a6:	18 95       	reti

000015a8 <__vector_5>:

ISR(TIMER2_OVF_vect)
{
    15a8:	1f 92       	push	r1
    15aa:	0f 92       	push	r0
    15ac:	0f b6       	in	r0, 0x3f	; 63
    15ae:	0f 92       	push	r0
    15b0:	11 24       	eor	r1, r1
    15b2:	2f 93       	push	r18
    15b4:	3f 93       	push	r19
    15b6:	4f 93       	push	r20
    15b8:	5f 93       	push	r21
    15ba:	6f 93       	push	r22
    15bc:	7f 93       	push	r23
    15be:	8f 93       	push	r24
    15c0:	9f 93       	push	r25
    15c2:	af 93       	push	r26
    15c4:	bf 93       	push	r27
    15c6:	ef 93       	push	r30
    15c8:	ff 93       	push	r31
    15ca:	df 93       	push	r29
    15cc:	cf 93       	push	r28
    15ce:	cd b7       	in	r28, 0x3d	; 61
    15d0:	de b7       	in	r29, 0x3e	; 62
	if(ptr2fun2OVF != 0) ptr2fun2OVF();
    15d2:	80 91 82 00 	lds	r24, 0x0082
    15d6:	90 91 83 00 	lds	r25, 0x0083
    15da:	00 97       	sbiw	r24, 0x00	; 0
    15dc:	29 f0       	breq	.+10     	; 0x15e8 <__vector_5+0x40>
    15de:	e0 91 82 00 	lds	r30, 0x0082
    15e2:	f0 91 83 00 	lds	r31, 0x0083
    15e6:	09 95       	icall
}
    15e8:	cf 91       	pop	r28
    15ea:	df 91       	pop	r29
    15ec:	ff 91       	pop	r31
    15ee:	ef 91       	pop	r30
    15f0:	bf 91       	pop	r27
    15f2:	af 91       	pop	r26
    15f4:	9f 91       	pop	r25
    15f6:	8f 91       	pop	r24
    15f8:	7f 91       	pop	r23
    15fa:	6f 91       	pop	r22
    15fc:	5f 91       	pop	r21
    15fe:	4f 91       	pop	r20
    1600:	3f 91       	pop	r19
    1602:	2f 91       	pop	r18
    1604:	0f 90       	pop	r0
    1606:	0f be       	out	0x3f, r0	; 63
    1608:	0f 90       	pop	r0
    160a:	1f 90       	pop	r1
    160c:	18 95       	reti

0000160e <__vector_4>:

ISR(TIMER2_COMP_vect)
{
    160e:	1f 92       	push	r1
    1610:	0f 92       	push	r0
    1612:	0f b6       	in	r0, 0x3f	; 63
    1614:	0f 92       	push	r0
    1616:	11 24       	eor	r1, r1
    1618:	2f 93       	push	r18
    161a:	3f 93       	push	r19
    161c:	4f 93       	push	r20
    161e:	5f 93       	push	r21
    1620:	6f 93       	push	r22
    1622:	7f 93       	push	r23
    1624:	8f 93       	push	r24
    1626:	9f 93       	push	r25
    1628:	af 93       	push	r26
    162a:	bf 93       	push	r27
    162c:	ef 93       	push	r30
    162e:	ff 93       	push	r31
    1630:	df 93       	push	r29
    1632:	cf 93       	push	r28
    1634:	cd b7       	in	r28, 0x3d	; 61
    1636:	de b7       	in	r29, 0x3e	; 62
	if(ptr2fun0CMP != 0) ptr2fun0CMP();
    1638:	80 91 7a 00 	lds	r24, 0x007A
    163c:	90 91 7b 00 	lds	r25, 0x007B
    1640:	00 97       	sbiw	r24, 0x00	; 0
    1642:	29 f0       	breq	.+10     	; 0x164e <__vector_4+0x40>
    1644:	e0 91 7a 00 	lds	r30, 0x007A
    1648:	f0 91 7b 00 	lds	r31, 0x007B
    164c:	09 95       	icall
}
    164e:	cf 91       	pop	r28
    1650:	df 91       	pop	r29
    1652:	ff 91       	pop	r31
    1654:	ef 91       	pop	r30
    1656:	bf 91       	pop	r27
    1658:	af 91       	pop	r26
    165a:	9f 91       	pop	r25
    165c:	8f 91       	pop	r24
    165e:	7f 91       	pop	r23
    1660:	6f 91       	pop	r22
    1662:	5f 91       	pop	r21
    1664:	4f 91       	pop	r20
    1666:	3f 91       	pop	r19
    1668:	2f 91       	pop	r18
    166a:	0f 90       	pop	r0
    166c:	0f be       	out	0x3f, r0	; 63
    166e:	0f 90       	pop	r0
    1670:	1f 90       	pop	r1
    1672:	18 95       	reti

00001674 <PWM_Write>:

// PWM function

unit8 PWM_Write(channel_type channel,unit8 PWM)
{
    1674:	df 93       	push	r29
    1676:	cf 93       	push	r28
    1678:	cd b7       	in	r28, 0x3d	; 61
    167a:	de b7       	in	r29, 0x3e	; 62
    167c:	29 97       	sbiw	r28, 0x09	; 9
    167e:	0f b6       	in	r0, 0x3f	; 63
    1680:	f8 94       	cli
    1682:	de bf       	out	0x3e, r29	; 62
    1684:	0f be       	out	0x3f, r0	; 63
    1686:	cd bf       	out	0x3d, r28	; 61
    1688:	8c 83       	std	Y+4, r24	; 0x04
    168a:	6d 83       	std	Y+5, r22	; 0x05
	DIO_Port Port = channel/8;
    168c:	8c 81       	ldd	r24, Y+4	; 0x04
    168e:	86 95       	lsr	r24
    1690:	86 95       	lsr	r24
    1692:	86 95       	lsr	r24
    1694:	8b 83       	std	Y+3, r24	; 0x03
	DIO_Pin Pin = channel%8;
    1696:	8c 81       	ldd	r24, Y+4	; 0x04
    1698:	87 70       	andi	r24, 0x07	; 7
    169a:	8a 83       	std	Y+2, r24	; 0x02
	unit8 x = 0;
    169c:	19 82       	std	Y+1, r1	; 0x01
	switch(Port)
    169e:	8b 81       	ldd	r24, Y+3	; 0x03
    16a0:	28 2f       	mov	r18, r24
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	39 87       	std	Y+9, r19	; 0x09
    16a6:	28 87       	std	Y+8, r18	; 0x08
    16a8:	88 85       	ldd	r24, Y+8	; 0x08
    16aa:	99 85       	ldd	r25, Y+9	; 0x09
    16ac:	81 30       	cpi	r24, 0x01	; 1
    16ae:	91 05       	cpc	r25, r1
    16b0:	31 f0       	breq	.+12     	; 0x16be <PWM_Write+0x4a>
    16b2:	28 85       	ldd	r18, Y+8	; 0x08
    16b4:	39 85       	ldd	r19, Y+9	; 0x09
    16b6:	23 30       	cpi	r18, 0x03	; 3
    16b8:	31 05       	cpc	r19, r1
    16ba:	31 f0       	breq	.+12     	; 0x16c8 <PWM_Write+0x54>
    16bc:	2d c0       	rjmp	.+90     	; 0x1718 <PWM_Write+0xa4>
	{
	case PORT_B:
		OCR0 = PWM;
    16be:	ec e5       	ldi	r30, 0x5C	; 92
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	8d 81       	ldd	r24, Y+5	; 0x05
    16c4:	80 83       	st	Z, r24
    16c6:	28 c0       	rjmp	.+80     	; 0x1718 <PWM_Write+0xa4>
		break;
	case PORT_D:

	switch(Pin)
    16c8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ca:	28 2f       	mov	r18, r24
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	3f 83       	std	Y+7, r19	; 0x07
    16d0:	2e 83       	std	Y+6, r18	; 0x06
    16d2:	8e 81       	ldd	r24, Y+6	; 0x06
    16d4:	9f 81       	ldd	r25, Y+7	; 0x07
    16d6:	85 30       	cpi	r24, 0x05	; 5
    16d8:	91 05       	cpc	r25, r1
    16da:	91 f0       	breq	.+36     	; 0x1700 <PWM_Write+0x8c>
    16dc:	2e 81       	ldd	r18, Y+6	; 0x06
    16de:	3f 81       	ldd	r19, Y+7	; 0x07
    16e0:	27 30       	cpi	r18, 0x07	; 7
    16e2:	31 05       	cpc	r19, r1
    16e4:	a9 f0       	breq	.+42     	; 0x1710 <PWM_Write+0x9c>
    16e6:	8e 81       	ldd	r24, Y+6	; 0x06
    16e8:	9f 81       	ldd	r25, Y+7	; 0x07
    16ea:	84 30       	cpi	r24, 0x04	; 4
    16ec:	91 05       	cpc	r25, r1
    16ee:	a1 f4       	brne	.+40     	; 0x1718 <PWM_Write+0xa4>
		{
			case PIN_4:
				OCR1A = PWM;
    16f0:	ea e4       	ldi	r30, 0x4A	; 74
    16f2:	f0 e0       	ldi	r31, 0x00	; 0
    16f4:	8d 81       	ldd	r24, Y+5	; 0x05
    16f6:	88 2f       	mov	r24, r24
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	91 83       	std	Z+1, r25	; 0x01
    16fc:	80 83       	st	Z, r24
    16fe:	0c c0       	rjmp	.+24     	; 0x1718 <PWM_Write+0xa4>
				break;
			case PIN_5:
				OCR1B = PWM;
    1700:	e8 e4       	ldi	r30, 0x48	; 72
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	8d 81       	ldd	r24, Y+5	; 0x05
    1706:	88 2f       	mov	r24, r24
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	91 83       	std	Z+1, r25	; 0x01
    170c:	80 83       	st	Z, r24
    170e:	04 c0       	rjmp	.+8      	; 0x1718 <PWM_Write+0xa4>
				break;
			case PIN_7:
				OCR2 = PWM;
    1710:	e3 e4       	ldi	r30, 0x43	; 67
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	8d 81       	ldd	r24, Y+5	; 0x05
    1716:	80 83       	st	Z, r24
		}
	break;
	default:
		break;
	}
	return x;
    1718:	89 81       	ldd	r24, Y+1	; 0x01
}
    171a:	29 96       	adiw	r28, 0x09	; 9
    171c:	0f b6       	in	r0, 0x3f	; 63
    171e:	f8 94       	cli
    1720:	de bf       	out	0x3e, r29	; 62
    1722:	0f be       	out	0x3f, r0	; 63
    1724:	cd bf       	out	0x3d, r28	; 61
    1726:	cf 91       	pop	r28
    1728:	df 91       	pop	r29
    172a:	08 95       	ret

0000172c <SPI_init>:

typedef enum{
	Master,
	Slave
}mode;
static void SPI_init(mode type){
    172c:	df 93       	push	r29
    172e:	cf 93       	push	r28
    1730:	00 d0       	rcall	.+0      	; 0x1732 <SPI_init+0x6>
    1732:	cd b7       	in	r28, 0x3d	; 61
    1734:	de b7       	in	r29, 0x3e	; 62
    1736:	8a 83       	std	Y+2, r24	; 0x02
	   // Configuring register SPCR
	   unit8 SPCR_temp = 0;
    1738:	19 82       	std	Y+1, r1	; 0x01
	   // Enable SPI Operation
	   SET_BIT(SPCR_temp,SPE);
    173a:	89 81       	ldd	r24, Y+1	; 0x01
    173c:	80 64       	ori	r24, 0x40	; 64
    173e:	89 83       	std	Y+1, r24	; 0x01
	   // Setting Interrupt
	#if   INT == DIS
	   CLR_BIT(SPCR_temp,SPIE);
    1740:	89 81       	ldd	r24, Y+1	; 0x01
    1742:	8f 77       	andi	r24, 0x7F	; 127
    1744:	89 83       	std	Y+1, r24	; 0x01
	#else
	   SET_BIT(SPCR_temp,SPIE);
	#endif
	   // Setting Data Direction
	#if DATA_ORD == MSB
	   CLR_BIT(SPCR_temp,DORD);
    1746:	89 81       	ldd	r24, Y+1	; 0x01
    1748:	8f 7d       	andi	r24, 0xDF	; 223
    174a:	89 83       	std	Y+1, r24	; 0x01
	#else
	   SET_BIT(SPCR_temp,DORD);
	#endif

	   // Selecting Master/Slave Mode
	   if(type == Master) SET_BIT(SPCR_temp,MSTR);
    174c:	8a 81       	ldd	r24, Y+2	; 0x02
    174e:	88 23       	and	r24, r24
    1750:	21 f4       	brne	.+8      	; 0x175a <SPI_init+0x2e>
    1752:	89 81       	ldd	r24, Y+1	; 0x01
    1754:	80 61       	ori	r24, 0x10	; 16
    1756:	89 83       	std	Y+1, r24	; 0x01
    1758:	03 c0       	rjmp	.+6      	; 0x1760 <SPI_init+0x34>
	   else               CLR_BIT(SPCR_temp,MSTR);
    175a:	89 81       	ldd	r24, Y+1	; 0x01
    175c:	8f 7e       	andi	r24, 0xEF	; 239
    175e:	89 83       	std	Y+1, r24	; 0x01

	  // Setting CLK Polarity
	#if CLK_POL == RIS_FAL
	   CLR_BIT(SPCR_temp,CPOL);
    1760:	89 81       	ldd	r24, Y+1	; 0x01
    1762:	87 7f       	andi	r24, 0xF7	; 247
    1764:	89 83       	std	Y+1, r24	; 0x01
	   SET_BIT(SPCR_temp,CPOL);
	#endif

	   // Selecting Phase at which sample is taken
	#if   SAMPLE == LEAD
	   CLR_BIT(SPCR_temp,CPHA);
    1766:	89 81       	ldd	r24, Y+1	; 0x01
    1768:	8b 7f       	andi	r24, 0xFB	; 251
    176a:	89 83       	std	Y+1, r24	; 0x01
	#endif

	   // Clock Speed Setting
	// Setting 4 Power
	#if   SPR_POWER == POWER_1
	   CLR_BIT(SPCR_temp,SPR0);
    176c:	89 81       	ldd	r24, Y+1	; 0x01
    176e:	8e 7f       	andi	r24, 0xFE	; 254
    1770:	89 83       	std	Y+1, r24	; 0x01
	   CLR_BIT(SPCR_temp,SPR1);
    1772:	89 81       	ldd	r24, Y+1	; 0x01
    1774:	8d 7f       	andi	r24, 0xFD	; 253
    1776:	89 83       	std	Y+1, r24	; 0x01
	   SET_BIT(SPCR_temp,SPR0);
	   SET_BIT(SPCR_temp,SPR1);
	#endif
	// Setting Double Speed
	#if X2_SPEED == DIS
	   CLR_BIT(SPSR,SPI2X);
    1778:	ae e2       	ldi	r26, 0x2E	; 46
    177a:	b0 e0       	ldi	r27, 0x00	; 0
    177c:	ee e2       	ldi	r30, 0x2E	; 46
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	80 81       	ld	r24, Z
    1782:	8e 7f       	andi	r24, 0xFE	; 254
    1784:	8c 93       	st	X, r24
	#else
	   SET_BIT(SPSR,SPI2X);
	#endif

	// Loading The Value SPCR_temp to Register
	   SPCR = SPCR_temp;
    1786:	ed e2       	ldi	r30, 0x2D	; 45
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	89 81       	ldd	r24, Y+1	; 0x01
    178c:	80 83       	st	Z, r24
}
    178e:	0f 90       	pop	r0
    1790:	0f 90       	pop	r0
    1792:	cf 91       	pop	r28
    1794:	df 91       	pop	r29
    1796:	08 95       	ret

00001798 <SPI_MasterInit>:

// ********************************************** Master Mode *******************************************

void SPI_MasterInit(void){
    1798:	df 93       	push	r29
    179a:	cf 93       	push	r28
    179c:	cd b7       	in	r28, 0x3d	; 61
    179e:	de b7       	in	r29, 0x3e	; 62
   // Configure Port Pins Master Mode
   CLR_BIT(DDRB,SS);
    17a0:	a7 e3       	ldi	r26, 0x37	; 55
    17a2:	b0 e0       	ldi	r27, 0x00	; 0
    17a4:	e7 e3       	ldi	r30, 0x37	; 55
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	80 81       	ld	r24, Z
    17aa:	8f 7e       	andi	r24, 0xEF	; 239
    17ac:	8c 93       	st	X, r24
   SET_BIT(DDRB,MOSI);
    17ae:	a7 e3       	ldi	r26, 0x37	; 55
    17b0:	b0 e0       	ldi	r27, 0x00	; 0
    17b2:	e7 e3       	ldi	r30, 0x37	; 55
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	80 81       	ld	r24, Z
    17b8:	80 62       	ori	r24, 0x20	; 32
    17ba:	8c 93       	st	X, r24
   CLR_BIT(DDRB,MISO);
    17bc:	a7 e3       	ldi	r26, 0x37	; 55
    17be:	b0 e0       	ldi	r27, 0x00	; 0
    17c0:	e7 e3       	ldi	r30, 0x37	; 55
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	80 81       	ld	r24, Z
    17c6:	8f 7b       	andi	r24, 0xBF	; 191
    17c8:	8c 93       	st	X, r24
   SET_BIT(DDRB,SCK);
    17ca:	a7 e3       	ldi	r26, 0x37	; 55
    17cc:	b0 e0       	ldi	r27, 0x00	; 0
    17ce:	e7 e3       	ldi	r30, 0x37	; 55
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	80 81       	ld	r24, Z
    17d4:	80 68       	ori	r24, 0x80	; 128
    17d6:	8c 93       	st	X, r24

   // Initializing according to configuration
   SPI_init(Master);
    17d8:	80 e0       	ldi	r24, 0x00	; 0
    17da:	0e 94 96 0b 	call	0x172c	; 0x172c <SPI_init>

}
    17de:	cf 91       	pop	r28
    17e0:	df 91       	pop	r29
    17e2:	08 95       	ret

000017e4 <SPI_MasterTransmit>:

void SPI_MasterTransmit(unit8 data){
    17e4:	df 93       	push	r29
    17e6:	cf 93       	push	r28
    17e8:	0f 92       	push	r0
    17ea:	cd b7       	in	r28, 0x3d	; 61
    17ec:	de b7       	in	r29, 0x3e	; 62
    17ee:	89 83       	std	Y+1, r24	; 0x01
	// Load SPDR with data
	SPDR = data;
    17f0:	ef e2       	ldi	r30, 0x2F	; 47
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	89 81       	ldd	r24, Y+1	; 0x01
    17f6:	80 83       	st	Z, r24

	// Wait till Transmission is finished
	while(GET_BIT(SPSR,SPIF) == 0);
    17f8:	ee e2       	ldi	r30, 0x2E	; 46
    17fa:	f0 e0       	ldi	r31, 0x00	; 0
    17fc:	80 81       	ld	r24, Z
    17fe:	88 23       	and	r24, r24
    1800:	dc f7       	brge	.-10     	; 0x17f8 <SPI_MasterTransmit+0x14>
}
    1802:	0f 90       	pop	r0
    1804:	cf 91       	pop	r28
    1806:	df 91       	pop	r29
    1808:	08 95       	ret

0000180a <SPI_MasterReceive>:

unit8 SPI_MasterReceive(void){
    180a:	df 93       	push	r29
    180c:	cf 93       	push	r28
    180e:	cd b7       	in	r28, 0x3d	; 61
    1810:	de b7       	in	r29, 0x3e	; 62
	// Transmitting Garbage data
	SPDR = 0xAF;
    1812:	ef e2       	ldi	r30, 0x2F	; 47
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	8f ea       	ldi	r24, 0xAF	; 175
    1818:	80 83       	st	Z, r24

	// Wait till Transmission is finished
	while(GET_BIT(SPSR,SPIF) == 0);
    181a:	ee e2       	ldi	r30, 0x2E	; 46
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	80 81       	ld	r24, Z
    1820:	88 23       	and	r24, r24
    1822:	dc f7       	brge	.-10     	; 0x181a <SPI_MasterReceive+0x10>

	return SPDR;
    1824:	ef e2       	ldi	r30, 0x2F	; 47
    1826:	f0 e0       	ldi	r31, 0x00	; 0
    1828:	80 81       	ld	r24, Z
}
    182a:	cf 91       	pop	r28
    182c:	df 91       	pop	r29
    182e:	08 95       	ret

00001830 <SPI_SlaveInit>:

// *********************************************** Slave Mode ********************************************

// ********************************************* Slave Mode *********************************************
void SPI_SlaveInit(void){
    1830:	df 93       	push	r29
    1832:	cf 93       	push	r28
    1834:	cd b7       	in	r28, 0x3d	; 61
    1836:	de b7       	in	r29, 0x3e	; 62
   // Configure Port Pins Master Mode
   CLR_BIT(DDRB,SS);
    1838:	a7 e3       	ldi	r26, 0x37	; 55
    183a:	b0 e0       	ldi	r27, 0x00	; 0
    183c:	e7 e3       	ldi	r30, 0x37	; 55
    183e:	f0 e0       	ldi	r31, 0x00	; 0
    1840:	80 81       	ld	r24, Z
    1842:	8f 7e       	andi	r24, 0xEF	; 239
    1844:	8c 93       	st	X, r24
   CLR_BIT(DDRB,MOSI);
    1846:	a7 e3       	ldi	r26, 0x37	; 55
    1848:	b0 e0       	ldi	r27, 0x00	; 0
    184a:	e7 e3       	ldi	r30, 0x37	; 55
    184c:	f0 e0       	ldi	r31, 0x00	; 0
    184e:	80 81       	ld	r24, Z
    1850:	8f 7d       	andi	r24, 0xDF	; 223
    1852:	8c 93       	st	X, r24
   SET_BIT(DDRB,MISO);
    1854:	a7 e3       	ldi	r26, 0x37	; 55
    1856:	b0 e0       	ldi	r27, 0x00	; 0
    1858:	e7 e3       	ldi	r30, 0x37	; 55
    185a:	f0 e0       	ldi	r31, 0x00	; 0
    185c:	80 81       	ld	r24, Z
    185e:	80 64       	ori	r24, 0x40	; 64
    1860:	8c 93       	st	X, r24
   CLR_BIT(DDRB,SCK);
    1862:	a7 e3       	ldi	r26, 0x37	; 55
    1864:	b0 e0       	ldi	r27, 0x00	; 0
    1866:	e7 e3       	ldi	r30, 0x37	; 55
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	80 81       	ld	r24, Z
    186c:	8f 77       	andi	r24, 0x7F	; 127
    186e:	8c 93       	st	X, r24

   // Initializing according to configuration
   SPI_init(Slave);
    1870:	81 e0       	ldi	r24, 0x01	; 1
    1872:	0e 94 96 0b 	call	0x172c	; 0x172c <SPI_init>

}
    1876:	cf 91       	pop	r28
    1878:	df 91       	pop	r29
    187a:	08 95       	ret

0000187c <SPI_SlaveReceive>:


unit8 SPI_SlaveReceive(void){
    187c:	df 93       	push	r29
    187e:	cf 93       	push	r28
    1880:	cd b7       	in	r28, 0x3d	; 61
    1882:	de b7       	in	r29, 0x3e	; 62
	// Wait till Transmission is finished
	while(GET_BIT(SPSR,SPIF) == 0);
    1884:	ee e2       	ldi	r30, 0x2E	; 46
    1886:	f0 e0       	ldi	r31, 0x00	; 0
    1888:	80 81       	ld	r24, Z
    188a:	88 23       	and	r24, r24
    188c:	dc f7       	brge	.-10     	; 0x1884 <SPI_SlaveReceive+0x8>

	// Return Data
	return SPDR;
    188e:	ef e2       	ldi	r30, 0x2F	; 47
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	80 81       	ld	r24, Z
}
    1894:	cf 91       	pop	r28
    1896:	df 91       	pop	r29
    1898:	08 95       	ret

0000189a <SPI_SlaveTransmit>:

void SPI_SlaveTransmit(unit8 data){
    189a:	df 93       	push	r29
    189c:	cf 93       	push	r28
    189e:	0f 92       	push	r0
    18a0:	cd b7       	in	r28, 0x3d	; 61
    18a2:	de b7       	in	r29, 0x3e	; 62
    18a4:	89 83       	std	Y+1, r24	; 0x01
	// Load SPDR with data
	SPDR = data;
    18a6:	ef e2       	ldi	r30, 0x2F	; 47
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	89 81       	ldd	r24, Y+1	; 0x01
    18ac:	80 83       	st	Z, r24

	// Wait till Transmission is finished
	while(GET_BIT(SPSR,SPIF) == 0);
    18ae:	ee e2       	ldi	r30, 0x2E	; 46
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	80 81       	ld	r24, Z
    18b4:	88 23       	and	r24, r24
    18b6:	dc f7       	brge	.-10     	; 0x18ae <SPI_SlaveTransmit+0x14>
}
    18b8:	0f 90       	pop	r0
    18ba:	cf 91       	pop	r28
    18bc:	df 91       	pop	r29
    18be:	08 95       	ret

000018c0 <Interrupt_Enable>:
static void (*p2fun_INT0)() = 0 ;
static void (*p2fun_INT1)() = 0 ;
static void (*p2fun_INT2)() = 0 ;

void Interrupt_Enable()
{
    18c0:	df 93       	push	r29
    18c2:	cf 93       	push	r28
    18c4:	cd b7       	in	r28, 0x3d	; 61
    18c6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
    18c8:	af e5       	ldi	r26, 0x5F	; 95
    18ca:	b0 e0       	ldi	r27, 0x00	; 0
    18cc:	ef e5       	ldi	r30, 0x5F	; 95
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	80 81       	ld	r24, Z
    18d2:	80 68       	ori	r24, 0x80	; 128
    18d4:	8c 93       	st	X, r24
     #if INT_0 == ENABLE
	    SET_BIT(GICR,INT0);
    18d6:	ab e5       	ldi	r26, 0x5B	; 91
    18d8:	b0 e0       	ldi	r27, 0x00	; 0
    18da:	eb e5       	ldi	r30, 0x5B	; 91
    18dc:	f0 e0       	ldi	r31, 0x00	; 0
    18de:	80 81       	ld	r24, Z
    18e0:	80 64       	ori	r24, 0x40	; 64
    18e2:	8c 93       	st	X, r24
	      CLR_BIT(MCUCR,ISC01);
       #elif INT0_CONTROL == FALL_EDGE
	      CLR_BIT(MCUCR,ISC00);
	      SET_BIT(MCUCR,ISC01);
       #elif INT0_CONTROL == RISE_EDGE
          SET_BIT(MCUCR,ISC00);
    18e4:	a5 e5       	ldi	r26, 0x55	; 85
    18e6:	b0 e0       	ldi	r27, 0x00	; 0
    18e8:	e5 e5       	ldi	r30, 0x55	; 85
    18ea:	f0 e0       	ldi	r31, 0x00	; 0
    18ec:	80 81       	ld	r24, Z
    18ee:	81 60       	ori	r24, 0x01	; 1
    18f0:	8c 93       	st	X, r24
	      SET_BIT(MCUCR,ISC01);
    18f2:	a5 e5       	ldi	r26, 0x55	; 85
    18f4:	b0 e0       	ldi	r27, 0x00	; 0
    18f6:	e5 e5       	ldi	r30, 0x55	; 85
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	80 81       	ld	r24, Z
    18fc:	82 60       	ori	r24, 0x02	; 2
    18fe:	8c 93       	st	X, r24
      #else
	      CLR_BIT(GICR,INT0);
     #endif

       #if INT_1 == ENABLE
         SET_BIT(GICR,INT1);
    1900:	ab e5       	ldi	r26, 0x5B	; 91
    1902:	b0 e0       	ldi	r27, 0x00	; 0
    1904:	eb e5       	ldi	r30, 0x5B	; 91
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	80 81       	ld	r24, Z
    190a:	80 68       	ori	r24, 0x80	; 128
    190c:	8c 93       	st	X, r24
            CLR_BIT(MCUCR,ISC11);
        #elif INT1_CONTROL == FALL_EDGE
            CLR_BIT(MCUCR,ISC10);
            SET_BIT(MCUCR,ISC11);
        #elif INT1_CONTROL == RISE_EDGE
            SET_BIT(MCUCR,ISC10);
    190e:	a5 e5       	ldi	r26, 0x55	; 85
    1910:	b0 e0       	ldi	r27, 0x00	; 0
    1912:	e5 e5       	ldi	r30, 0x55	; 85
    1914:	f0 e0       	ldi	r31, 0x00	; 0
    1916:	80 81       	ld	r24, Z
    1918:	84 60       	ori	r24, 0x04	; 4
    191a:	8c 93       	st	X, r24
            SET_BIT(MCUCR,ISC11);
    191c:	a5 e5       	ldi	r26, 0x55	; 85
    191e:	b0 e0       	ldi	r27, 0x00	; 0
    1920:	e5 e5       	ldi	r30, 0x55	; 85
    1922:	f0 e0       	ldi	r31, 0x00	; 0
    1924:	80 81       	ld	r24, Z
    1926:	88 60       	ori	r24, 0x08	; 8
    1928:	8c 93       	st	X, r24
       #else
           CLR_BIT(GICR,INT1);
     #endif

       #if INT_2 == ENABLE
          SET_BIT(GICR,INT2);
    192a:	ab e5       	ldi	r26, 0x5B	; 91
    192c:	b0 e0       	ldi	r27, 0x00	; 0
    192e:	eb e5       	ldi	r30, 0x5B	; 91
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	80 81       	ld	r24, Z
    1934:	80 62       	ori	r24, 0x20	; 32
    1936:	8c 93       	st	X, r24
        #if INT2_CONTROL == FALL_EDGE_INT2
           CLR_BIT(MCUCSR,ISC2);
        #elif INT2_CONTROL == RISE_EDGE_INT2
           SET_BIT(MCUCSR,ISC2);
    1938:	a4 e5       	ldi	r26, 0x54	; 84
    193a:	b0 e0       	ldi	r27, 0x00	; 0
    193c:	e4 e5       	ldi	r30, 0x54	; 84
    193e:	f0 e0       	ldi	r31, 0x00	; 0
    1940:	80 81       	ld	r24, Z
    1942:	80 64       	ori	r24, 0x40	; 64
    1944:	8c 93       	st	X, r24
       #else
           CLR_BIT(GICR,INT2);
       #endif


}
    1946:	cf 91       	pop	r28
    1948:	df 91       	pop	r29
    194a:	08 95       	ret

0000194c <SetCallbackFunction_INT0>:

void SetCallbackFunction_INT0(void (*fun)()){
    194c:	df 93       	push	r29
    194e:	cf 93       	push	r28
    1950:	00 d0       	rcall	.+0      	; 0x1952 <SetCallbackFunction_INT0+0x6>
    1952:	cd b7       	in	r28, 0x3d	; 61
    1954:	de b7       	in	r29, 0x3e	; 62
    1956:	9a 83       	std	Y+2, r25	; 0x02
    1958:	89 83       	std	Y+1, r24	; 0x01
	p2fun_INT0 = fun;
    195a:	89 81       	ldd	r24, Y+1	; 0x01
    195c:	9a 81       	ldd	r25, Y+2	; 0x02
    195e:	90 93 87 00 	sts	0x0087, r25
    1962:	80 93 86 00 	sts	0x0086, r24
}
    1966:	0f 90       	pop	r0
    1968:	0f 90       	pop	r0
    196a:	cf 91       	pop	r28
    196c:	df 91       	pop	r29
    196e:	08 95       	ret

00001970 <SetCallbackFunction_INT1>:

void SetCallbackFunction_INT1(void (*fun)()){
    1970:	df 93       	push	r29
    1972:	cf 93       	push	r28
    1974:	00 d0       	rcall	.+0      	; 0x1976 <SetCallbackFunction_INT1+0x6>
    1976:	cd b7       	in	r28, 0x3d	; 61
    1978:	de b7       	in	r29, 0x3e	; 62
    197a:	9a 83       	std	Y+2, r25	; 0x02
    197c:	89 83       	std	Y+1, r24	; 0x01
	p2fun_INT1 = fun;
    197e:	89 81       	ldd	r24, Y+1	; 0x01
    1980:	9a 81       	ldd	r25, Y+2	; 0x02
    1982:	90 93 89 00 	sts	0x0089, r25
    1986:	80 93 88 00 	sts	0x0088, r24
}
    198a:	0f 90       	pop	r0
    198c:	0f 90       	pop	r0
    198e:	cf 91       	pop	r28
    1990:	df 91       	pop	r29
    1992:	08 95       	ret

00001994 <SetCallbackFunction_INT2>:

void SetCallbackFunction_INT2(void (*fun)()){
    1994:	df 93       	push	r29
    1996:	cf 93       	push	r28
    1998:	00 d0       	rcall	.+0      	; 0x199a <SetCallbackFunction_INT2+0x6>
    199a:	cd b7       	in	r28, 0x3d	; 61
    199c:	de b7       	in	r29, 0x3e	; 62
    199e:	9a 83       	std	Y+2, r25	; 0x02
    19a0:	89 83       	std	Y+1, r24	; 0x01
	p2fun_INT2 = fun;
    19a2:	89 81       	ldd	r24, Y+1	; 0x01
    19a4:	9a 81       	ldd	r25, Y+2	; 0x02
    19a6:	90 93 8b 00 	sts	0x008B, r25
    19aa:	80 93 8a 00 	sts	0x008A, r24
}
    19ae:	0f 90       	pop	r0
    19b0:	0f 90       	pop	r0
    19b2:	cf 91       	pop	r28
    19b4:	df 91       	pop	r29
    19b6:	08 95       	ret

000019b8 <__vector_1>:

ISR(INT0_vect)
{
    19b8:	1f 92       	push	r1
    19ba:	0f 92       	push	r0
    19bc:	0f b6       	in	r0, 0x3f	; 63
    19be:	0f 92       	push	r0
    19c0:	11 24       	eor	r1, r1
    19c2:	2f 93       	push	r18
    19c4:	3f 93       	push	r19
    19c6:	4f 93       	push	r20
    19c8:	5f 93       	push	r21
    19ca:	6f 93       	push	r22
    19cc:	7f 93       	push	r23
    19ce:	8f 93       	push	r24
    19d0:	9f 93       	push	r25
    19d2:	af 93       	push	r26
    19d4:	bf 93       	push	r27
    19d6:	ef 93       	push	r30
    19d8:	ff 93       	push	r31
    19da:	df 93       	push	r29
    19dc:	cf 93       	push	r28
    19de:	cd b7       	in	r28, 0x3d	; 61
    19e0:	de b7       	in	r29, 0x3e	; 62
	if(p2fun_INT0 != 0) p2fun_INT0();
    19e2:	80 91 86 00 	lds	r24, 0x0086
    19e6:	90 91 87 00 	lds	r25, 0x0087
    19ea:	00 97       	sbiw	r24, 0x00	; 0
    19ec:	29 f0       	breq	.+10     	; 0x19f8 <__vector_1+0x40>
    19ee:	e0 91 86 00 	lds	r30, 0x0086
    19f2:	f0 91 87 00 	lds	r31, 0x0087
    19f6:	09 95       	icall


}
    19f8:	cf 91       	pop	r28
    19fa:	df 91       	pop	r29
    19fc:	ff 91       	pop	r31
    19fe:	ef 91       	pop	r30
    1a00:	bf 91       	pop	r27
    1a02:	af 91       	pop	r26
    1a04:	9f 91       	pop	r25
    1a06:	8f 91       	pop	r24
    1a08:	7f 91       	pop	r23
    1a0a:	6f 91       	pop	r22
    1a0c:	5f 91       	pop	r21
    1a0e:	4f 91       	pop	r20
    1a10:	3f 91       	pop	r19
    1a12:	2f 91       	pop	r18
    1a14:	0f 90       	pop	r0
    1a16:	0f be       	out	0x3f, r0	; 63
    1a18:	0f 90       	pop	r0
    1a1a:	1f 90       	pop	r1
    1a1c:	18 95       	reti

00001a1e <__vector_2>:
ISR(INT1_vect)
{
    1a1e:	1f 92       	push	r1
    1a20:	0f 92       	push	r0
    1a22:	0f b6       	in	r0, 0x3f	; 63
    1a24:	0f 92       	push	r0
    1a26:	11 24       	eor	r1, r1
    1a28:	2f 93       	push	r18
    1a2a:	3f 93       	push	r19
    1a2c:	4f 93       	push	r20
    1a2e:	5f 93       	push	r21
    1a30:	6f 93       	push	r22
    1a32:	7f 93       	push	r23
    1a34:	8f 93       	push	r24
    1a36:	9f 93       	push	r25
    1a38:	af 93       	push	r26
    1a3a:	bf 93       	push	r27
    1a3c:	ef 93       	push	r30
    1a3e:	ff 93       	push	r31
    1a40:	df 93       	push	r29
    1a42:	cf 93       	push	r28
    1a44:	cd b7       	in	r28, 0x3d	; 61
    1a46:	de b7       	in	r29, 0x3e	; 62
	if(p2fun_INT1 != 0) p2fun_INT1();
    1a48:	80 91 88 00 	lds	r24, 0x0088
    1a4c:	90 91 89 00 	lds	r25, 0x0089
    1a50:	00 97       	sbiw	r24, 0x00	; 0
    1a52:	29 f0       	breq	.+10     	; 0x1a5e <__vector_2+0x40>
    1a54:	e0 91 88 00 	lds	r30, 0x0088
    1a58:	f0 91 89 00 	lds	r31, 0x0089
    1a5c:	09 95       	icall

}
    1a5e:	cf 91       	pop	r28
    1a60:	df 91       	pop	r29
    1a62:	ff 91       	pop	r31
    1a64:	ef 91       	pop	r30
    1a66:	bf 91       	pop	r27
    1a68:	af 91       	pop	r26
    1a6a:	9f 91       	pop	r25
    1a6c:	8f 91       	pop	r24
    1a6e:	7f 91       	pop	r23
    1a70:	6f 91       	pop	r22
    1a72:	5f 91       	pop	r21
    1a74:	4f 91       	pop	r20
    1a76:	3f 91       	pop	r19
    1a78:	2f 91       	pop	r18
    1a7a:	0f 90       	pop	r0
    1a7c:	0f be       	out	0x3f, r0	; 63
    1a7e:	0f 90       	pop	r0
    1a80:	1f 90       	pop	r1
    1a82:	18 95       	reti

00001a84 <__vector_3>:
ISR(INT2_vect)
{
    1a84:	1f 92       	push	r1
    1a86:	0f 92       	push	r0
    1a88:	0f b6       	in	r0, 0x3f	; 63
    1a8a:	0f 92       	push	r0
    1a8c:	11 24       	eor	r1, r1
    1a8e:	2f 93       	push	r18
    1a90:	3f 93       	push	r19
    1a92:	4f 93       	push	r20
    1a94:	5f 93       	push	r21
    1a96:	6f 93       	push	r22
    1a98:	7f 93       	push	r23
    1a9a:	8f 93       	push	r24
    1a9c:	9f 93       	push	r25
    1a9e:	af 93       	push	r26
    1aa0:	bf 93       	push	r27
    1aa2:	ef 93       	push	r30
    1aa4:	ff 93       	push	r31
    1aa6:	df 93       	push	r29
    1aa8:	cf 93       	push	r28
    1aaa:	cd b7       	in	r28, 0x3d	; 61
    1aac:	de b7       	in	r29, 0x3e	; 62
	if(p2fun_INT2 != 0) p2fun_INT2();
    1aae:	80 91 8a 00 	lds	r24, 0x008A
    1ab2:	90 91 8b 00 	lds	r25, 0x008B
    1ab6:	00 97       	sbiw	r24, 0x00	; 0
    1ab8:	29 f0       	breq	.+10     	; 0x1ac4 <__vector_3+0x40>
    1aba:	e0 91 8a 00 	lds	r30, 0x008A
    1abe:	f0 91 8b 00 	lds	r31, 0x008B
    1ac2:	09 95       	icall
}
    1ac4:	cf 91       	pop	r28
    1ac6:	df 91       	pop	r29
    1ac8:	ff 91       	pop	r31
    1aca:	ef 91       	pop	r30
    1acc:	bf 91       	pop	r27
    1ace:	af 91       	pop	r26
    1ad0:	9f 91       	pop	r25
    1ad2:	8f 91       	pop	r24
    1ad4:	7f 91       	pop	r23
    1ad6:	6f 91       	pop	r22
    1ad8:	5f 91       	pop	r21
    1ada:	4f 91       	pop	r20
    1adc:	3f 91       	pop	r19
    1ade:	2f 91       	pop	r18
    1ae0:	0f 90       	pop	r0
    1ae2:	0f be       	out	0x3f, r0	; 63
    1ae4:	0f 90       	pop	r0
    1ae6:	1f 90       	pop	r1
    1ae8:	18 95       	reti

00001aea <I2C_init>:
 */
#include "I2C.h"
#include <util/delay.h>

// ***************************************** I2C *****************************************************
void I2C_init(void){
    1aea:	df 93       	push	r29
    1aec:	cf 93       	push	r28
    1aee:	cd b7       	in	r28, 0x3d	; 61
    1af0:	de b7       	in	r29, 0x3e	; 62

// Determining Bit Rate
	TWBR = TWBR_VALUE;
    1af2:	e0 e2       	ldi	r30, 0x20	; 32
    1af4:	f0 e0       	ldi	r31, 0x00	; 0
    1af6:	10 82       	st	Z, r1
#if PRE_VAL == PRE_1
  CLR_BIT(TWSR,TWPS0);
  CLR_BIT(TWSR,TWPS1);
#elif PRE_VAL == PRE_4
  SET_BIT(TWSR,TWPS0);
    1af8:	a1 e2       	ldi	r26, 0x21	; 33
    1afa:	b0 e0       	ldi	r27, 0x00	; 0
    1afc:	e1 e2       	ldi	r30, 0x21	; 33
    1afe:	f0 e0       	ldi	r31, 0x00	; 0
    1b00:	80 81       	ld	r24, Z
    1b02:	81 60       	ori	r24, 0x01	; 1
    1b04:	8c 93       	st	X, r24
  CLR_BIT(TWSR,TWPS1);
    1b06:	a1 e2       	ldi	r26, 0x21	; 33
    1b08:	b0 e0       	ldi	r27, 0x00	; 0
    1b0a:	e1 e2       	ldi	r30, 0x21	; 33
    1b0c:	f0 e0       	ldi	r31, 0x00	; 0
    1b0e:	80 81       	ld	r24, Z
    1b10:	8d 7f       	andi	r24, 0xFD	; 253
    1b12:	8c 93       	st	X, r24
#elif PRE_VAL == PRE_64
  CLR_BIT(TWSR,TWPS0);
  SET_BIT(TWSR,TWPS1);
#endif

}
    1b14:	cf 91       	pop	r28
    1b16:	df 91       	pop	r29
    1b18:	08 95       	ret

00001b1a <I2C_Start>:

// ************************************ Master Mode **************************************************

// Start Function : Write to Device
unit8 I2C_Start(unit8 address){
    1b1a:	df 93       	push	r29
    1b1c:	cf 93       	push	r28
    1b1e:	00 d0       	rcall	.+0      	; 0x1b20 <I2C_Start+0x6>
    1b20:	00 d0       	rcall	.+0      	; 0x1b22 <I2C_Start+0x8>
    1b22:	cd b7       	in	r28, 0x3d	; 61
    1b24:	de b7       	in	r29, 0x3e	; 62
    1b26:	8b 83       	std	Y+3, r24	; 0x03
	// Variable used to check status
    unit8 status = TWSR & 0xF8 ;
    1b28:	e1 e2       	ldi	r30, 0x21	; 33
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	80 81       	ld	r24, Z
    1b2e:	88 7f       	andi	r24, 0xF8	; 248
    1b30:	8a 83       	std	Y+2, r24	; 0x02

	// Load TWCR To send Start Bit
	unsigned char STA_TEMP = 0;
    1b32:	19 82       	std	Y+1, r1	; 0x01
	SET_BIT(STA_TEMP,TWSTA);
    1b34:	89 81       	ldd	r24, Y+1	; 0x01
    1b36:	80 62       	ori	r24, 0x20	; 32
    1b38:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(STA_TEMP,TWINT);
    1b3a:	89 81       	ldd	r24, Y+1	; 0x01
    1b3c:	80 68       	ori	r24, 0x80	; 128
    1b3e:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(STA_TEMP,TWEN);
    1b40:	89 81       	ldd	r24, Y+1	; 0x01
    1b42:	84 60       	ori	r24, 0x04	; 4
    1b44:	89 83       	std	Y+1, r24	; 0x01
	TWCR = STA_TEMP;
    1b46:	e6 e5       	ldi	r30, 0x56	; 86
    1b48:	f0 e0       	ldi	r31, 0x00	; 0
    1b4a:	89 81       	ldd	r24, Y+1	; 0x01
    1b4c:	80 83       	st	Z, r24

	// Wait till INT Flag is Set
	while(GET_BIT(TWCR,TWINT) == 0);
    1b4e:	e6 e5       	ldi	r30, 0x56	; 86
    1b50:	f0 e0       	ldi	r31, 0x00	; 0
    1b52:	80 81       	ld	r24, Z
    1b54:	88 23       	and	r24, r24
    1b56:	dc f7       	brge	.-10     	; 0x1b4e <I2C_Start+0x34>

	// Check Status
	status = TWSR & 0xF8 ;
    1b58:	e1 e2       	ldi	r30, 0x21	; 33
    1b5a:	f0 e0       	ldi	r31, 0x00	; 0
    1b5c:	80 81       	ld	r24, Z
    1b5e:	88 7f       	andi	r24, 0xF8	; 248
    1b60:	8a 83       	std	Y+2, r24	; 0x02
	if(status != START_TX ) return CASE_0; // START fail
    1b62:	8a 81       	ldd	r24, Y+2	; 0x02
    1b64:	88 30       	cpi	r24, 0x08	; 8
    1b66:	11 f0       	breq	.+4      	; 0x1b6c <I2C_Start+0x52>
    1b68:	1c 82       	std	Y+4, r1	; 0x04
    1b6a:	27 c0       	rjmp	.+78     	; 0x1bba <I2C_Start+0xa0>

	// Load TWDR with Slave Address and Write bit
	TWDR = address  ;
    1b6c:	e3 e2       	ldi	r30, 0x23	; 35
    1b6e:	f0 e0       	ldi	r31, 0x00	; 0
    1b70:	8b 81       	ldd	r24, Y+3	; 0x03
    1b72:	80 83       	st	Z, r24

	// Re-updating TWCR
    STA_TEMP = 0;
    1b74:	19 82       	std	Y+1, r1	; 0x01
	SET_BIT(STA_TEMP,TWINT);
    1b76:	89 81       	ldd	r24, Y+1	; 0x01
    1b78:	80 68       	ori	r24, 0x80	; 128
    1b7a:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(STA_TEMP,TWEN);
    1b7c:	89 81       	ldd	r24, Y+1	; 0x01
    1b7e:	84 60       	ori	r24, 0x04	; 4
    1b80:	89 83       	std	Y+1, r24	; 0x01
	TWCR = STA_TEMP;
    1b82:	e6 e5       	ldi	r30, 0x56	; 86
    1b84:	f0 e0       	ldi	r31, 0x00	; 0
    1b86:	89 81       	ldd	r24, Y+1	; 0x01
    1b88:	80 83       	st	Z, r24

	// Wait till INT Flag is Set
	while(GET_BIT(TWCR,TWINT) == 0);
    1b8a:	e6 e5       	ldi	r30, 0x56	; 86
    1b8c:	f0 e0       	ldi	r31, 0x00	; 0
    1b8e:	80 81       	ld	r24, Z
    1b90:	88 23       	and	r24, r24
    1b92:	dc f7       	brge	.-10     	; 0x1b8a <I2C_Start+0x70>

	// Check Status
	status = TWSR & 0xF8 ;
    1b94:	e1 e2       	ldi	r30, 0x21	; 33
    1b96:	f0 e0       	ldi	r31, 0x00	; 0
    1b98:	80 81       	ld	r24, Z
    1b9a:	88 7f       	andi	r24, 0xF8	; 248
    1b9c:	8a 83       	std	Y+2, r24	; 0x02
	if(status == SLA_W_TX_ACK_RX )           return CASE_1;       // ACK Received
    1b9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba0:	88 31       	cpi	r24, 0x18	; 24
    1ba2:	19 f4       	brne	.+6      	; 0x1baa <I2C_Start+0x90>
    1ba4:	81 e0       	ldi	r24, 0x01	; 1
    1ba6:	8c 83       	std	Y+4, r24	; 0x04
    1ba8:	08 c0       	rjmp	.+16     	; 0x1bba <I2C_Start+0xa0>
	else if (status == SLA_W_TX_NACK_RX )    return CASE_2;       // NACK Received
    1baa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bac:	80 32       	cpi	r24, 0x20	; 32
    1bae:	19 f4       	brne	.+6      	; 0x1bb6 <I2C_Start+0x9c>
    1bb0:	82 e0       	ldi	r24, 0x02	; 2
    1bb2:	8c 83       	std	Y+4, r24	; 0x04
    1bb4:	02 c0       	rjmp	.+4      	; 0x1bba <I2C_Start+0xa0>
	else                                     return CASE_3;     // Process Fail
    1bb6:	83 e0       	ldi	r24, 0x03	; 3
    1bb8:	8c 83       	std	Y+4, r24	; 0x04
    1bba:	8c 81       	ldd	r24, Y+4	; 0x04

}
    1bbc:	0f 90       	pop	r0
    1bbe:	0f 90       	pop	r0
    1bc0:	0f 90       	pop	r0
    1bc2:	0f 90       	pop	r0
    1bc4:	cf 91       	pop	r28
    1bc6:	df 91       	pop	r29
    1bc8:	08 95       	ret

00001bca <I2C_RepStart>:

// Repeated Start Function : Read from Device
unit8 I2C_RepStart(unit8 address){
    1bca:	df 93       	push	r29
    1bcc:	cf 93       	push	r28
    1bce:	00 d0       	rcall	.+0      	; 0x1bd0 <I2C_RepStart+0x6>
    1bd0:	00 d0       	rcall	.+0      	; 0x1bd2 <I2C_RepStart+0x8>
    1bd2:	cd b7       	in	r28, 0x3d	; 61
    1bd4:	de b7       	in	r29, 0x3e	; 62
    1bd6:	8b 83       	std	Y+3, r24	; 0x03

	// Variable used to check status
    unit8 status = TWSR & 0xF8 ;
    1bd8:	e1 e2       	ldi	r30, 0x21	; 33
    1bda:	f0 e0       	ldi	r31, 0x00	; 0
    1bdc:	80 81       	ld	r24, Z
    1bde:	88 7f       	andi	r24, 0xF8	; 248
    1be0:	8a 83       	std	Y+2, r24	; 0x02

	// Load TWCR To send Start Bit
	unsigned char STA_TEMP = 0;
    1be2:	19 82       	std	Y+1, r1	; 0x01
	SET_BIT(STA_TEMP,TWSTA);
    1be4:	89 81       	ldd	r24, Y+1	; 0x01
    1be6:	80 62       	ori	r24, 0x20	; 32
    1be8:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(STA_TEMP,TWINT);
    1bea:	89 81       	ldd	r24, Y+1	; 0x01
    1bec:	80 68       	ori	r24, 0x80	; 128
    1bee:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(STA_TEMP,TWEN);
    1bf0:	89 81       	ldd	r24, Y+1	; 0x01
    1bf2:	84 60       	ori	r24, 0x04	; 4
    1bf4:	89 83       	std	Y+1, r24	; 0x01
	TWCR = STA_TEMP;
    1bf6:	e6 e5       	ldi	r30, 0x56	; 86
    1bf8:	f0 e0       	ldi	r31, 0x00	; 0
    1bfa:	89 81       	ldd	r24, Y+1	; 0x01
    1bfc:	80 83       	st	Z, r24

	// Wait till INT Flag is Set
	while(GET_BIT(TWCR,TWINT) == 0);
    1bfe:	e6 e5       	ldi	r30, 0x56	; 86
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	80 81       	ld	r24, Z
    1c04:	88 23       	and	r24, r24
    1c06:	dc f7       	brge	.-10     	; 0x1bfe <I2C_RepStart+0x34>

	// Check Status
	status = TWSR & 0xF8 ;
    1c08:	e1 e2       	ldi	r30, 0x21	; 33
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	80 81       	ld	r24, Z
    1c0e:	88 7f       	andi	r24, 0xF8	; 248
    1c10:	8a 83       	std	Y+2, r24	; 0x02
	if(status != REP_START ) return CASE_0;     // START fail
    1c12:	8a 81       	ldd	r24, Y+2	; 0x02
    1c14:	80 31       	cpi	r24, 0x10	; 16
    1c16:	11 f0       	breq	.+4      	; 0x1c1c <I2C_RepStart+0x52>
    1c18:	1c 82       	std	Y+4, r1	; 0x04
    1c1a:	27 c0       	rjmp	.+78     	; 0x1c6a <I2C_RepStart+0xa0>

	// Load TWDR with Slave Address and Write bit
	TWDR = address ;
    1c1c:	e3 e2       	ldi	r30, 0x23	; 35
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	8b 81       	ldd	r24, Y+3	; 0x03
    1c22:	80 83       	st	Z, r24

	// Re-updating TWCR
    STA_TEMP = 0;
    1c24:	19 82       	std	Y+1, r1	; 0x01
	SET_BIT(STA_TEMP,TWINT);
    1c26:	89 81       	ldd	r24, Y+1	; 0x01
    1c28:	80 68       	ori	r24, 0x80	; 128
    1c2a:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(STA_TEMP,TWEN);
    1c2c:	89 81       	ldd	r24, Y+1	; 0x01
    1c2e:	84 60       	ori	r24, 0x04	; 4
    1c30:	89 83       	std	Y+1, r24	; 0x01
	TWCR = STA_TEMP;
    1c32:	e6 e5       	ldi	r30, 0x56	; 86
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	89 81       	ldd	r24, Y+1	; 0x01
    1c38:	80 83       	st	Z, r24

	// Wait till INT Flag is Set
	while(GET_BIT(TWCR,TWINT) == 0);
    1c3a:	e6 e5       	ldi	r30, 0x56	; 86
    1c3c:	f0 e0       	ldi	r31, 0x00	; 0
    1c3e:	80 81       	ld	r24, Z
    1c40:	88 23       	and	r24, r24
    1c42:	dc f7       	brge	.-10     	; 0x1c3a <I2C_RepStart+0x70>

	// Check Status
	status = TWSR & 0xF8 ;
    1c44:	e1 e2       	ldi	r30, 0x21	; 33
    1c46:	f0 e0       	ldi	r31, 0x00	; 0
    1c48:	80 81       	ld	r24, Z
    1c4a:	88 7f       	andi	r24, 0xF8	; 248
    1c4c:	8a 83       	std	Y+2, r24	; 0x02
	if(status == SLA_R_TX_ACK_RX )           return CASE_1;   // ACK Received
    1c4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c50:	80 34       	cpi	r24, 0x40	; 64
    1c52:	19 f4       	brne	.+6      	; 0x1c5a <I2C_RepStart+0x90>
    1c54:	81 e0       	ldi	r24, 0x01	; 1
    1c56:	8c 83       	std	Y+4, r24	; 0x04
    1c58:	08 c0       	rjmp	.+16     	; 0x1c6a <I2C_RepStart+0xa0>
	else if (status == SLA_R_TX_NACK_RX )    return CASE_2;   // NACK Received
    1c5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5c:	88 34       	cpi	r24, 0x48	; 72
    1c5e:	19 f4       	brne	.+6      	; 0x1c66 <I2C_RepStart+0x9c>
    1c60:	82 e0       	ldi	r24, 0x02	; 2
    1c62:	8c 83       	std	Y+4, r24	; 0x04
    1c64:	02 c0       	rjmp	.+4      	; 0x1c6a <I2C_RepStart+0xa0>
	else                                     return CASE_3;   // Process Fail
    1c66:	83 e0       	ldi	r24, 0x03	; 3
    1c68:	8c 83       	std	Y+4, r24	; 0x04
    1c6a:	8c 81       	ldd	r24, Y+4	; 0x04

}
    1c6c:	0f 90       	pop	r0
    1c6e:	0f 90       	pop	r0
    1c70:	0f 90       	pop	r0
    1c72:	0f 90       	pop	r0
    1c74:	cf 91       	pop	r28
    1c76:	df 91       	pop	r29
    1c78:	08 95       	ret

00001c7a <I2C_Write>:

// Write data : Write to Device after START
unit8 I2C_Write(unit8 data){
    1c7a:	df 93       	push	r29
    1c7c:	cf 93       	push	r28
    1c7e:	00 d0       	rcall	.+0      	; 0x1c80 <I2C_Write+0x6>
    1c80:	00 d0       	rcall	.+0      	; 0x1c82 <I2C_Write+0x8>
    1c82:	cd b7       	in	r28, 0x3d	; 61
    1c84:	de b7       	in	r29, 0x3e	; 62
    1c86:	8b 83       	std	Y+3, r24	; 0x03
	// Status variable to check status
	unit8 status;

	// Load Data to Register
	TWDR = data;
    1c88:	e3 e2       	ldi	r30, 0x23	; 35
    1c8a:	f0 e0       	ldi	r31, 0x00	; 0
    1c8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8e:	80 83       	st	Z, r24

	// Load TWCR To send Start Bit
	unsigned char STA_TEMP = 0;
    1c90:	19 82       	std	Y+1, r1	; 0x01
	SET_BIT(STA_TEMP,TWINT);
    1c92:	89 81       	ldd	r24, Y+1	; 0x01
    1c94:	80 68       	ori	r24, 0x80	; 128
    1c96:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(STA_TEMP,TWEN);
    1c98:	89 81       	ldd	r24, Y+1	; 0x01
    1c9a:	84 60       	ori	r24, 0x04	; 4
    1c9c:	89 83       	std	Y+1, r24	; 0x01
	TWCR = STA_TEMP;
    1c9e:	e6 e5       	ldi	r30, 0x56	; 86
    1ca0:	f0 e0       	ldi	r31, 0x00	; 0
    1ca2:	89 81       	ldd	r24, Y+1	; 0x01
    1ca4:	80 83       	st	Z, r24

	// Wait till INT Flag is Set
	while(GET_BIT(TWCR,TWINT) == 0);
    1ca6:	e6 e5       	ldi	r30, 0x56	; 86
    1ca8:	f0 e0       	ldi	r31, 0x00	; 0
    1caa:	80 81       	ld	r24, Z
    1cac:	88 23       	and	r24, r24
    1cae:	dc f7       	brge	.-10     	; 0x1ca6 <I2C_Write+0x2c>

	// Check Status
	status = TWSR & 0xF8 ;
    1cb0:	e1 e2       	ldi	r30, 0x21	; 33
    1cb2:	f0 e0       	ldi	r31, 0x00	; 0
    1cb4:	80 81       	ld	r24, Z
    1cb6:	88 7f       	andi	r24, 0xF8	; 248
    1cb8:	8a 83       	std	Y+2, r24	; 0x02

	if(status == DATA_TX_ACK_RX )            return CASE_0;    // ACK Received
    1cba:	8a 81       	ldd	r24, Y+2	; 0x02
    1cbc:	88 32       	cpi	r24, 0x28	; 40
    1cbe:	11 f4       	brne	.+4      	; 0x1cc4 <I2C_Write+0x4a>
    1cc0:	1c 82       	std	Y+4, r1	; 0x04
    1cc2:	08 c0       	rjmp	.+16     	; 0x1cd4 <I2C_Write+0x5a>
	else if(status == DATA_TX_NACK_RX )      return CASE_1;    // NACK Received
    1cc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc6:	80 33       	cpi	r24, 0x30	; 48
    1cc8:	19 f4       	brne	.+6      	; 0x1cd0 <I2C_Write+0x56>
    1cca:	81 e0       	ldi	r24, 0x01	; 1
    1ccc:	8c 83       	std	Y+4, r24	; 0x04
    1cce:	02 c0       	rjmp	.+4      	; 0x1cd4 <I2C_Write+0x5a>
	else                                     return CASE_2;    // Process Fail
    1cd0:	82 e0       	ldi	r24, 0x02	; 2
    1cd2:	8c 83       	std	Y+4, r24	; 0x04
    1cd4:	8c 81       	ldd	r24, Y+4	; 0x04


}
    1cd6:	0f 90       	pop	r0
    1cd8:	0f 90       	pop	r0
    1cda:	0f 90       	pop	r0
    1cdc:	0f 90       	pop	r0
    1cde:	cf 91       	pop	r28
    1ce0:	df 91       	pop	r29
    1ce2:	08 95       	ret

00001ce4 <I2C_Read_Ack>:

// Read data  : Read from Slave after Repeated START

// Read_Ack   : when master want to read data and want to continue reading data
unit8 I2C_Read_Ack (void){
    1ce4:	df 93       	push	r29
    1ce6:	cf 93       	push	r28
    1ce8:	0f 92       	push	r0
    1cea:	cd b7       	in	r28, 0x3d	; 61
    1cec:	de b7       	in	r29, 0x3e	; 62
	// Load TWCR To send Start Bit
	unsigned char STA_TEMP = 0;
    1cee:	19 82       	std	Y+1, r1	; 0x01
	SET_BIT(STA_TEMP,TWINT);
    1cf0:	89 81       	ldd	r24, Y+1	; 0x01
    1cf2:	80 68       	ori	r24, 0x80	; 128
    1cf4:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(STA_TEMP,TWEN);
    1cf6:	89 81       	ldd	r24, Y+1	; 0x01
    1cf8:	84 60       	ori	r24, 0x04	; 4
    1cfa:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(STA_TEMP,TWEA);
    1cfc:	89 81       	ldd	r24, Y+1	; 0x01
    1cfe:	80 64       	ori	r24, 0x40	; 64
    1d00:	89 83       	std	Y+1, r24	; 0x01
	TWCR = STA_TEMP;
    1d02:	e6 e5       	ldi	r30, 0x56	; 86
    1d04:	f0 e0       	ldi	r31, 0x00	; 0
    1d06:	89 81       	ldd	r24, Y+1	; 0x01
    1d08:	80 83       	st	Z, r24

	// Wait till INT Flag is Set
	while(GET_BIT(TWCR,TWINT) == 0);
    1d0a:	e6 e5       	ldi	r30, 0x56	; 86
    1d0c:	f0 e0       	ldi	r31, 0x00	; 0
    1d0e:	80 81       	ld	r24, Z
    1d10:	88 23       	and	r24, r24
    1d12:	dc f7       	brge	.-10     	; 0x1d0a <I2C_Read_Ack+0x26>

	// Return Data
	return TWDR;
    1d14:	e3 e2       	ldi	r30, 0x23	; 35
    1d16:	f0 e0       	ldi	r31, 0x00	; 0
    1d18:	80 81       	ld	r24, Z
}
    1d1a:	0f 90       	pop	r0
    1d1c:	cf 91       	pop	r28
    1d1e:	df 91       	pop	r29
    1d20:	08 95       	ret

00001d22 <I2C_Read_Nack>:

// Read_Nack   : when master want to read data and want to stop reading data
unit8 I2C_Read_Nack (void){
    1d22:	df 93       	push	r29
    1d24:	cf 93       	push	r28
    1d26:	0f 92       	push	r0
    1d28:	cd b7       	in	r28, 0x3d	; 61
    1d2a:	de b7       	in	r29, 0x3e	; 62
	// Load TWCR To send Start Bit
	unsigned char STA_TEMP = 0;
    1d2c:	19 82       	std	Y+1, r1	; 0x01
	SET_BIT(STA_TEMP,TWINT);
    1d2e:	89 81       	ldd	r24, Y+1	; 0x01
    1d30:	80 68       	ori	r24, 0x80	; 128
    1d32:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(STA_TEMP,TWEN);
    1d34:	89 81       	ldd	r24, Y+1	; 0x01
    1d36:	84 60       	ori	r24, 0x04	; 4
    1d38:	89 83       	std	Y+1, r24	; 0x01
	TWCR = STA_TEMP;
    1d3a:	e6 e5       	ldi	r30, 0x56	; 86
    1d3c:	f0 e0       	ldi	r31, 0x00	; 0
    1d3e:	89 81       	ldd	r24, Y+1	; 0x01
    1d40:	80 83       	st	Z, r24

	// Wait till INT Flag is Set
	while(GET_BIT(TWCR,TWINT) == 0);
    1d42:	e6 e5       	ldi	r30, 0x56	; 86
    1d44:	f0 e0       	ldi	r31, 0x00	; 0
    1d46:	80 81       	ld	r24, Z
    1d48:	88 23       	and	r24, r24
    1d4a:	dc f7       	brge	.-10     	; 0x1d42 <I2C_Read_Nack+0x20>

	// Return Data
	return TWDR;
    1d4c:	e3 e2       	ldi	r30, 0x23	; 35
    1d4e:	f0 e0       	ldi	r31, 0x00	; 0
    1d50:	80 81       	ld	r24, Z
}
    1d52:	0f 90       	pop	r0
    1d54:	cf 91       	pop	r28
    1d56:	df 91       	pop	r29
    1d58:	08 95       	ret

00001d5a <I2C_Stop>:

// Stop : cease communication
void I2C_Stop(void){
    1d5a:	df 93       	push	r29
    1d5c:	cf 93       	push	r28
    1d5e:	0f 92       	push	r0
    1d60:	cd b7       	in	r28, 0x3d	; 61
    1d62:	de b7       	in	r29, 0x3e	; 62
	// Load TWCR To send Start Bit
	unsigned char STA_TEMP = 0;
    1d64:	19 82       	std	Y+1, r1	; 0x01
	SET_BIT(STA_TEMP,TWSTO);
    1d66:	89 81       	ldd	r24, Y+1	; 0x01
    1d68:	80 61       	ori	r24, 0x10	; 16
    1d6a:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(STA_TEMP,TWINT);
    1d6c:	89 81       	ldd	r24, Y+1	; 0x01
    1d6e:	80 68       	ori	r24, 0x80	; 128
    1d70:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(STA_TEMP,TWEN);
    1d72:	89 81       	ldd	r24, Y+1	; 0x01
    1d74:	84 60       	ori	r24, 0x04	; 4
    1d76:	89 83       	std	Y+1, r24	; 0x01
	TWCR = STA_TEMP;
    1d78:	e6 e5       	ldi	r30, 0x56	; 86
    1d7a:	f0 e0       	ldi	r31, 0x00	; 0
    1d7c:	89 81       	ldd	r24, Y+1	; 0x01
    1d7e:	80 83       	st	Z, r24

	// Wait till INT Flag is Set
	while(GET_BIT(TWCR,TWINT) == 0);
    1d80:	e6 e5       	ldi	r30, 0x56	; 86
    1d82:	f0 e0       	ldi	r31, 0x00	; 0
    1d84:	80 81       	ld	r24, Z
    1d86:	88 23       	and	r24, r24
    1d88:	dc f7       	brge	.-10     	; 0x1d80 <I2C_Stop+0x26>
}
    1d8a:	0f 90       	pop	r0
    1d8c:	cf 91       	pop	r28
    1d8e:	df 91       	pop	r29
    1d90:	08 95       	ret

00001d92 <I2C_SlaveInit>:
// *********************************************************************************************************

//**************************************** Slave Mode ******************************************************

// Initialize Slave with Address
void I2C_SlaveInit(unit8 slaveAddress){
    1d92:	df 93       	push	r29
    1d94:	cf 93       	push	r28
    1d96:	00 d0       	rcall	.+0      	; 0x1d98 <I2C_SlaveInit+0x6>
    1d98:	cd b7       	in	r28, 0x3d	; 61
    1d9a:	de b7       	in	r29, 0x3e	; 62
    1d9c:	8a 83       	std	Y+2, r24	; 0x02
	// Load TWAR with slave address
	TWAR = slaveAddress | GEN_CALL;
    1d9e:	e2 e2       	ldi	r30, 0x22	; 34
    1da0:	f0 e0       	ldi	r31, 0x00	; 0
    1da2:	8a 81       	ldd	r24, Y+2	; 0x02
    1da4:	81 60       	ori	r24, 0x01	; 1
    1da6:	80 83       	st	Z, r24

	// Initialize TWCR with values
	unsigned char STA_TEMP = 0;
    1da8:	19 82       	std	Y+1, r1	; 0x01
	SET_BIT(STA_TEMP,TWINT);
    1daa:	89 81       	ldd	r24, Y+1	; 0x01
    1dac:	80 68       	ori	r24, 0x80	; 128
    1dae:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(STA_TEMP,TWEN);
    1db0:	89 81       	ldd	r24, Y+1	; 0x01
    1db2:	84 60       	ori	r24, 0x04	; 4
    1db4:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(STA_TEMP,TWEA);
    1db6:	89 81       	ldd	r24, Y+1	; 0x01
    1db8:	80 64       	ori	r24, 0x40	; 64
    1dba:	89 83       	std	Y+1, r24	; 0x01
	TWCR = STA_TEMP;
    1dbc:	e6 e5       	ldi	r30, 0x56	; 86
    1dbe:	f0 e0       	ldi	r31, 0x00	; 0
    1dc0:	89 81       	ldd	r24, Y+1	; 0x01
    1dc2:	80 83       	st	Z, r24
}
    1dc4:	0f 90       	pop	r0
    1dc6:	0f 90       	pop	r0
    1dc8:	cf 91       	pop	r28
    1dca:	df 91       	pop	r29
    1dcc:	08 95       	ret

00001dce <I2C_Slave_Listen>:

// Slave must always listen until receive start from Master
unit8 I2C_Slave_Listen(void){
    1dce:	df 93       	push	r29
    1dd0:	cf 93       	push	r28
    1dd2:	00 d0       	rcall	.+0      	; 0x1dd4 <I2C_Slave_Listen+0x6>
    1dd4:	cd b7       	in	r28, 0x3d	; 61
    1dd6:	de b7       	in	r29, 0x3e	; 62
     {
    // status variable to check status
	unit8 status;

	// wait till TWINT is set
	while(GET_BIT(TWCR,TWINT) == 0);
    1dd8:	e6 e5       	ldi	r30, 0x56	; 86
    1dda:	f0 e0       	ldi	r31, 0x00	; 0
    1ddc:	80 81       	ld	r24, Z
    1dde:	88 23       	and	r24, r24
    1de0:	dc f7       	brge	.-10     	; 0x1dd8 <I2C_Slave_Listen+0xa>

	// Check status
	status=TWSR & 0xF8;
    1de2:	e1 e2       	ldi	r30, 0x21	; 33
    1de4:	f0 e0       	ldi	r31, 0x00	; 0
    1de6:	80 81       	ld	r24, Z
    1de8:	88 7f       	andi	r24, 0xF8	; 248
    1dea:	89 83       	std	Y+1, r24	; 0x01

	if(status == SLA_W_RX_ACK_RX ||status == SLA_W_RX_ACK_RX_LOSS)  return CASE_0; // ACK Received in Case SLA + W
    1dec:	89 81       	ldd	r24, Y+1	; 0x01
    1dee:	80 36       	cpi	r24, 0x60	; 96
    1df0:	19 f0       	breq	.+6      	; 0x1df8 <I2C_Slave_Listen+0x2a>
    1df2:	89 81       	ldd	r24, Y+1	; 0x01
    1df4:	88 36       	cpi	r24, 0x68	; 104
    1df6:	11 f4       	brne	.+4      	; 0x1dfc <I2C_Slave_Listen+0x2e>
    1df8:	1a 82       	std	Y+2, r1	; 0x02
    1dfa:	11 c0       	rjmp	.+34     	; 0x1e1e <I2C_Slave_Listen+0x50>
	if(status == SLA_R_RX_ACK_RX ||status == SLA_R_RX_ACK_RX_LOSS)  return CASE_1; // ACK Received in Case SLA + R
    1dfc:	89 81       	ldd	r24, Y+1	; 0x01
    1dfe:	88 3a       	cpi	r24, 0xA8	; 168
    1e00:	19 f0       	breq	.+6      	; 0x1e08 <I2C_Slave_Listen+0x3a>
    1e02:	89 81       	ldd	r24, Y+1	; 0x01
    1e04:	80 3b       	cpi	r24, 0xB0	; 176
    1e06:	19 f4       	brne	.+6      	; 0x1e0e <I2C_Slave_Listen+0x40>
    1e08:	81 e0       	ldi	r24, 0x01	; 1
    1e0a:	8a 83       	std	Y+2, r24	; 0x02
    1e0c:	08 c0       	rjmp	.+16     	; 0x1e1e <I2C_Slave_Listen+0x50>
	if(status == GENERAL_CALL ||status == GENERAL_CALL_LOSS)	    return CASE_2; // General Call received
    1e0e:	89 81       	ldd	r24, Y+1	; 0x01
    1e10:	80 37       	cpi	r24, 0x70	; 112
    1e12:	19 f0       	breq	.+6      	; 0x1e1a <I2C_Slave_Listen+0x4c>
    1e14:	89 81       	ldd	r24, Y+1	; 0x01
    1e16:	88 37       	cpi	r24, 0x78	; 120
    1e18:	f9 f6       	brne	.-66     	; 0x1dd8 <I2C_Slave_Listen+0xa>
    1e1a:	82 e0       	ldi	r24, 0x02	; 2
    1e1c:	8a 83       	std	Y+2, r24	; 0x02
	else
	continue;			/* Else continue */
     }
    1e1e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1e20:	0f 90       	pop	r0
    1e22:	0f 90       	pop	r0
    1e24:	cf 91       	pop	r28
    1e26:	df 91       	pop	r29
    1e28:	08 95       	ret

00001e2a <I2C_Slave_Transmit>:

// Slave transmit to master
unit8 I2C_Slave_Transmit(unit8 data){
    1e2a:	df 93       	push	r29
    1e2c:	cf 93       	push	r28
    1e2e:	00 d0       	rcall	.+0      	; 0x1e30 <I2C_Slave_Transmit+0x6>
    1e30:	00 d0       	rcall	.+0      	; 0x1e32 <I2C_Slave_Transmit+0x8>
    1e32:	cd b7       	in	r28, 0x3d	; 61
    1e34:	de b7       	in	r29, 0x3e	; 62
    1e36:	8b 83       	std	Y+3, r24	; 0x03
	// Status variable to check status
	unit8 status;

	// Load Data to Register
	TWDR = data;
    1e38:	e3 e2       	ldi	r30, 0x23	; 35
    1e3a:	f0 e0       	ldi	r31, 0x00	; 0
    1e3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3e:	80 83       	st	Z, r24

	// Load TWCR To send Start Bit
	unsigned char STA_TEMP = 0;
    1e40:	19 82       	std	Y+1, r1	; 0x01
	SET_BIT(STA_TEMP,TWINT);
    1e42:	89 81       	ldd	r24, Y+1	; 0x01
    1e44:	80 68       	ori	r24, 0x80	; 128
    1e46:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(STA_TEMP,TWEN);
    1e48:	89 81       	ldd	r24, Y+1	; 0x01
    1e4a:	84 60       	ori	r24, 0x04	; 4
    1e4c:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(STA_TEMP,TWEA);
    1e4e:	89 81       	ldd	r24, Y+1	; 0x01
    1e50:	80 64       	ori	r24, 0x40	; 64
    1e52:	89 83       	std	Y+1, r24	; 0x01
	TWCR = STA_TEMP;
    1e54:	e6 e5       	ldi	r30, 0x56	; 86
    1e56:	f0 e0       	ldi	r31, 0x00	; 0
    1e58:	89 81       	ldd	r24, Y+1	; 0x01
    1e5a:	80 83       	st	Z, r24

	// Wait till INT Flag is Set
	while(GET_BIT(TWCR,TWINT) == 0);
    1e5c:	e6 e5       	ldi	r30, 0x56	; 86
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	80 81       	ld	r24, Z
    1e62:	88 23       	and	r24, r24
    1e64:	dc f7       	brge	.-10     	; 0x1e5c <I2C_Slave_Transmit+0x32>

	// Check Status
	status = TWSR & 0xF8 ;
    1e66:	e1 e2       	ldi	r30, 0x21	; 33
    1e68:	f0 e0       	ldi	r31, 0x00	; 0
    1e6a:	80 81       	ld	r24, Z
    1e6c:	88 7f       	andi	r24, 0xF8	; 248
    1e6e:	8a 83       	std	Y+2, r24	; 0x02

	// STOP or Repeated Start is received clear interrupt flag
	if(status == STOP_SLAVE){
    1e70:	8a 81       	ldd	r24, Y+2	; 0x02
    1e72:	80 3a       	cpi	r24, 0xA0	; 160
    1e74:	51 f4       	brne	.+20     	; 0x1e8a <I2C_Slave_Transmit+0x60>
		SET_BIT(TWCR,TWINT);
    1e76:	a6 e5       	ldi	r26, 0x56	; 86
    1e78:	b0 e0       	ldi	r27, 0x00	; 0
    1e7a:	e6 e5       	ldi	r30, 0x56	; 86
    1e7c:	f0 e0       	ldi	r31, 0x00	; 0
    1e7e:	80 81       	ld	r24, Z
    1e80:	80 68       	ori	r24, 0x80	; 128
    1e82:	8c 93       	st	X, r24
		return -1;
    1e84:	8f ef       	ldi	r24, 0xFF	; 255
    1e86:	8c 83       	std	Y+4, r24	; 0x04
    1e88:	13 c0       	rjmp	.+38     	; 0x1eb0 <I2C_Slave_Transmit+0x86>
	}
	// Data is transmitted and ACK is received
	else if (status == DATA_TWDR_ACK_RX)         return CASE_0;
    1e8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8c:	88 3b       	cpi	r24, 0xB8	; 184
    1e8e:	11 f4       	brne	.+4      	; 0x1e94 <I2C_Slave_Transmit+0x6a>
    1e90:	1c 82       	std	Y+4, r1	; 0x04
    1e92:	0e c0       	rjmp	.+28     	; 0x1eb0 <I2C_Slave_Transmit+0x86>

	// Data is transmitted and NACK is received
	else if (status == DATA_TWDR_ACK_RX_LOSS )   return -2;
    1e94:	8a 81       	ldd	r24, Y+2	; 0x02
    1e96:	80 3c       	cpi	r24, 0xC0	; 192
    1e98:	19 f4       	brne	.+6      	; 0x1ea0 <I2C_Slave_Transmit+0x76>
    1e9a:	8e ef       	ldi	r24, 0xFE	; 254
    1e9c:	8c 83       	std	Y+4, r24	; 0x04
    1e9e:	08 c0       	rjmp	.+16     	; 0x1eb0 <I2C_Slave_Transmit+0x86>

    // Last byte transmitted and ACK is received
	else if (status == LAST_BYTE_ACK_RX )        return -3;
    1ea0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea2:	88 3c       	cpi	r24, 0xC8	; 200
    1ea4:	19 f4       	brne	.+6      	; 0x1eac <I2C_Slave_Transmit+0x82>
    1ea6:	8d ef       	ldi	r24, 0xFD	; 253
    1ea8:	8c 83       	std	Y+4, r24	; 0x04
    1eaa:	02 c0       	rjmp	.+4      	; 0x1eb0 <I2C_Slave_Transmit+0x86>

	else                                         return -4;
    1eac:	8c ef       	ldi	r24, 0xFC	; 252
    1eae:	8c 83       	std	Y+4, r24	; 0x04
    1eb0:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1eb2:	0f 90       	pop	r0
    1eb4:	0f 90       	pop	r0
    1eb6:	0f 90       	pop	r0
    1eb8:	0f 90       	pop	r0
    1eba:	cf 91       	pop	r28
    1ebc:	df 91       	pop	r29
    1ebe:	08 95       	ret

00001ec0 <I2C_Slave_Receive>:

// Slave receive from master
unit8 I2C_Slave_Receive(void)
{
    1ec0:	df 93       	push	r29
    1ec2:	cf 93       	push	r28
    1ec4:	00 d0       	rcall	.+0      	; 0x1ec6 <I2C_Slave_Receive+0x6>
    1ec6:	0f 92       	push	r0
    1ec8:	cd b7       	in	r28, 0x3d	; 61
    1eca:	de b7       	in	r29, 0x3e	; 62
	// Status variable to check status
	unit8 status;

	// Load TWCR To send Start Bit
	unsigned char STA_TEMP = 0;
    1ecc:	19 82       	std	Y+1, r1	; 0x01
	SET_BIT(STA_TEMP,TWINT);
    1ece:	89 81       	ldd	r24, Y+1	; 0x01
    1ed0:	80 68       	ori	r24, 0x80	; 128
    1ed2:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(STA_TEMP,TWEN);
    1ed4:	89 81       	ldd	r24, Y+1	; 0x01
    1ed6:	84 60       	ori	r24, 0x04	; 4
    1ed8:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(STA_TEMP,TWEA);
    1eda:	89 81       	ldd	r24, Y+1	; 0x01
    1edc:	80 64       	ori	r24, 0x40	; 64
    1ede:	89 83       	std	Y+1, r24	; 0x01
	TWCR = STA_TEMP;
    1ee0:	e6 e5       	ldi	r30, 0x56	; 86
    1ee2:	f0 e0       	ldi	r31, 0x00	; 0
    1ee4:	89 81       	ldd	r24, Y+1	; 0x01
    1ee6:	80 83       	st	Z, r24

	// Wait till INT Flag is Set
	while(GET_BIT(TWCR,TWINT) == 0);
    1ee8:	e6 e5       	ldi	r30, 0x56	; 86
    1eea:	f0 e0       	ldi	r31, 0x00	; 0
    1eec:	80 81       	ld	r24, Z
    1eee:	88 23       	and	r24, r24
    1ef0:	dc f7       	brge	.-10     	; 0x1ee8 <I2C_Slave_Receive+0x28>

	// Check Status
	status = TWSR & 0xF8 ;
    1ef2:	e1 e2       	ldi	r30, 0x21	; 33
    1ef4:	f0 e0       	ldi	r31, 0x00	; 0
    1ef6:	80 81       	ld	r24, Z
    1ef8:	88 7f       	andi	r24, 0xF8	; 248
    1efa:	8a 83       	std	Y+2, r24	; 0x02

	// Data Received and ACK Received
    if(status == SLA_W_RX_DATA_RX_ACK || status == GENERAL_CALL_DATA_RX_ACK)
    1efc:	8a 81       	ldd	r24, Y+2	; 0x02
    1efe:	80 38       	cpi	r24, 0x80	; 128
    1f00:	19 f0       	breq	.+6      	; 0x1f08 <I2C_Slave_Receive+0x48>
    1f02:	8a 81       	ldd	r24, Y+2	; 0x02
    1f04:	80 39       	cpi	r24, 0x90	; 144
    1f06:	29 f4       	brne	.+10     	; 0x1f12 <I2C_Slave_Receive+0x52>
    return TWDR;
    1f08:	e3 e2       	ldi	r30, 0x23	; 35
    1f0a:	f0 e0       	ldi	r31, 0x00	; 0
    1f0c:	80 81       	ld	r24, Z
    1f0e:	8b 83       	std	Y+3, r24	; 0x03
    1f10:	1a c0       	rjmp	.+52     	; 0x1f46 <I2C_Slave_Receive+0x86>

    // Data Received and NACK returned & switched to not addressed slave mode
    if(status == SLA_W_RX_DATA_RX_NACK || status == GENERAL_CALL_DATA_RX_NACK)
    1f12:	8a 81       	ldd	r24, Y+2	; 0x02
    1f14:	88 38       	cpi	r24, 0x88	; 136
    1f16:	19 f0       	breq	.+6      	; 0x1f1e <I2C_Slave_Receive+0x5e>
    1f18:	8a 81       	ldd	r24, Y+2	; 0x02
    1f1a:	88 39       	cpi	r24, 0x98	; 152
    1f1c:	29 f4       	brne	.+10     	; 0x1f28 <I2C_Slave_Receive+0x68>
    return TWDR;
    1f1e:	e3 e2       	ldi	r30, 0x23	; 35
    1f20:	f0 e0       	ldi	r31, 0x00	; 0
    1f22:	80 81       	ld	r24, Z
    1f24:	8b 83       	std	Y+3, r24	; 0x03
    1f26:	0f c0       	rjmp	.+30     	; 0x1f46 <I2C_Slave_Receive+0x86>

    // Stop or Repeated Start is Received
    if(status == STOP_SLAVE)
    1f28:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2a:	80 3a       	cpi	r24, 0xA0	; 160
    1f2c:	51 f4       	brne	.+20     	; 0x1f42 <I2C_Slave_Receive+0x82>
     {
	SET_BIT(TWCR,TWINT);
    1f2e:	a6 e5       	ldi	r26, 0x56	; 86
    1f30:	b0 e0       	ldi	r27, 0x00	; 0
    1f32:	e6 e5       	ldi	r30, 0x56	; 86
    1f34:	f0 e0       	ldi	r31, 0x00	; 0
    1f36:	80 81       	ld	r24, Z
    1f38:	80 68       	ori	r24, 0x80	; 128
    1f3a:	8c 93       	st	X, r24
	return -1;
    1f3c:	8f ef       	ldi	r24, 0xFF	; 255
    1f3e:	8b 83       	std	Y+3, r24	; 0x03
    1f40:	02 c0       	rjmp	.+4      	; 0x1f46 <I2C_Slave_Receive+0x86>
     }
    else return -2;
    1f42:	8e ef       	ldi	r24, 0xFE	; 254
    1f44:	8b 83       	std	Y+3, r24	; 0x03
    1f46:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1f48:	0f 90       	pop	r0
    1f4a:	0f 90       	pop	r0
    1f4c:	0f 90       	pop	r0
    1f4e:	cf 91       	pop	r28
    1f50:	df 91       	pop	r29
    1f52:	08 95       	ret

00001f54 <DIO_SetPinDir>:
#include "DIO.h"

// DIO_SetPinDir is function that set a pin direction depending on parameter and return error indicator
unit8 DIO_SetPinDir(channel_type channel,DDR_Direction direction)
{
    1f54:	df 93       	push	r29
    1f56:	cf 93       	push	r28
    1f58:	00 d0       	rcall	.+0      	; 0x1f5a <DIO_SetPinDir+0x6>
    1f5a:	0f 92       	push	r0
    1f5c:	cd b7       	in	r28, 0x3d	; 61
    1f5e:	de b7       	in	r29, 0x3e	; 62
    1f60:	8a 83       	std	Y+2, r24	; 0x02
    1f62:	6b 83       	std	Y+3, r22	; 0x03
	unit8 Error = 0;
    1f64:	19 82       	std	Y+1, r1	; 0x01
	if(channel >= PORTA_0 &&  channel <= PORTA_7 )
    1f66:	8a 81       	ldd	r24, Y+2	; 0x02
    1f68:	88 30       	cpi	r24, 0x08	; 8
    1f6a:	08 f0       	brcs	.+2      	; 0x1f6e <DIO_SetPinDir+0x1a>
    1f6c:	6f c0       	rjmp	.+222    	; 0x204c <DIO_SetPinDir+0xf8>
	{
		if(direction == OUTPUT )
    1f6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f70:	81 30       	cpi	r24, 0x01	; 1
    1f72:	a1 f4       	brne	.+40     	; 0x1f9c <DIO_SetPinDir+0x48>
		{
			SET_BIT(DDRA,(channel - PORTA_0));
    1f74:	aa e3       	ldi	r26, 0x3A	; 58
    1f76:	b0 e0       	ldi	r27, 0x00	; 0
    1f78:	ea e3       	ldi	r30, 0x3A	; 58
    1f7a:	f0 e0       	ldi	r31, 0x00	; 0
    1f7c:	80 81       	ld	r24, Z
    1f7e:	48 2f       	mov	r20, r24
    1f80:	8a 81       	ldd	r24, Y+2	; 0x02
    1f82:	28 2f       	mov	r18, r24
    1f84:	30 e0       	ldi	r19, 0x00	; 0
    1f86:	81 e0       	ldi	r24, 0x01	; 1
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	02 2e       	mov	r0, r18
    1f8c:	02 c0       	rjmp	.+4      	; 0x1f92 <DIO_SetPinDir+0x3e>
    1f8e:	88 0f       	add	r24, r24
    1f90:	99 1f       	adc	r25, r25
    1f92:	0a 94       	dec	r0
    1f94:	e2 f7       	brpl	.-8      	; 0x1f8e <DIO_SetPinDir+0x3a>
    1f96:	84 2b       	or	r24, r20
    1f98:	8c 93       	st	X, r24
    1f9a:	ec c1       	rjmp	.+984    	; 0x2374 <DIO_SetPinDir+0x420>
		}
		else if (direction == INPUT)
    1f9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9e:	88 23       	and	r24, r24
    1fa0:	41 f5       	brne	.+80     	; 0x1ff2 <DIO_SetPinDir+0x9e>
		{
			CLR_BIT(DDRA,(channel - PORTA_0));
    1fa2:	aa e3       	ldi	r26, 0x3A	; 58
    1fa4:	b0 e0       	ldi	r27, 0x00	; 0
    1fa6:	ea e3       	ldi	r30, 0x3A	; 58
    1fa8:	f0 e0       	ldi	r31, 0x00	; 0
    1faa:	80 81       	ld	r24, Z
    1fac:	48 2f       	mov	r20, r24
    1fae:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb0:	28 2f       	mov	r18, r24
    1fb2:	30 e0       	ldi	r19, 0x00	; 0
    1fb4:	81 e0       	ldi	r24, 0x01	; 1
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	02 c0       	rjmp	.+4      	; 0x1fbe <DIO_SetPinDir+0x6a>
    1fba:	88 0f       	add	r24, r24
    1fbc:	99 1f       	adc	r25, r25
    1fbe:	2a 95       	dec	r18
    1fc0:	e2 f7       	brpl	.-8      	; 0x1fba <DIO_SetPinDir+0x66>
    1fc2:	80 95       	com	r24
    1fc4:	84 23       	and	r24, r20
    1fc6:	8c 93       	st	X, r24
			CLR_BIT(PORTA,(channel - PORTA_0));
    1fc8:	ab e3       	ldi	r26, 0x3B	; 59
    1fca:	b0 e0       	ldi	r27, 0x00	; 0
    1fcc:	eb e3       	ldi	r30, 0x3B	; 59
    1fce:	f0 e0       	ldi	r31, 0x00	; 0
    1fd0:	80 81       	ld	r24, Z
    1fd2:	48 2f       	mov	r20, r24
    1fd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd6:	28 2f       	mov	r18, r24
    1fd8:	30 e0       	ldi	r19, 0x00	; 0
    1fda:	81 e0       	ldi	r24, 0x01	; 1
    1fdc:	90 e0       	ldi	r25, 0x00	; 0
    1fde:	02 2e       	mov	r0, r18
    1fe0:	02 c0       	rjmp	.+4      	; 0x1fe6 <DIO_SetPinDir+0x92>
    1fe2:	88 0f       	add	r24, r24
    1fe4:	99 1f       	adc	r25, r25
    1fe6:	0a 94       	dec	r0
    1fe8:	e2 f7       	brpl	.-8      	; 0x1fe2 <DIO_SetPinDir+0x8e>
    1fea:	80 95       	com	r24
    1fec:	84 23       	and	r24, r20
    1fee:	8c 93       	st	X, r24
    1ff0:	c1 c1       	rjmp	.+898    	; 0x2374 <DIO_SetPinDir+0x420>
		}
		else if (direction == INPUT_PULLUP)
    1ff2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff4:	82 30       	cpi	r24, 0x02	; 2
    1ff6:	39 f5       	brne	.+78     	; 0x2046 <DIO_SetPinDir+0xf2>
		{
			CLR_BIT(DDRA,(channel - PORTA_0));
    1ff8:	aa e3       	ldi	r26, 0x3A	; 58
    1ffa:	b0 e0       	ldi	r27, 0x00	; 0
    1ffc:	ea e3       	ldi	r30, 0x3A	; 58
    1ffe:	f0 e0       	ldi	r31, 0x00	; 0
    2000:	80 81       	ld	r24, Z
    2002:	48 2f       	mov	r20, r24
    2004:	8a 81       	ldd	r24, Y+2	; 0x02
    2006:	28 2f       	mov	r18, r24
    2008:	30 e0       	ldi	r19, 0x00	; 0
    200a:	81 e0       	ldi	r24, 0x01	; 1
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	02 c0       	rjmp	.+4      	; 0x2014 <DIO_SetPinDir+0xc0>
    2010:	88 0f       	add	r24, r24
    2012:	99 1f       	adc	r25, r25
    2014:	2a 95       	dec	r18
    2016:	e2 f7       	brpl	.-8      	; 0x2010 <DIO_SetPinDir+0xbc>
    2018:	80 95       	com	r24
    201a:	84 23       	and	r24, r20
    201c:	8c 93       	st	X, r24
			SET_BIT(PORTA,(channel - PORTA_0));
    201e:	ab e3       	ldi	r26, 0x3B	; 59
    2020:	b0 e0       	ldi	r27, 0x00	; 0
    2022:	eb e3       	ldi	r30, 0x3B	; 59
    2024:	f0 e0       	ldi	r31, 0x00	; 0
    2026:	80 81       	ld	r24, Z
    2028:	48 2f       	mov	r20, r24
    202a:	8a 81       	ldd	r24, Y+2	; 0x02
    202c:	28 2f       	mov	r18, r24
    202e:	30 e0       	ldi	r19, 0x00	; 0
    2030:	81 e0       	ldi	r24, 0x01	; 1
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	02 2e       	mov	r0, r18
    2036:	02 c0       	rjmp	.+4      	; 0x203c <DIO_SetPinDir+0xe8>
    2038:	88 0f       	add	r24, r24
    203a:	99 1f       	adc	r25, r25
    203c:	0a 94       	dec	r0
    203e:	e2 f7       	brpl	.-8      	; 0x2038 <DIO_SetPinDir+0xe4>
    2040:	84 2b       	or	r24, r20
    2042:	8c 93       	st	X, r24
    2044:	97 c1       	rjmp	.+814    	; 0x2374 <DIO_SetPinDir+0x420>
		}
		else
		{
			Error = 1;
    2046:	81 e0       	ldi	r24, 0x01	; 1
    2048:	89 83       	std	Y+1, r24	; 0x01
    204a:	94 c1       	rjmp	.+808    	; 0x2374 <DIO_SetPinDir+0x420>
		}

	}
	else if(channel >= PORTB_0 &&  channel <= PORTB_7 )
    204c:	8a 81       	ldd	r24, Y+2	; 0x02
    204e:	88 30       	cpi	r24, 0x08	; 8
    2050:	08 f4       	brcc	.+2      	; 0x2054 <DIO_SetPinDir+0x100>
    2052:	82 c0       	rjmp	.+260    	; 0x2158 <DIO_SetPinDir+0x204>
    2054:	8a 81       	ldd	r24, Y+2	; 0x02
    2056:	80 31       	cpi	r24, 0x10	; 16
    2058:	08 f0       	brcs	.+2      	; 0x205c <DIO_SetPinDir+0x108>
    205a:	7e c0       	rjmp	.+252    	; 0x2158 <DIO_SetPinDir+0x204>
	{
		if(direction == OUTPUT )
    205c:	8b 81       	ldd	r24, Y+3	; 0x03
    205e:	81 30       	cpi	r24, 0x01	; 1
    2060:	b9 f4       	brne	.+46     	; 0x2090 <DIO_SetPinDir+0x13c>
		{
			SET_BIT(DDRB,(channel - PORTB_0));
    2062:	a7 e3       	ldi	r26, 0x37	; 55
    2064:	b0 e0       	ldi	r27, 0x00	; 0
    2066:	e7 e3       	ldi	r30, 0x37	; 55
    2068:	f0 e0       	ldi	r31, 0x00	; 0
    206a:	80 81       	ld	r24, Z
    206c:	48 2f       	mov	r20, r24
    206e:	8a 81       	ldd	r24, Y+2	; 0x02
    2070:	88 2f       	mov	r24, r24
    2072:	90 e0       	ldi	r25, 0x00	; 0
    2074:	9c 01       	movw	r18, r24
    2076:	28 50       	subi	r18, 0x08	; 8
    2078:	30 40       	sbci	r19, 0x00	; 0
    207a:	81 e0       	ldi	r24, 0x01	; 1
    207c:	90 e0       	ldi	r25, 0x00	; 0
    207e:	02 2e       	mov	r0, r18
    2080:	02 c0       	rjmp	.+4      	; 0x2086 <DIO_SetPinDir+0x132>
    2082:	88 0f       	add	r24, r24
    2084:	99 1f       	adc	r25, r25
    2086:	0a 94       	dec	r0
    2088:	e2 f7       	brpl	.-8      	; 0x2082 <DIO_SetPinDir+0x12e>
    208a:	84 2b       	or	r24, r20
    208c:	8c 93       	st	X, r24
    208e:	72 c1       	rjmp	.+740    	; 0x2374 <DIO_SetPinDir+0x420>
		}
		else if (direction == INPUT)
    2090:	8b 81       	ldd	r24, Y+3	; 0x03
    2092:	88 23       	and	r24, r24
    2094:	71 f5       	brne	.+92     	; 0x20f2 <DIO_SetPinDir+0x19e>
		{
			CLR_BIT(DDRB,(channel - PORTB_0));
    2096:	a7 e3       	ldi	r26, 0x37	; 55
    2098:	b0 e0       	ldi	r27, 0x00	; 0
    209a:	e7 e3       	ldi	r30, 0x37	; 55
    209c:	f0 e0       	ldi	r31, 0x00	; 0
    209e:	80 81       	ld	r24, Z
    20a0:	48 2f       	mov	r20, r24
    20a2:	8a 81       	ldd	r24, Y+2	; 0x02
    20a4:	88 2f       	mov	r24, r24
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	9c 01       	movw	r18, r24
    20aa:	28 50       	subi	r18, 0x08	; 8
    20ac:	30 40       	sbci	r19, 0x00	; 0
    20ae:	81 e0       	ldi	r24, 0x01	; 1
    20b0:	90 e0       	ldi	r25, 0x00	; 0
    20b2:	02 c0       	rjmp	.+4      	; 0x20b8 <DIO_SetPinDir+0x164>
    20b4:	88 0f       	add	r24, r24
    20b6:	99 1f       	adc	r25, r25
    20b8:	2a 95       	dec	r18
    20ba:	e2 f7       	brpl	.-8      	; 0x20b4 <DIO_SetPinDir+0x160>
    20bc:	80 95       	com	r24
    20be:	84 23       	and	r24, r20
    20c0:	8c 93       	st	X, r24
			CLR_BIT(PORTB,(channel - PORTB_0));
    20c2:	a8 e3       	ldi	r26, 0x38	; 56
    20c4:	b0 e0       	ldi	r27, 0x00	; 0
    20c6:	e8 e3       	ldi	r30, 0x38	; 56
    20c8:	f0 e0       	ldi	r31, 0x00	; 0
    20ca:	80 81       	ld	r24, Z
    20cc:	48 2f       	mov	r20, r24
    20ce:	8a 81       	ldd	r24, Y+2	; 0x02
    20d0:	88 2f       	mov	r24, r24
    20d2:	90 e0       	ldi	r25, 0x00	; 0
    20d4:	9c 01       	movw	r18, r24
    20d6:	28 50       	subi	r18, 0x08	; 8
    20d8:	30 40       	sbci	r19, 0x00	; 0
    20da:	81 e0       	ldi	r24, 0x01	; 1
    20dc:	90 e0       	ldi	r25, 0x00	; 0
    20de:	02 2e       	mov	r0, r18
    20e0:	02 c0       	rjmp	.+4      	; 0x20e6 <DIO_SetPinDir+0x192>
    20e2:	88 0f       	add	r24, r24
    20e4:	99 1f       	adc	r25, r25
    20e6:	0a 94       	dec	r0
    20e8:	e2 f7       	brpl	.-8      	; 0x20e2 <DIO_SetPinDir+0x18e>
    20ea:	80 95       	com	r24
    20ec:	84 23       	and	r24, r20
    20ee:	8c 93       	st	X, r24
    20f0:	41 c1       	rjmp	.+642    	; 0x2374 <DIO_SetPinDir+0x420>
		}
		else if (direction == INPUT_PULLUP)
    20f2:	8b 81       	ldd	r24, Y+3	; 0x03
    20f4:	82 30       	cpi	r24, 0x02	; 2
    20f6:	69 f5       	brne	.+90     	; 0x2152 <DIO_SetPinDir+0x1fe>
		{
			CLR_BIT(DDRB,(channel - PORTB_0));
    20f8:	a7 e3       	ldi	r26, 0x37	; 55
    20fa:	b0 e0       	ldi	r27, 0x00	; 0
    20fc:	e7 e3       	ldi	r30, 0x37	; 55
    20fe:	f0 e0       	ldi	r31, 0x00	; 0
    2100:	80 81       	ld	r24, Z
    2102:	48 2f       	mov	r20, r24
    2104:	8a 81       	ldd	r24, Y+2	; 0x02
    2106:	88 2f       	mov	r24, r24
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	9c 01       	movw	r18, r24
    210c:	28 50       	subi	r18, 0x08	; 8
    210e:	30 40       	sbci	r19, 0x00	; 0
    2110:	81 e0       	ldi	r24, 0x01	; 1
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	02 c0       	rjmp	.+4      	; 0x211a <DIO_SetPinDir+0x1c6>
    2116:	88 0f       	add	r24, r24
    2118:	99 1f       	adc	r25, r25
    211a:	2a 95       	dec	r18
    211c:	e2 f7       	brpl	.-8      	; 0x2116 <DIO_SetPinDir+0x1c2>
    211e:	80 95       	com	r24
    2120:	84 23       	and	r24, r20
    2122:	8c 93       	st	X, r24
			SET_BIT(PORTB,(channel - PORTB_0));
    2124:	a8 e3       	ldi	r26, 0x38	; 56
    2126:	b0 e0       	ldi	r27, 0x00	; 0
    2128:	e8 e3       	ldi	r30, 0x38	; 56
    212a:	f0 e0       	ldi	r31, 0x00	; 0
    212c:	80 81       	ld	r24, Z
    212e:	48 2f       	mov	r20, r24
    2130:	8a 81       	ldd	r24, Y+2	; 0x02
    2132:	88 2f       	mov	r24, r24
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	9c 01       	movw	r18, r24
    2138:	28 50       	subi	r18, 0x08	; 8
    213a:	30 40       	sbci	r19, 0x00	; 0
    213c:	81 e0       	ldi	r24, 0x01	; 1
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	02 2e       	mov	r0, r18
    2142:	02 c0       	rjmp	.+4      	; 0x2148 <DIO_SetPinDir+0x1f4>
    2144:	88 0f       	add	r24, r24
    2146:	99 1f       	adc	r25, r25
    2148:	0a 94       	dec	r0
    214a:	e2 f7       	brpl	.-8      	; 0x2144 <DIO_SetPinDir+0x1f0>
    214c:	84 2b       	or	r24, r20
    214e:	8c 93       	st	X, r24
    2150:	11 c1       	rjmp	.+546    	; 0x2374 <DIO_SetPinDir+0x420>
		}
		else
		{
			Error = 1;
    2152:	81 e0       	ldi	r24, 0x01	; 1
    2154:	89 83       	std	Y+1, r24	; 0x01
    2156:	0e c1       	rjmp	.+540    	; 0x2374 <DIO_SetPinDir+0x420>
		}
	}
	else if(channel >= PORTC_0 &&  channel <= PORTC_7 )
    2158:	8a 81       	ldd	r24, Y+2	; 0x02
    215a:	80 31       	cpi	r24, 0x10	; 16
    215c:	08 f4       	brcc	.+2      	; 0x2160 <DIO_SetPinDir+0x20c>
    215e:	82 c0       	rjmp	.+260    	; 0x2264 <DIO_SetPinDir+0x310>
    2160:	8a 81       	ldd	r24, Y+2	; 0x02
    2162:	88 31       	cpi	r24, 0x18	; 24
    2164:	08 f0       	brcs	.+2      	; 0x2168 <DIO_SetPinDir+0x214>
    2166:	7e c0       	rjmp	.+252    	; 0x2264 <DIO_SetPinDir+0x310>
	{
		if(direction == OUTPUT )
    2168:	8b 81       	ldd	r24, Y+3	; 0x03
    216a:	81 30       	cpi	r24, 0x01	; 1
    216c:	b9 f4       	brne	.+46     	; 0x219c <DIO_SetPinDir+0x248>
		{
			SET_BIT(DDRC,(channel - PORTC_0));
    216e:	a4 e3       	ldi	r26, 0x34	; 52
    2170:	b0 e0       	ldi	r27, 0x00	; 0
    2172:	e4 e3       	ldi	r30, 0x34	; 52
    2174:	f0 e0       	ldi	r31, 0x00	; 0
    2176:	80 81       	ld	r24, Z
    2178:	48 2f       	mov	r20, r24
    217a:	8a 81       	ldd	r24, Y+2	; 0x02
    217c:	88 2f       	mov	r24, r24
    217e:	90 e0       	ldi	r25, 0x00	; 0
    2180:	9c 01       	movw	r18, r24
    2182:	20 51       	subi	r18, 0x10	; 16
    2184:	30 40       	sbci	r19, 0x00	; 0
    2186:	81 e0       	ldi	r24, 0x01	; 1
    2188:	90 e0       	ldi	r25, 0x00	; 0
    218a:	02 2e       	mov	r0, r18
    218c:	02 c0       	rjmp	.+4      	; 0x2192 <DIO_SetPinDir+0x23e>
    218e:	88 0f       	add	r24, r24
    2190:	99 1f       	adc	r25, r25
    2192:	0a 94       	dec	r0
    2194:	e2 f7       	brpl	.-8      	; 0x218e <DIO_SetPinDir+0x23a>
    2196:	84 2b       	or	r24, r20
    2198:	8c 93       	st	X, r24
    219a:	ec c0       	rjmp	.+472    	; 0x2374 <DIO_SetPinDir+0x420>
		}
		else if (direction == INPUT)
    219c:	8b 81       	ldd	r24, Y+3	; 0x03
    219e:	88 23       	and	r24, r24
    21a0:	71 f5       	brne	.+92     	; 0x21fe <DIO_SetPinDir+0x2aa>
		{
			CLR_BIT(DDRC,(channel - PORTC_0));
    21a2:	a4 e3       	ldi	r26, 0x34	; 52
    21a4:	b0 e0       	ldi	r27, 0x00	; 0
    21a6:	e4 e3       	ldi	r30, 0x34	; 52
    21a8:	f0 e0       	ldi	r31, 0x00	; 0
    21aa:	80 81       	ld	r24, Z
    21ac:	48 2f       	mov	r20, r24
    21ae:	8a 81       	ldd	r24, Y+2	; 0x02
    21b0:	88 2f       	mov	r24, r24
    21b2:	90 e0       	ldi	r25, 0x00	; 0
    21b4:	9c 01       	movw	r18, r24
    21b6:	20 51       	subi	r18, 0x10	; 16
    21b8:	30 40       	sbci	r19, 0x00	; 0
    21ba:	81 e0       	ldi	r24, 0x01	; 1
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	02 c0       	rjmp	.+4      	; 0x21c4 <DIO_SetPinDir+0x270>
    21c0:	88 0f       	add	r24, r24
    21c2:	99 1f       	adc	r25, r25
    21c4:	2a 95       	dec	r18
    21c6:	e2 f7       	brpl	.-8      	; 0x21c0 <DIO_SetPinDir+0x26c>
    21c8:	80 95       	com	r24
    21ca:	84 23       	and	r24, r20
    21cc:	8c 93       	st	X, r24
			CLR_BIT(PORTC,(channel - PORTC_0));
    21ce:	a5 e3       	ldi	r26, 0x35	; 53
    21d0:	b0 e0       	ldi	r27, 0x00	; 0
    21d2:	e5 e3       	ldi	r30, 0x35	; 53
    21d4:	f0 e0       	ldi	r31, 0x00	; 0
    21d6:	80 81       	ld	r24, Z
    21d8:	48 2f       	mov	r20, r24
    21da:	8a 81       	ldd	r24, Y+2	; 0x02
    21dc:	88 2f       	mov	r24, r24
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	9c 01       	movw	r18, r24
    21e2:	20 51       	subi	r18, 0x10	; 16
    21e4:	30 40       	sbci	r19, 0x00	; 0
    21e6:	81 e0       	ldi	r24, 0x01	; 1
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	02 2e       	mov	r0, r18
    21ec:	02 c0       	rjmp	.+4      	; 0x21f2 <DIO_SetPinDir+0x29e>
    21ee:	88 0f       	add	r24, r24
    21f0:	99 1f       	adc	r25, r25
    21f2:	0a 94       	dec	r0
    21f4:	e2 f7       	brpl	.-8      	; 0x21ee <DIO_SetPinDir+0x29a>
    21f6:	80 95       	com	r24
    21f8:	84 23       	and	r24, r20
    21fa:	8c 93       	st	X, r24
    21fc:	bb c0       	rjmp	.+374    	; 0x2374 <DIO_SetPinDir+0x420>
		}
		else if (direction == INPUT_PULLUP)
    21fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2200:	82 30       	cpi	r24, 0x02	; 2
    2202:	69 f5       	brne	.+90     	; 0x225e <DIO_SetPinDir+0x30a>
		{
			CLR_BIT(DDRC,(channel - PORTC_0));
    2204:	a4 e3       	ldi	r26, 0x34	; 52
    2206:	b0 e0       	ldi	r27, 0x00	; 0
    2208:	e4 e3       	ldi	r30, 0x34	; 52
    220a:	f0 e0       	ldi	r31, 0x00	; 0
    220c:	80 81       	ld	r24, Z
    220e:	48 2f       	mov	r20, r24
    2210:	8a 81       	ldd	r24, Y+2	; 0x02
    2212:	88 2f       	mov	r24, r24
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	9c 01       	movw	r18, r24
    2218:	20 51       	subi	r18, 0x10	; 16
    221a:	30 40       	sbci	r19, 0x00	; 0
    221c:	81 e0       	ldi	r24, 0x01	; 1
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	02 c0       	rjmp	.+4      	; 0x2226 <DIO_SetPinDir+0x2d2>
    2222:	88 0f       	add	r24, r24
    2224:	99 1f       	adc	r25, r25
    2226:	2a 95       	dec	r18
    2228:	e2 f7       	brpl	.-8      	; 0x2222 <DIO_SetPinDir+0x2ce>
    222a:	80 95       	com	r24
    222c:	84 23       	and	r24, r20
    222e:	8c 93       	st	X, r24
			SET_BIT(PORTC,(channel - PORTC_0));
    2230:	a5 e3       	ldi	r26, 0x35	; 53
    2232:	b0 e0       	ldi	r27, 0x00	; 0
    2234:	e5 e3       	ldi	r30, 0x35	; 53
    2236:	f0 e0       	ldi	r31, 0x00	; 0
    2238:	80 81       	ld	r24, Z
    223a:	48 2f       	mov	r20, r24
    223c:	8a 81       	ldd	r24, Y+2	; 0x02
    223e:	88 2f       	mov	r24, r24
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	9c 01       	movw	r18, r24
    2244:	20 51       	subi	r18, 0x10	; 16
    2246:	30 40       	sbci	r19, 0x00	; 0
    2248:	81 e0       	ldi	r24, 0x01	; 1
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	02 2e       	mov	r0, r18
    224e:	02 c0       	rjmp	.+4      	; 0x2254 <DIO_SetPinDir+0x300>
    2250:	88 0f       	add	r24, r24
    2252:	99 1f       	adc	r25, r25
    2254:	0a 94       	dec	r0
    2256:	e2 f7       	brpl	.-8      	; 0x2250 <DIO_SetPinDir+0x2fc>
    2258:	84 2b       	or	r24, r20
    225a:	8c 93       	st	X, r24
    225c:	8b c0       	rjmp	.+278    	; 0x2374 <DIO_SetPinDir+0x420>
		}
		else
		{
			Error = 1;
    225e:	81 e0       	ldi	r24, 0x01	; 1
    2260:	89 83       	std	Y+1, r24	; 0x01
    2262:	88 c0       	rjmp	.+272    	; 0x2374 <DIO_SetPinDir+0x420>
		}
	}
	else if(channel >= PORTD_0 &&  channel <= PORTD_7 )
    2264:	8a 81       	ldd	r24, Y+2	; 0x02
    2266:	88 31       	cpi	r24, 0x18	; 24
    2268:	08 f4       	brcc	.+2      	; 0x226c <DIO_SetPinDir+0x318>
    226a:	82 c0       	rjmp	.+260    	; 0x2370 <DIO_SetPinDir+0x41c>
    226c:	8a 81       	ldd	r24, Y+2	; 0x02
    226e:	80 32       	cpi	r24, 0x20	; 32
    2270:	08 f0       	brcs	.+2      	; 0x2274 <DIO_SetPinDir+0x320>
    2272:	7e c0       	rjmp	.+252    	; 0x2370 <DIO_SetPinDir+0x41c>
	{
		if(direction == OUTPUT )
    2274:	8b 81       	ldd	r24, Y+3	; 0x03
    2276:	81 30       	cpi	r24, 0x01	; 1
    2278:	b9 f4       	brne	.+46     	; 0x22a8 <DIO_SetPinDir+0x354>
		{
			SET_BIT(DDRD,(channel - PORTD_0));
    227a:	a1 e3       	ldi	r26, 0x31	; 49
    227c:	b0 e0       	ldi	r27, 0x00	; 0
    227e:	e1 e3       	ldi	r30, 0x31	; 49
    2280:	f0 e0       	ldi	r31, 0x00	; 0
    2282:	80 81       	ld	r24, Z
    2284:	48 2f       	mov	r20, r24
    2286:	8a 81       	ldd	r24, Y+2	; 0x02
    2288:	88 2f       	mov	r24, r24
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	9c 01       	movw	r18, r24
    228e:	28 51       	subi	r18, 0x18	; 24
    2290:	30 40       	sbci	r19, 0x00	; 0
    2292:	81 e0       	ldi	r24, 0x01	; 1
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	02 2e       	mov	r0, r18
    2298:	02 c0       	rjmp	.+4      	; 0x229e <DIO_SetPinDir+0x34a>
    229a:	88 0f       	add	r24, r24
    229c:	99 1f       	adc	r25, r25
    229e:	0a 94       	dec	r0
    22a0:	e2 f7       	brpl	.-8      	; 0x229a <DIO_SetPinDir+0x346>
    22a2:	84 2b       	or	r24, r20
    22a4:	8c 93       	st	X, r24
    22a6:	66 c0       	rjmp	.+204    	; 0x2374 <DIO_SetPinDir+0x420>
		}
		else if (direction == INPUT)
    22a8:	8b 81       	ldd	r24, Y+3	; 0x03
    22aa:	88 23       	and	r24, r24
    22ac:	71 f5       	brne	.+92     	; 0x230a <DIO_SetPinDir+0x3b6>
		{
			CLR_BIT(DDRD,(channel - PORTD_0));
    22ae:	a1 e3       	ldi	r26, 0x31	; 49
    22b0:	b0 e0       	ldi	r27, 0x00	; 0
    22b2:	e1 e3       	ldi	r30, 0x31	; 49
    22b4:	f0 e0       	ldi	r31, 0x00	; 0
    22b6:	80 81       	ld	r24, Z
    22b8:	48 2f       	mov	r20, r24
    22ba:	8a 81       	ldd	r24, Y+2	; 0x02
    22bc:	88 2f       	mov	r24, r24
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	9c 01       	movw	r18, r24
    22c2:	28 51       	subi	r18, 0x18	; 24
    22c4:	30 40       	sbci	r19, 0x00	; 0
    22c6:	81 e0       	ldi	r24, 0x01	; 1
    22c8:	90 e0       	ldi	r25, 0x00	; 0
    22ca:	02 c0       	rjmp	.+4      	; 0x22d0 <DIO_SetPinDir+0x37c>
    22cc:	88 0f       	add	r24, r24
    22ce:	99 1f       	adc	r25, r25
    22d0:	2a 95       	dec	r18
    22d2:	e2 f7       	brpl	.-8      	; 0x22cc <DIO_SetPinDir+0x378>
    22d4:	80 95       	com	r24
    22d6:	84 23       	and	r24, r20
    22d8:	8c 93       	st	X, r24
			CLR_BIT(PORTD,(channel - PORTD_0));
    22da:	a2 e3       	ldi	r26, 0x32	; 50
    22dc:	b0 e0       	ldi	r27, 0x00	; 0
    22de:	e2 e3       	ldi	r30, 0x32	; 50
    22e0:	f0 e0       	ldi	r31, 0x00	; 0
    22e2:	80 81       	ld	r24, Z
    22e4:	48 2f       	mov	r20, r24
    22e6:	8a 81       	ldd	r24, Y+2	; 0x02
    22e8:	88 2f       	mov	r24, r24
    22ea:	90 e0       	ldi	r25, 0x00	; 0
    22ec:	9c 01       	movw	r18, r24
    22ee:	28 51       	subi	r18, 0x18	; 24
    22f0:	30 40       	sbci	r19, 0x00	; 0
    22f2:	81 e0       	ldi	r24, 0x01	; 1
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	02 2e       	mov	r0, r18
    22f8:	02 c0       	rjmp	.+4      	; 0x22fe <DIO_SetPinDir+0x3aa>
    22fa:	88 0f       	add	r24, r24
    22fc:	99 1f       	adc	r25, r25
    22fe:	0a 94       	dec	r0
    2300:	e2 f7       	brpl	.-8      	; 0x22fa <DIO_SetPinDir+0x3a6>
    2302:	80 95       	com	r24
    2304:	84 23       	and	r24, r20
    2306:	8c 93       	st	X, r24
    2308:	35 c0       	rjmp	.+106    	; 0x2374 <DIO_SetPinDir+0x420>
		}
		else if (direction == INPUT_PULLUP)
    230a:	8b 81       	ldd	r24, Y+3	; 0x03
    230c:	82 30       	cpi	r24, 0x02	; 2
    230e:	69 f5       	brne	.+90     	; 0x236a <DIO_SetPinDir+0x416>
		{
			CLR_BIT(DDRD,(channel - PORTD_0));
    2310:	a1 e3       	ldi	r26, 0x31	; 49
    2312:	b0 e0       	ldi	r27, 0x00	; 0
    2314:	e1 e3       	ldi	r30, 0x31	; 49
    2316:	f0 e0       	ldi	r31, 0x00	; 0
    2318:	80 81       	ld	r24, Z
    231a:	48 2f       	mov	r20, r24
    231c:	8a 81       	ldd	r24, Y+2	; 0x02
    231e:	88 2f       	mov	r24, r24
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	9c 01       	movw	r18, r24
    2324:	28 51       	subi	r18, 0x18	; 24
    2326:	30 40       	sbci	r19, 0x00	; 0
    2328:	81 e0       	ldi	r24, 0x01	; 1
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	02 c0       	rjmp	.+4      	; 0x2332 <DIO_SetPinDir+0x3de>
    232e:	88 0f       	add	r24, r24
    2330:	99 1f       	adc	r25, r25
    2332:	2a 95       	dec	r18
    2334:	e2 f7       	brpl	.-8      	; 0x232e <DIO_SetPinDir+0x3da>
    2336:	80 95       	com	r24
    2338:	84 23       	and	r24, r20
    233a:	8c 93       	st	X, r24
			SET_BIT(PORTD,(channel - PORTD_0));
    233c:	a2 e3       	ldi	r26, 0x32	; 50
    233e:	b0 e0       	ldi	r27, 0x00	; 0
    2340:	e2 e3       	ldi	r30, 0x32	; 50
    2342:	f0 e0       	ldi	r31, 0x00	; 0
    2344:	80 81       	ld	r24, Z
    2346:	48 2f       	mov	r20, r24
    2348:	8a 81       	ldd	r24, Y+2	; 0x02
    234a:	88 2f       	mov	r24, r24
    234c:	90 e0       	ldi	r25, 0x00	; 0
    234e:	9c 01       	movw	r18, r24
    2350:	28 51       	subi	r18, 0x18	; 24
    2352:	30 40       	sbci	r19, 0x00	; 0
    2354:	81 e0       	ldi	r24, 0x01	; 1
    2356:	90 e0       	ldi	r25, 0x00	; 0
    2358:	02 2e       	mov	r0, r18
    235a:	02 c0       	rjmp	.+4      	; 0x2360 <DIO_SetPinDir+0x40c>
    235c:	88 0f       	add	r24, r24
    235e:	99 1f       	adc	r25, r25
    2360:	0a 94       	dec	r0
    2362:	e2 f7       	brpl	.-8      	; 0x235c <DIO_SetPinDir+0x408>
    2364:	84 2b       	or	r24, r20
    2366:	8c 93       	st	X, r24
    2368:	05 c0       	rjmp	.+10     	; 0x2374 <DIO_SetPinDir+0x420>
		}
		else
		{
			Error = 1;
    236a:	81 e0       	ldi	r24, 0x01	; 1
    236c:	89 83       	std	Y+1, r24	; 0x01
    236e:	02 c0       	rjmp	.+4      	; 0x2374 <DIO_SetPinDir+0x420>
		}
	}
	else
	{
		Error = 1;
    2370:	81 e0       	ldi	r24, 0x01	; 1
    2372:	89 83       	std	Y+1, r24	; 0x01
	}

	return Error;
    2374:	89 81       	ldd	r24, Y+1	; 0x01
}
    2376:	0f 90       	pop	r0
    2378:	0f 90       	pop	r0
    237a:	0f 90       	pop	r0
    237c:	cf 91       	pop	r28
    237e:	df 91       	pop	r29
    2380:	08 95       	ret

00002382 <DIO_Write>:
// Function used to write on Digital Output Pin either HIGH or LOW
void DIO_Write(channel_type channel, DIO_Level level )
{
    2382:	df 93       	push	r29
    2384:	cf 93       	push	r28
    2386:	00 d0       	rcall	.+0      	; 0x2388 <DIO_Write+0x6>
    2388:	00 d0       	rcall	.+0      	; 0x238a <DIO_Write+0x8>
    238a:	cd b7       	in	r28, 0x3d	; 61
    238c:	de b7       	in	r29, 0x3e	; 62
    238e:	8b 83       	std	Y+3, r24	; 0x03
    2390:	6c 83       	std	Y+4, r22	; 0x04
	DIO_Port Port = channel/8;
    2392:	8b 81       	ldd	r24, Y+3	; 0x03
    2394:	86 95       	lsr	r24
    2396:	86 95       	lsr	r24
    2398:	86 95       	lsr	r24
    239a:	8a 83       	std	Y+2, r24	; 0x02
	DIO_Pin Pin = channel%8;
    239c:	8b 81       	ldd	r24, Y+3	; 0x03
    239e:	87 70       	andi	r24, 0x07	; 7
    23a0:	89 83       	std	Y+1, r24	; 0x01
	if(Port == PORT_A)
    23a2:	8a 81       	ldd	r24, Y+2	; 0x02
    23a4:	88 23       	and	r24, r24
    23a6:	59 f5       	brne	.+86     	; 0x23fe <DIO_Write+0x7c>
	{
	if(level == HIGH) SET_BIT(PORTA,Pin);
    23a8:	8c 81       	ldd	r24, Y+4	; 0x04
    23aa:	81 30       	cpi	r24, 0x01	; 1
    23ac:	a1 f4       	brne	.+40     	; 0x23d6 <DIO_Write+0x54>
    23ae:	ab e3       	ldi	r26, 0x3B	; 59
    23b0:	b0 e0       	ldi	r27, 0x00	; 0
    23b2:	eb e3       	ldi	r30, 0x3B	; 59
    23b4:	f0 e0       	ldi	r31, 0x00	; 0
    23b6:	80 81       	ld	r24, Z
    23b8:	48 2f       	mov	r20, r24
    23ba:	89 81       	ldd	r24, Y+1	; 0x01
    23bc:	28 2f       	mov	r18, r24
    23be:	30 e0       	ldi	r19, 0x00	; 0
    23c0:	81 e0       	ldi	r24, 0x01	; 1
    23c2:	90 e0       	ldi	r25, 0x00	; 0
    23c4:	02 2e       	mov	r0, r18
    23c6:	02 c0       	rjmp	.+4      	; 0x23cc <DIO_Write+0x4a>
    23c8:	88 0f       	add	r24, r24
    23ca:	99 1f       	adc	r25, r25
    23cc:	0a 94       	dec	r0
    23ce:	e2 f7       	brpl	.-8      	; 0x23c8 <DIO_Write+0x46>
    23d0:	84 2b       	or	r24, r20
    23d2:	8c 93       	st	X, r24
    23d4:	14 c0       	rjmp	.+40     	; 0x23fe <DIO_Write+0x7c>
	else CLR_BIT(PORTA,Pin);
    23d6:	ab e3       	ldi	r26, 0x3B	; 59
    23d8:	b0 e0       	ldi	r27, 0x00	; 0
    23da:	eb e3       	ldi	r30, 0x3B	; 59
    23dc:	f0 e0       	ldi	r31, 0x00	; 0
    23de:	80 81       	ld	r24, Z
    23e0:	48 2f       	mov	r20, r24
    23e2:	89 81       	ldd	r24, Y+1	; 0x01
    23e4:	28 2f       	mov	r18, r24
    23e6:	30 e0       	ldi	r19, 0x00	; 0
    23e8:	81 e0       	ldi	r24, 0x01	; 1
    23ea:	90 e0       	ldi	r25, 0x00	; 0
    23ec:	02 2e       	mov	r0, r18
    23ee:	02 c0       	rjmp	.+4      	; 0x23f4 <DIO_Write+0x72>
    23f0:	88 0f       	add	r24, r24
    23f2:	99 1f       	adc	r25, r25
    23f4:	0a 94       	dec	r0
    23f6:	e2 f7       	brpl	.-8      	; 0x23f0 <DIO_Write+0x6e>
    23f8:	80 95       	com	r24
    23fa:	84 23       	and	r24, r20
    23fc:	8c 93       	st	X, r24
	}
	if(Port == PORT_B)
    23fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2400:	81 30       	cpi	r24, 0x01	; 1
    2402:	59 f5       	brne	.+86     	; 0x245a <DIO_Write+0xd8>
	{
	if(level == HIGH) SET_BIT(PORTB,Pin);
    2404:	8c 81       	ldd	r24, Y+4	; 0x04
    2406:	81 30       	cpi	r24, 0x01	; 1
    2408:	a1 f4       	brne	.+40     	; 0x2432 <DIO_Write+0xb0>
    240a:	a8 e3       	ldi	r26, 0x38	; 56
    240c:	b0 e0       	ldi	r27, 0x00	; 0
    240e:	e8 e3       	ldi	r30, 0x38	; 56
    2410:	f0 e0       	ldi	r31, 0x00	; 0
    2412:	80 81       	ld	r24, Z
    2414:	48 2f       	mov	r20, r24
    2416:	89 81       	ldd	r24, Y+1	; 0x01
    2418:	28 2f       	mov	r18, r24
    241a:	30 e0       	ldi	r19, 0x00	; 0
    241c:	81 e0       	ldi	r24, 0x01	; 1
    241e:	90 e0       	ldi	r25, 0x00	; 0
    2420:	02 2e       	mov	r0, r18
    2422:	02 c0       	rjmp	.+4      	; 0x2428 <DIO_Write+0xa6>
    2424:	88 0f       	add	r24, r24
    2426:	99 1f       	adc	r25, r25
    2428:	0a 94       	dec	r0
    242a:	e2 f7       	brpl	.-8      	; 0x2424 <DIO_Write+0xa2>
    242c:	84 2b       	or	r24, r20
    242e:	8c 93       	st	X, r24
    2430:	14 c0       	rjmp	.+40     	; 0x245a <DIO_Write+0xd8>
	else CLR_BIT(PORTB,Pin);
    2432:	a8 e3       	ldi	r26, 0x38	; 56
    2434:	b0 e0       	ldi	r27, 0x00	; 0
    2436:	e8 e3       	ldi	r30, 0x38	; 56
    2438:	f0 e0       	ldi	r31, 0x00	; 0
    243a:	80 81       	ld	r24, Z
    243c:	48 2f       	mov	r20, r24
    243e:	89 81       	ldd	r24, Y+1	; 0x01
    2440:	28 2f       	mov	r18, r24
    2442:	30 e0       	ldi	r19, 0x00	; 0
    2444:	81 e0       	ldi	r24, 0x01	; 1
    2446:	90 e0       	ldi	r25, 0x00	; 0
    2448:	02 2e       	mov	r0, r18
    244a:	02 c0       	rjmp	.+4      	; 0x2450 <DIO_Write+0xce>
    244c:	88 0f       	add	r24, r24
    244e:	99 1f       	adc	r25, r25
    2450:	0a 94       	dec	r0
    2452:	e2 f7       	brpl	.-8      	; 0x244c <DIO_Write+0xca>
    2454:	80 95       	com	r24
    2456:	84 23       	and	r24, r20
    2458:	8c 93       	st	X, r24
	}
	if(Port == PORT_C)
    245a:	8a 81       	ldd	r24, Y+2	; 0x02
    245c:	82 30       	cpi	r24, 0x02	; 2
    245e:	59 f5       	brne	.+86     	; 0x24b6 <DIO_Write+0x134>
	{
	if(level == HIGH) SET_BIT(PORTC,Pin);
    2460:	8c 81       	ldd	r24, Y+4	; 0x04
    2462:	81 30       	cpi	r24, 0x01	; 1
    2464:	a1 f4       	brne	.+40     	; 0x248e <DIO_Write+0x10c>
    2466:	a5 e3       	ldi	r26, 0x35	; 53
    2468:	b0 e0       	ldi	r27, 0x00	; 0
    246a:	e5 e3       	ldi	r30, 0x35	; 53
    246c:	f0 e0       	ldi	r31, 0x00	; 0
    246e:	80 81       	ld	r24, Z
    2470:	48 2f       	mov	r20, r24
    2472:	89 81       	ldd	r24, Y+1	; 0x01
    2474:	28 2f       	mov	r18, r24
    2476:	30 e0       	ldi	r19, 0x00	; 0
    2478:	81 e0       	ldi	r24, 0x01	; 1
    247a:	90 e0       	ldi	r25, 0x00	; 0
    247c:	02 2e       	mov	r0, r18
    247e:	02 c0       	rjmp	.+4      	; 0x2484 <DIO_Write+0x102>
    2480:	88 0f       	add	r24, r24
    2482:	99 1f       	adc	r25, r25
    2484:	0a 94       	dec	r0
    2486:	e2 f7       	brpl	.-8      	; 0x2480 <DIO_Write+0xfe>
    2488:	84 2b       	or	r24, r20
    248a:	8c 93       	st	X, r24
    248c:	14 c0       	rjmp	.+40     	; 0x24b6 <DIO_Write+0x134>
	else CLR_BIT(PORTC,Pin);
    248e:	a5 e3       	ldi	r26, 0x35	; 53
    2490:	b0 e0       	ldi	r27, 0x00	; 0
    2492:	e5 e3       	ldi	r30, 0x35	; 53
    2494:	f0 e0       	ldi	r31, 0x00	; 0
    2496:	80 81       	ld	r24, Z
    2498:	48 2f       	mov	r20, r24
    249a:	89 81       	ldd	r24, Y+1	; 0x01
    249c:	28 2f       	mov	r18, r24
    249e:	30 e0       	ldi	r19, 0x00	; 0
    24a0:	81 e0       	ldi	r24, 0x01	; 1
    24a2:	90 e0       	ldi	r25, 0x00	; 0
    24a4:	02 2e       	mov	r0, r18
    24a6:	02 c0       	rjmp	.+4      	; 0x24ac <DIO_Write+0x12a>
    24a8:	88 0f       	add	r24, r24
    24aa:	99 1f       	adc	r25, r25
    24ac:	0a 94       	dec	r0
    24ae:	e2 f7       	brpl	.-8      	; 0x24a8 <DIO_Write+0x126>
    24b0:	80 95       	com	r24
    24b2:	84 23       	and	r24, r20
    24b4:	8c 93       	st	X, r24
	}
	if(Port == PORT_D)
    24b6:	8a 81       	ldd	r24, Y+2	; 0x02
    24b8:	83 30       	cpi	r24, 0x03	; 3
    24ba:	59 f5       	brne	.+86     	; 0x2512 <DIO_Write+0x190>
	{
	if(level == HIGH) SET_BIT(PORTD,Pin);
    24bc:	8c 81       	ldd	r24, Y+4	; 0x04
    24be:	81 30       	cpi	r24, 0x01	; 1
    24c0:	a1 f4       	brne	.+40     	; 0x24ea <DIO_Write+0x168>
    24c2:	a2 e3       	ldi	r26, 0x32	; 50
    24c4:	b0 e0       	ldi	r27, 0x00	; 0
    24c6:	e2 e3       	ldi	r30, 0x32	; 50
    24c8:	f0 e0       	ldi	r31, 0x00	; 0
    24ca:	80 81       	ld	r24, Z
    24cc:	48 2f       	mov	r20, r24
    24ce:	89 81       	ldd	r24, Y+1	; 0x01
    24d0:	28 2f       	mov	r18, r24
    24d2:	30 e0       	ldi	r19, 0x00	; 0
    24d4:	81 e0       	ldi	r24, 0x01	; 1
    24d6:	90 e0       	ldi	r25, 0x00	; 0
    24d8:	02 2e       	mov	r0, r18
    24da:	02 c0       	rjmp	.+4      	; 0x24e0 <DIO_Write+0x15e>
    24dc:	88 0f       	add	r24, r24
    24de:	99 1f       	adc	r25, r25
    24e0:	0a 94       	dec	r0
    24e2:	e2 f7       	brpl	.-8      	; 0x24dc <DIO_Write+0x15a>
    24e4:	84 2b       	or	r24, r20
    24e6:	8c 93       	st	X, r24
    24e8:	14 c0       	rjmp	.+40     	; 0x2512 <DIO_Write+0x190>
	else CLR_BIT(PORTD,Pin);
    24ea:	a2 e3       	ldi	r26, 0x32	; 50
    24ec:	b0 e0       	ldi	r27, 0x00	; 0
    24ee:	e2 e3       	ldi	r30, 0x32	; 50
    24f0:	f0 e0       	ldi	r31, 0x00	; 0
    24f2:	80 81       	ld	r24, Z
    24f4:	48 2f       	mov	r20, r24
    24f6:	89 81       	ldd	r24, Y+1	; 0x01
    24f8:	28 2f       	mov	r18, r24
    24fa:	30 e0       	ldi	r19, 0x00	; 0
    24fc:	81 e0       	ldi	r24, 0x01	; 1
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	02 2e       	mov	r0, r18
    2502:	02 c0       	rjmp	.+4      	; 0x2508 <DIO_Write+0x186>
    2504:	88 0f       	add	r24, r24
    2506:	99 1f       	adc	r25, r25
    2508:	0a 94       	dec	r0
    250a:	e2 f7       	brpl	.-8      	; 0x2504 <DIO_Write+0x182>
    250c:	80 95       	com	r24
    250e:	84 23       	and	r24, r20
    2510:	8c 93       	st	X, r24
	}
}
    2512:	0f 90       	pop	r0
    2514:	0f 90       	pop	r0
    2516:	0f 90       	pop	r0
    2518:	0f 90       	pop	r0
    251a:	cf 91       	pop	r28
    251c:	df 91       	pop	r29
    251e:	08 95       	ret

00002520 <DIO_Read>:

// Function used to Read from input pin
DIO_Level DIO_Read(channel_type channel)
{
    2520:	df 93       	push	r29
    2522:	cf 93       	push	r28
    2524:	00 d0       	rcall	.+0      	; 0x2526 <DIO_Read+0x6>
    2526:	00 d0       	rcall	.+0      	; 0x2528 <DIO_Read+0x8>
    2528:	cd b7       	in	r28, 0x3d	; 61
    252a:	de b7       	in	r29, 0x3e	; 62
    252c:	8b 83       	std	Y+3, r24	; 0x03
	DIO_Port Port = channel/8;
    252e:	8b 81       	ldd	r24, Y+3	; 0x03
    2530:	86 95       	lsr	r24
    2532:	86 95       	lsr	r24
    2534:	86 95       	lsr	r24
    2536:	8a 83       	std	Y+2, r24	; 0x02
	DIO_Pin Pin = channel%8;
    2538:	8b 81       	ldd	r24, Y+3	; 0x03
    253a:	87 70       	andi	r24, 0x07	; 7
    253c:	89 83       	std	Y+1, r24	; 0x01
	if      (Port == PORT_A)
    253e:	8a 81       	ldd	r24, Y+2	; 0x02
    2540:	88 23       	and	r24, r24
    2542:	c1 f4       	brne	.+48     	; 0x2574 <DIO_Read+0x54>
	{
		if(GET_BIT(PINA,Pin) == 0) return LOW;
    2544:	e9 e3       	ldi	r30, 0x39	; 57
    2546:	f0 e0       	ldi	r31, 0x00	; 0
    2548:	80 81       	ld	r24, Z
    254a:	28 2f       	mov	r18, r24
    254c:	30 e0       	ldi	r19, 0x00	; 0
    254e:	89 81       	ldd	r24, Y+1	; 0x01
    2550:	88 2f       	mov	r24, r24
    2552:	90 e0       	ldi	r25, 0x00	; 0
    2554:	a9 01       	movw	r20, r18
    2556:	02 c0       	rjmp	.+4      	; 0x255c <DIO_Read+0x3c>
    2558:	55 95       	asr	r21
    255a:	47 95       	ror	r20
    255c:	8a 95       	dec	r24
    255e:	e2 f7       	brpl	.-8      	; 0x2558 <DIO_Read+0x38>
    2560:	ca 01       	movw	r24, r20
    2562:	81 70       	andi	r24, 0x01	; 1
    2564:	90 70       	andi	r25, 0x00	; 0
    2566:	00 97       	sbiw	r24, 0x00	; 0
    2568:	11 f4       	brne	.+4      	; 0x256e <DIO_Read+0x4e>
    256a:	1c 82       	std	Y+4, r1	; 0x04
    256c:	50 c0       	rjmp	.+160    	; 0x260e <DIO_Read+0xee>
		else                        return HIGH;
    256e:	51 e0       	ldi	r21, 0x01	; 1
    2570:	5c 83       	std	Y+4, r21	; 0x04
    2572:	4d c0       	rjmp	.+154    	; 0x260e <DIO_Read+0xee>
	}

	else if (Port == PORT_B)
    2574:	8a 81       	ldd	r24, Y+2	; 0x02
    2576:	81 30       	cpi	r24, 0x01	; 1
    2578:	c1 f4       	brne	.+48     	; 0x25aa <DIO_Read+0x8a>
	{
		if(GET_BIT(PINB,Pin) == 0)  return LOW;
    257a:	e6 e3       	ldi	r30, 0x36	; 54
    257c:	f0 e0       	ldi	r31, 0x00	; 0
    257e:	80 81       	ld	r24, Z
    2580:	28 2f       	mov	r18, r24
    2582:	30 e0       	ldi	r19, 0x00	; 0
    2584:	89 81       	ldd	r24, Y+1	; 0x01
    2586:	88 2f       	mov	r24, r24
    2588:	90 e0       	ldi	r25, 0x00	; 0
    258a:	a9 01       	movw	r20, r18
    258c:	02 c0       	rjmp	.+4      	; 0x2592 <DIO_Read+0x72>
    258e:	55 95       	asr	r21
    2590:	47 95       	ror	r20
    2592:	8a 95       	dec	r24
    2594:	e2 f7       	brpl	.-8      	; 0x258e <DIO_Read+0x6e>
    2596:	ca 01       	movw	r24, r20
    2598:	81 70       	andi	r24, 0x01	; 1
    259a:	90 70       	andi	r25, 0x00	; 0
    259c:	00 97       	sbiw	r24, 0x00	; 0
    259e:	11 f4       	brne	.+4      	; 0x25a4 <DIO_Read+0x84>
    25a0:	1c 82       	std	Y+4, r1	; 0x04
    25a2:	35 c0       	rjmp	.+106    	; 0x260e <DIO_Read+0xee>
		else                        return HIGH;
    25a4:	51 e0       	ldi	r21, 0x01	; 1
    25a6:	5c 83       	std	Y+4, r21	; 0x04
    25a8:	32 c0       	rjmp	.+100    	; 0x260e <DIO_Read+0xee>
	}
	else if (Port == PORT_C)
    25aa:	8a 81       	ldd	r24, Y+2	; 0x02
    25ac:	82 30       	cpi	r24, 0x02	; 2
    25ae:	c1 f4       	brne	.+48     	; 0x25e0 <DIO_Read+0xc0>
	{
		if(GET_BIT(PINC,Pin) == 0) return LOW;
    25b0:	e3 e3       	ldi	r30, 0x33	; 51
    25b2:	f0 e0       	ldi	r31, 0x00	; 0
    25b4:	80 81       	ld	r24, Z
    25b6:	28 2f       	mov	r18, r24
    25b8:	30 e0       	ldi	r19, 0x00	; 0
    25ba:	89 81       	ldd	r24, Y+1	; 0x01
    25bc:	88 2f       	mov	r24, r24
    25be:	90 e0       	ldi	r25, 0x00	; 0
    25c0:	a9 01       	movw	r20, r18
    25c2:	02 c0       	rjmp	.+4      	; 0x25c8 <DIO_Read+0xa8>
    25c4:	55 95       	asr	r21
    25c6:	47 95       	ror	r20
    25c8:	8a 95       	dec	r24
    25ca:	e2 f7       	brpl	.-8      	; 0x25c4 <DIO_Read+0xa4>
    25cc:	ca 01       	movw	r24, r20
    25ce:	81 70       	andi	r24, 0x01	; 1
    25d0:	90 70       	andi	r25, 0x00	; 0
    25d2:	00 97       	sbiw	r24, 0x00	; 0
    25d4:	11 f4       	brne	.+4      	; 0x25da <DIO_Read+0xba>
    25d6:	1c 82       	std	Y+4, r1	; 0x04
    25d8:	1a c0       	rjmp	.+52     	; 0x260e <DIO_Read+0xee>
		else                        return HIGH;
    25da:	51 e0       	ldi	r21, 0x01	; 1
    25dc:	5c 83       	std	Y+4, r21	; 0x04
    25de:	17 c0       	rjmp	.+46     	; 0x260e <DIO_Read+0xee>
	}
	else
	{
		if(GET_BIT(PIND,Pin) == 0) return LOW;
    25e0:	e0 e3       	ldi	r30, 0x30	; 48
    25e2:	f0 e0       	ldi	r31, 0x00	; 0
    25e4:	80 81       	ld	r24, Z
    25e6:	28 2f       	mov	r18, r24
    25e8:	30 e0       	ldi	r19, 0x00	; 0
    25ea:	89 81       	ldd	r24, Y+1	; 0x01
    25ec:	88 2f       	mov	r24, r24
    25ee:	90 e0       	ldi	r25, 0x00	; 0
    25f0:	a9 01       	movw	r20, r18
    25f2:	02 c0       	rjmp	.+4      	; 0x25f8 <DIO_Read+0xd8>
    25f4:	55 95       	asr	r21
    25f6:	47 95       	ror	r20
    25f8:	8a 95       	dec	r24
    25fa:	e2 f7       	brpl	.-8      	; 0x25f4 <DIO_Read+0xd4>
    25fc:	ca 01       	movw	r24, r20
    25fe:	81 70       	andi	r24, 0x01	; 1
    2600:	90 70       	andi	r25, 0x00	; 0
    2602:	00 97       	sbiw	r24, 0x00	; 0
    2604:	11 f4       	brne	.+4      	; 0x260a <DIO_Read+0xea>
    2606:	1c 82       	std	Y+4, r1	; 0x04
    2608:	02 c0       	rjmp	.+4      	; 0x260e <DIO_Read+0xee>
		else                        return HIGH;
    260a:	51 e0       	ldi	r21, 0x01	; 1
    260c:	5c 83       	std	Y+4, r21	; 0x04
    260e:	8c 81       	ldd	r24, Y+4	; 0x04
	}
}
    2610:	0f 90       	pop	r0
    2612:	0f 90       	pop	r0
    2614:	0f 90       	pop	r0
    2616:	0f 90       	pop	r0
    2618:	cf 91       	pop	r28
    261a:	df 91       	pop	r29
    261c:	08 95       	ret

0000261e <DIO_Flip>:

// Function used to toggle Digital Output Pin
void DIO_Flip(channel_type channel)
{
    261e:	df 93       	push	r29
    2620:	cf 93       	push	r28
    2622:	00 d0       	rcall	.+0      	; 0x2624 <DIO_Flip+0x6>
    2624:	0f 92       	push	r0
    2626:	cd b7       	in	r28, 0x3d	; 61
    2628:	de b7       	in	r29, 0x3e	; 62
    262a:	8b 83       	std	Y+3, r24	; 0x03
	DIO_Port Port = channel/8;
    262c:	8b 81       	ldd	r24, Y+3	; 0x03
    262e:	86 95       	lsr	r24
    2630:	86 95       	lsr	r24
    2632:	86 95       	lsr	r24
    2634:	8a 83       	std	Y+2, r24	; 0x02
	DIO_Pin Pin = channel%8;
    2636:	8b 81       	ldd	r24, Y+3	; 0x03
    2638:	87 70       	andi	r24, 0x07	; 7
    263a:	89 83       	std	Y+1, r24	; 0x01
	if      (Port == PORT_A)
    263c:	8a 81       	ldd	r24, Y+2	; 0x02
    263e:	88 23       	and	r24, r24
    2640:	a1 f4       	brne	.+40     	; 0x266a <DIO_Flip+0x4c>
	{
		TOG_BIT(PORTA,Pin);
    2642:	ab e3       	ldi	r26, 0x3B	; 59
    2644:	b0 e0       	ldi	r27, 0x00	; 0
    2646:	eb e3       	ldi	r30, 0x3B	; 59
    2648:	f0 e0       	ldi	r31, 0x00	; 0
    264a:	80 81       	ld	r24, Z
    264c:	48 2f       	mov	r20, r24
    264e:	89 81       	ldd	r24, Y+1	; 0x01
    2650:	28 2f       	mov	r18, r24
    2652:	30 e0       	ldi	r19, 0x00	; 0
    2654:	81 e0       	ldi	r24, 0x01	; 1
    2656:	90 e0       	ldi	r25, 0x00	; 0
    2658:	02 2e       	mov	r0, r18
    265a:	02 c0       	rjmp	.+4      	; 0x2660 <DIO_Flip+0x42>
    265c:	88 0f       	add	r24, r24
    265e:	99 1f       	adc	r25, r25
    2660:	0a 94       	dec	r0
    2662:	e2 f7       	brpl	.-8      	; 0x265c <DIO_Flip+0x3e>
    2664:	84 27       	eor	r24, r20
    2666:	8c 93       	st	X, r24
    2668:	41 c0       	rjmp	.+130    	; 0x26ec <DIO_Flip+0xce>
	}

	else if (Port == PORT_B)
    266a:	8a 81       	ldd	r24, Y+2	; 0x02
    266c:	81 30       	cpi	r24, 0x01	; 1
    266e:	a1 f4       	brne	.+40     	; 0x2698 <DIO_Flip+0x7a>
	{
		TOG_BIT(PORTB,Pin);
    2670:	a8 e3       	ldi	r26, 0x38	; 56
    2672:	b0 e0       	ldi	r27, 0x00	; 0
    2674:	e8 e3       	ldi	r30, 0x38	; 56
    2676:	f0 e0       	ldi	r31, 0x00	; 0
    2678:	80 81       	ld	r24, Z
    267a:	48 2f       	mov	r20, r24
    267c:	89 81       	ldd	r24, Y+1	; 0x01
    267e:	28 2f       	mov	r18, r24
    2680:	30 e0       	ldi	r19, 0x00	; 0
    2682:	81 e0       	ldi	r24, 0x01	; 1
    2684:	90 e0       	ldi	r25, 0x00	; 0
    2686:	02 2e       	mov	r0, r18
    2688:	02 c0       	rjmp	.+4      	; 0x268e <DIO_Flip+0x70>
    268a:	88 0f       	add	r24, r24
    268c:	99 1f       	adc	r25, r25
    268e:	0a 94       	dec	r0
    2690:	e2 f7       	brpl	.-8      	; 0x268a <DIO_Flip+0x6c>
    2692:	84 27       	eor	r24, r20
    2694:	8c 93       	st	X, r24
    2696:	2a c0       	rjmp	.+84     	; 0x26ec <DIO_Flip+0xce>
	}
	else if (Port == PORT_C)
    2698:	8a 81       	ldd	r24, Y+2	; 0x02
    269a:	82 30       	cpi	r24, 0x02	; 2
    269c:	a1 f4       	brne	.+40     	; 0x26c6 <DIO_Flip+0xa8>
	{
		TOG_BIT(PORTC,Pin);
    269e:	a5 e3       	ldi	r26, 0x35	; 53
    26a0:	b0 e0       	ldi	r27, 0x00	; 0
    26a2:	e5 e3       	ldi	r30, 0x35	; 53
    26a4:	f0 e0       	ldi	r31, 0x00	; 0
    26a6:	80 81       	ld	r24, Z
    26a8:	48 2f       	mov	r20, r24
    26aa:	89 81       	ldd	r24, Y+1	; 0x01
    26ac:	28 2f       	mov	r18, r24
    26ae:	30 e0       	ldi	r19, 0x00	; 0
    26b0:	81 e0       	ldi	r24, 0x01	; 1
    26b2:	90 e0       	ldi	r25, 0x00	; 0
    26b4:	02 2e       	mov	r0, r18
    26b6:	02 c0       	rjmp	.+4      	; 0x26bc <DIO_Flip+0x9e>
    26b8:	88 0f       	add	r24, r24
    26ba:	99 1f       	adc	r25, r25
    26bc:	0a 94       	dec	r0
    26be:	e2 f7       	brpl	.-8      	; 0x26b8 <DIO_Flip+0x9a>
    26c0:	84 27       	eor	r24, r20
    26c2:	8c 93       	st	X, r24
    26c4:	13 c0       	rjmp	.+38     	; 0x26ec <DIO_Flip+0xce>
	}
	else
	{
		TOG_BIT(PORTD,Pin);
    26c6:	a2 e3       	ldi	r26, 0x32	; 50
    26c8:	b0 e0       	ldi	r27, 0x00	; 0
    26ca:	e2 e3       	ldi	r30, 0x32	; 50
    26cc:	f0 e0       	ldi	r31, 0x00	; 0
    26ce:	80 81       	ld	r24, Z
    26d0:	48 2f       	mov	r20, r24
    26d2:	89 81       	ldd	r24, Y+1	; 0x01
    26d4:	28 2f       	mov	r18, r24
    26d6:	30 e0       	ldi	r19, 0x00	; 0
    26d8:	81 e0       	ldi	r24, 0x01	; 1
    26da:	90 e0       	ldi	r25, 0x00	; 0
    26dc:	02 2e       	mov	r0, r18
    26de:	02 c0       	rjmp	.+4      	; 0x26e4 <DIO_Flip+0xc6>
    26e0:	88 0f       	add	r24, r24
    26e2:	99 1f       	adc	r25, r25
    26e4:	0a 94       	dec	r0
    26e6:	e2 f7       	brpl	.-8      	; 0x26e0 <DIO_Flip+0xc2>
    26e8:	84 27       	eor	r24, r20
    26ea:	8c 93       	st	X, r24
	}
}
    26ec:	0f 90       	pop	r0
    26ee:	0f 90       	pop	r0
    26f0:	0f 90       	pop	r0
    26f2:	cf 91       	pop	r28
    26f4:	df 91       	pop	r29
    26f6:	08 95       	ret

000026f8 <ADC_init>:
 */

#include"ADC.h"

// Configure ADC according to content of ADC_config.h File
void ADC_init(){
    26f8:	df 93       	push	r29
    26fa:	cf 93       	push	r28
    26fc:	cd b7       	in	r28, 0x3d	; 61
    26fe:	de b7       	in	r29, 0x3e	; 62

// Enable ADC
	SET_BIT(ADCSRA,ADEN);
    2700:	a6 e2       	ldi	r26, 0x26	; 38
    2702:	b0 e0       	ldi	r27, 0x00	; 0
    2704:	e6 e2       	ldi	r30, 0x26	; 38
    2706:	f0 e0       	ldi	r31, 0x00	; 0
    2708:	80 81       	ld	r24, Z
    270a:	80 68       	ori	r24, 0x80	; 128
    270c:	8c 93       	st	X, r24
#elif Prescaler == 32
	SET_BIT(ADCSRA,ADPS0);
	CLR_BIT(ADCSRA,ADPS1);
	SET_BIT(ADCSRA,ADPS2);
#elif Prescaler == 64
	CLR_BIT(ADCSRA,ADPS0);
    270e:	a6 e2       	ldi	r26, 0x26	; 38
    2710:	b0 e0       	ldi	r27, 0x00	; 0
    2712:	e6 e2       	ldi	r30, 0x26	; 38
    2714:	f0 e0       	ldi	r31, 0x00	; 0
    2716:	80 81       	ld	r24, Z
    2718:	8e 7f       	andi	r24, 0xFE	; 254
    271a:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADPS1);
    271c:	a6 e2       	ldi	r26, 0x26	; 38
    271e:	b0 e0       	ldi	r27, 0x00	; 0
    2720:	e6 e2       	ldi	r30, 0x26	; 38
    2722:	f0 e0       	ldi	r31, 0x00	; 0
    2724:	80 81       	ld	r24, Z
    2726:	82 60       	ori	r24, 0x02	; 2
    2728:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADPS2);
    272a:	a6 e2       	ldi	r26, 0x26	; 38
    272c:	b0 e0       	ldi	r27, 0x00	; 0
    272e:	e6 e2       	ldi	r30, 0x26	; 38
    2730:	f0 e0       	ldi	r31, 0x00	; 0
    2732:	80 81       	ld	r24, Z
    2734:	84 60       	ori	r24, 0x04	; 4
    2736:	8c 93       	st	X, r24
#endif

// Select Reference Voltage

#if VOLTAGE_REF == AREF_ON
	CLR_BIT(ADMUX,REFS0);
    2738:	a7 e2       	ldi	r26, 0x27	; 39
    273a:	b0 e0       	ldi	r27, 0x00	; 0
    273c:	e7 e2       	ldi	r30, 0x27	; 39
    273e:	f0 e0       	ldi	r31, 0x00	; 0
    2740:	80 81       	ld	r24, Z
    2742:	8f 7b       	andi	r24, 0xBF	; 191
    2744:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,REFS1);
    2746:	a7 e2       	ldi	r26, 0x27	; 39
    2748:	b0 e0       	ldi	r27, 0x00	; 0
    274a:	e7 e2       	ldi	r30, 0x27	; 39
    274c:	f0 e0       	ldi	r31, 0x00	; 0
    274e:	80 81       	ld	r24, Z
    2750:	8f 77       	andi	r24, 0x7F	; 127
    2752:	8c 93       	st	X, r24
	SET_BIT(ADMUX,REFS1);
#endif

// Select Adjustment
#if ADJUST == RIGHT_ADJUST
	CLR_BIT(ADMUX,ADLAR);
    2754:	a7 e2       	ldi	r26, 0x27	; 39
    2756:	b0 e0       	ldi	r27, 0x00	; 0
    2758:	e7 e2       	ldi	r30, 0x27	; 39
    275a:	f0 e0       	ldi	r31, 0x00	; 0
    275c:	80 81       	ld	r24, Z
    275e:	8f 7d       	andi	r24, 0xDF	; 223
    2760:	8c 93       	st	X, r24

// Enable Triggering MODE
#if TRIGGER == AUTOTRIGGED_OFF
	CLR_BIT(ADCSRA,ADATE);
#else
	SET_BIT(ADCSRA,ADATE);
    2762:	a6 e2       	ldi	r26, 0x26	; 38
    2764:	b0 e0       	ldi	r27, 0x00	; 0
    2766:	e6 e2       	ldi	r30, 0x26	; 38
    2768:	f0 e0       	ldi	r31, 0x00	; 0
    276a:	80 81       	ld	r24, Z
    276c:	80 62       	ori	r24, 0x20	; 32
    276e:	8c 93       	st	X, r24
	#elif TRIGGER_SOURCE == TIMER0_COMP_MATCH
	   SET_BIT(SFIOR,ADTS0);
	   SET_BIT(SFIOR,ADTS1);
	   CLR_BIT(SFIOR,ADTS2);
	#elif TRIGGER_SOURCE == TIMER0_OVF
	   CLR_BIT(SFIOR,ADTS0);
    2770:	a0 e5       	ldi	r26, 0x50	; 80
    2772:	b0 e0       	ldi	r27, 0x00	; 0
    2774:	e0 e5       	ldi	r30, 0x50	; 80
    2776:	f0 e0       	ldi	r31, 0x00	; 0
    2778:	80 81       	ld	r24, Z
    277a:	8f 7d       	andi	r24, 0xDF	; 223
    277c:	8c 93       	st	X, r24
	   CLR_BIT(SFIOR,ADTS1);
    277e:	a0 e5       	ldi	r26, 0x50	; 80
    2780:	b0 e0       	ldi	r27, 0x00	; 0
    2782:	e0 e5       	ldi	r30, 0x50	; 80
    2784:	f0 e0       	ldi	r31, 0x00	; 0
    2786:	80 81       	ld	r24, Z
    2788:	8f 7b       	andi	r24, 0xBF	; 191
    278a:	8c 93       	st	X, r24
	   SET_BIT(SFIOR,ADTS2);
    278c:	a0 e5       	ldi	r26, 0x50	; 80
    278e:	b0 e0       	ldi	r27, 0x00	; 0
    2790:	e0 e5       	ldi	r30, 0x50	; 80
    2792:	f0 e0       	ldi	r31, 0x00	; 0
    2794:	80 81       	ld	r24, Z
    2796:	80 68       	ori	r24, 0x80	; 128
    2798:	8c 93       	st	X, r24
	   SET_BIT(SFIOR,ADTS0);
	   SET_BIT(SFIOR,ADTS1);
	   SET_BIT(SFIOR,ADTS2);
	#endif
#endif
}
    279a:	cf 91       	pop	r28
    279c:	df 91       	pop	r29
    279e:	08 95       	ret

000027a0 <ADC_Read>:

// Function to read Data Register of ADC (Single Conversion)
unit16 ADC_Read(ADC_Num Channel){
    27a0:	df 93       	push	r29
    27a2:	cf 93       	push	r28
    27a4:	00 d0       	rcall	.+0      	; 0x27a6 <ADC_Read+0x6>
    27a6:	00 d0       	rcall	.+0      	; 0x27a8 <ADC_Read+0x8>
    27a8:	0f 92       	push	r0
    27aa:	cd b7       	in	r28, 0x3d	; 61
    27ac:	de b7       	in	r29, 0x3e	; 62
    27ae:	8b 83       	std	Y+3, r24	; 0x03

	// Select Channel
	switch(Channel)
    27b0:	8b 81       	ldd	r24, Y+3	; 0x03
    27b2:	28 2f       	mov	r18, r24
    27b4:	30 e0       	ldi	r19, 0x00	; 0
    27b6:	3d 83       	std	Y+5, r19	; 0x05
    27b8:	2c 83       	std	Y+4, r18	; 0x04
    27ba:	8c 81       	ldd	r24, Y+4	; 0x04
    27bc:	9d 81       	ldd	r25, Y+5	; 0x05
    27be:	83 30       	cpi	r24, 0x03	; 3
    27c0:	91 05       	cpc	r25, r1
    27c2:	09 f4       	brne	.+2      	; 0x27c6 <ADC_Read+0x26>
    27c4:	86 c0       	rjmp	.+268    	; 0x28d2 <ADC_Read+0x132>
    27c6:	2c 81       	ldd	r18, Y+4	; 0x04
    27c8:	3d 81       	ldd	r19, Y+5	; 0x05
    27ca:	24 30       	cpi	r18, 0x04	; 4
    27cc:	31 05       	cpc	r19, r1
    27ce:	8c f4       	brge	.+34     	; 0x27f2 <ADC_Read+0x52>
    27d0:	8c 81       	ldd	r24, Y+4	; 0x04
    27d2:	9d 81       	ldd	r25, Y+5	; 0x05
    27d4:	81 30       	cpi	r24, 0x01	; 1
    27d6:	91 05       	cpc	r25, r1
    27d8:	09 f4       	brne	.+2      	; 0x27dc <ADC_Read+0x3c>
    27da:	41 c0       	rjmp	.+130    	; 0x285e <ADC_Read+0xbe>
    27dc:	2c 81       	ldd	r18, Y+4	; 0x04
    27de:	3d 81       	ldd	r19, Y+5	; 0x05
    27e0:	22 30       	cpi	r18, 0x02	; 2
    27e2:	31 05       	cpc	r19, r1
    27e4:	0c f0       	brlt	.+2      	; 0x27e8 <ADC_Read+0x48>
    27e6:	58 c0       	rjmp	.+176    	; 0x2898 <ADC_Read+0xf8>
    27e8:	8c 81       	ldd	r24, Y+4	; 0x04
    27ea:	9d 81       	ldd	r25, Y+5	; 0x05
    27ec:	00 97       	sbiw	r24, 0x00	; 0
    27ee:	d1 f0       	breq	.+52     	; 0x2824 <ADC_Read+0x84>
    27f0:	00 c1       	rjmp	.+512    	; 0x29f2 <ADC_Read+0x252>
    27f2:	2c 81       	ldd	r18, Y+4	; 0x04
    27f4:	3d 81       	ldd	r19, Y+5	; 0x05
    27f6:	25 30       	cpi	r18, 0x05	; 5
    27f8:	31 05       	cpc	r19, r1
    27fa:	09 f4       	brne	.+2      	; 0x27fe <ADC_Read+0x5e>
    27fc:	a4 c0       	rjmp	.+328    	; 0x2946 <ADC_Read+0x1a6>
    27fe:	8c 81       	ldd	r24, Y+4	; 0x04
    2800:	9d 81       	ldd	r25, Y+5	; 0x05
    2802:	85 30       	cpi	r24, 0x05	; 5
    2804:	91 05       	cpc	r25, r1
    2806:	0c f4       	brge	.+2      	; 0x280a <ADC_Read+0x6a>
    2808:	81 c0       	rjmp	.+258    	; 0x290c <ADC_Read+0x16c>
    280a:	2c 81       	ldd	r18, Y+4	; 0x04
    280c:	3d 81       	ldd	r19, Y+5	; 0x05
    280e:	26 30       	cpi	r18, 0x06	; 6
    2810:	31 05       	cpc	r19, r1
    2812:	09 f4       	brne	.+2      	; 0x2816 <ADC_Read+0x76>
    2814:	b5 c0       	rjmp	.+362    	; 0x2980 <ADC_Read+0x1e0>
    2816:	8c 81       	ldd	r24, Y+4	; 0x04
    2818:	9d 81       	ldd	r25, Y+5	; 0x05
    281a:	87 30       	cpi	r24, 0x07	; 7
    281c:	91 05       	cpc	r25, r1
    281e:	09 f4       	brne	.+2      	; 0x2822 <ADC_Read+0x82>
    2820:	cc c0       	rjmp	.+408    	; 0x29ba <ADC_Read+0x21a>
    2822:	e7 c0       	rjmp	.+462    	; 0x29f2 <ADC_Read+0x252>
	{
	case ADC_0:
		CLR_BIT(ADMUX,MUX0);
    2824:	a7 e2       	ldi	r26, 0x27	; 39
    2826:	b0 e0       	ldi	r27, 0x00	; 0
    2828:	e7 e2       	ldi	r30, 0x27	; 39
    282a:	f0 e0       	ldi	r31, 0x00	; 0
    282c:	80 81       	ld	r24, Z
    282e:	8e 7f       	andi	r24, 0xFE	; 254
    2830:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX1);
    2832:	a7 e2       	ldi	r26, 0x27	; 39
    2834:	b0 e0       	ldi	r27, 0x00	; 0
    2836:	e7 e2       	ldi	r30, 0x27	; 39
    2838:	f0 e0       	ldi	r31, 0x00	; 0
    283a:	80 81       	ld	r24, Z
    283c:	8d 7f       	andi	r24, 0xFD	; 253
    283e:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX2);
    2840:	a7 e2       	ldi	r26, 0x27	; 39
    2842:	b0 e0       	ldi	r27, 0x00	; 0
    2844:	e7 e2       	ldi	r30, 0x27	; 39
    2846:	f0 e0       	ldi	r31, 0x00	; 0
    2848:	80 81       	ld	r24, Z
    284a:	8b 7f       	andi	r24, 0xFB	; 251
    284c:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX3);
    284e:	a7 e2       	ldi	r26, 0x27	; 39
    2850:	b0 e0       	ldi	r27, 0x00	; 0
    2852:	e7 e2       	ldi	r30, 0x27	; 39
    2854:	f0 e0       	ldi	r31, 0x00	; 0
    2856:	80 81       	ld	r24, Z
    2858:	87 7f       	andi	r24, 0xF7	; 247
    285a:	8c 93       	st	X, r24
    285c:	ca c0       	rjmp	.+404    	; 0x29f2 <ADC_Read+0x252>
		break;
	case ADC_1:
		SET_BIT(ADMUX,MUX0);
    285e:	a7 e2       	ldi	r26, 0x27	; 39
    2860:	b0 e0       	ldi	r27, 0x00	; 0
    2862:	e7 e2       	ldi	r30, 0x27	; 39
    2864:	f0 e0       	ldi	r31, 0x00	; 0
    2866:	80 81       	ld	r24, Z
    2868:	81 60       	ori	r24, 0x01	; 1
    286a:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX1);
    286c:	a7 e2       	ldi	r26, 0x27	; 39
    286e:	b0 e0       	ldi	r27, 0x00	; 0
    2870:	e7 e2       	ldi	r30, 0x27	; 39
    2872:	f0 e0       	ldi	r31, 0x00	; 0
    2874:	80 81       	ld	r24, Z
    2876:	8d 7f       	andi	r24, 0xFD	; 253
    2878:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX2);
    287a:	a7 e2       	ldi	r26, 0x27	; 39
    287c:	b0 e0       	ldi	r27, 0x00	; 0
    287e:	e7 e2       	ldi	r30, 0x27	; 39
    2880:	f0 e0       	ldi	r31, 0x00	; 0
    2882:	80 81       	ld	r24, Z
    2884:	8b 7f       	andi	r24, 0xFB	; 251
    2886:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX3);
    2888:	a7 e2       	ldi	r26, 0x27	; 39
    288a:	b0 e0       	ldi	r27, 0x00	; 0
    288c:	e7 e2       	ldi	r30, 0x27	; 39
    288e:	f0 e0       	ldi	r31, 0x00	; 0
    2890:	80 81       	ld	r24, Z
    2892:	87 7f       	andi	r24, 0xF7	; 247
    2894:	8c 93       	st	X, r24
    2896:	ad c0       	rjmp	.+346    	; 0x29f2 <ADC_Read+0x252>
		break;
	case ADC_2:
		CLR_BIT(ADMUX,MUX0);
    2898:	a7 e2       	ldi	r26, 0x27	; 39
    289a:	b0 e0       	ldi	r27, 0x00	; 0
    289c:	e7 e2       	ldi	r30, 0x27	; 39
    289e:	f0 e0       	ldi	r31, 0x00	; 0
    28a0:	80 81       	ld	r24, Z
    28a2:	8e 7f       	andi	r24, 0xFE	; 254
    28a4:	8c 93       	st	X, r24
		SET_BIT(ADMUX,MUX1);
    28a6:	a7 e2       	ldi	r26, 0x27	; 39
    28a8:	b0 e0       	ldi	r27, 0x00	; 0
    28aa:	e7 e2       	ldi	r30, 0x27	; 39
    28ac:	f0 e0       	ldi	r31, 0x00	; 0
    28ae:	80 81       	ld	r24, Z
    28b0:	82 60       	ori	r24, 0x02	; 2
    28b2:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX2);
    28b4:	a7 e2       	ldi	r26, 0x27	; 39
    28b6:	b0 e0       	ldi	r27, 0x00	; 0
    28b8:	e7 e2       	ldi	r30, 0x27	; 39
    28ba:	f0 e0       	ldi	r31, 0x00	; 0
    28bc:	80 81       	ld	r24, Z
    28be:	8b 7f       	andi	r24, 0xFB	; 251
    28c0:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX3);
    28c2:	a7 e2       	ldi	r26, 0x27	; 39
    28c4:	b0 e0       	ldi	r27, 0x00	; 0
    28c6:	e7 e2       	ldi	r30, 0x27	; 39
    28c8:	f0 e0       	ldi	r31, 0x00	; 0
    28ca:	80 81       	ld	r24, Z
    28cc:	87 7f       	andi	r24, 0xF7	; 247
    28ce:	8c 93       	st	X, r24
    28d0:	90 c0       	rjmp	.+288    	; 0x29f2 <ADC_Read+0x252>
		break;
	case ADC_3:
		SET_BIT(ADMUX,MUX0);
    28d2:	a7 e2       	ldi	r26, 0x27	; 39
    28d4:	b0 e0       	ldi	r27, 0x00	; 0
    28d6:	e7 e2       	ldi	r30, 0x27	; 39
    28d8:	f0 e0       	ldi	r31, 0x00	; 0
    28da:	80 81       	ld	r24, Z
    28dc:	81 60       	ori	r24, 0x01	; 1
    28de:	8c 93       	st	X, r24
		SET_BIT(ADMUX,MUX1);
    28e0:	a7 e2       	ldi	r26, 0x27	; 39
    28e2:	b0 e0       	ldi	r27, 0x00	; 0
    28e4:	e7 e2       	ldi	r30, 0x27	; 39
    28e6:	f0 e0       	ldi	r31, 0x00	; 0
    28e8:	80 81       	ld	r24, Z
    28ea:	82 60       	ori	r24, 0x02	; 2
    28ec:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX2);
    28ee:	a7 e2       	ldi	r26, 0x27	; 39
    28f0:	b0 e0       	ldi	r27, 0x00	; 0
    28f2:	e7 e2       	ldi	r30, 0x27	; 39
    28f4:	f0 e0       	ldi	r31, 0x00	; 0
    28f6:	80 81       	ld	r24, Z
    28f8:	8b 7f       	andi	r24, 0xFB	; 251
    28fa:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX3);
    28fc:	a7 e2       	ldi	r26, 0x27	; 39
    28fe:	b0 e0       	ldi	r27, 0x00	; 0
    2900:	e7 e2       	ldi	r30, 0x27	; 39
    2902:	f0 e0       	ldi	r31, 0x00	; 0
    2904:	80 81       	ld	r24, Z
    2906:	87 7f       	andi	r24, 0xF7	; 247
    2908:	8c 93       	st	X, r24
    290a:	73 c0       	rjmp	.+230    	; 0x29f2 <ADC_Read+0x252>
		break;
	case ADC_4:
		CLR_BIT(ADMUX,MUX0);
    290c:	a7 e2       	ldi	r26, 0x27	; 39
    290e:	b0 e0       	ldi	r27, 0x00	; 0
    2910:	e7 e2       	ldi	r30, 0x27	; 39
    2912:	f0 e0       	ldi	r31, 0x00	; 0
    2914:	80 81       	ld	r24, Z
    2916:	8e 7f       	andi	r24, 0xFE	; 254
    2918:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX1);
    291a:	a7 e2       	ldi	r26, 0x27	; 39
    291c:	b0 e0       	ldi	r27, 0x00	; 0
    291e:	e7 e2       	ldi	r30, 0x27	; 39
    2920:	f0 e0       	ldi	r31, 0x00	; 0
    2922:	80 81       	ld	r24, Z
    2924:	8d 7f       	andi	r24, 0xFD	; 253
    2926:	8c 93       	st	X, r24
		SET_BIT(ADMUX,MUX2);
    2928:	a7 e2       	ldi	r26, 0x27	; 39
    292a:	b0 e0       	ldi	r27, 0x00	; 0
    292c:	e7 e2       	ldi	r30, 0x27	; 39
    292e:	f0 e0       	ldi	r31, 0x00	; 0
    2930:	80 81       	ld	r24, Z
    2932:	84 60       	ori	r24, 0x04	; 4
    2934:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX3);
    2936:	a7 e2       	ldi	r26, 0x27	; 39
    2938:	b0 e0       	ldi	r27, 0x00	; 0
    293a:	e7 e2       	ldi	r30, 0x27	; 39
    293c:	f0 e0       	ldi	r31, 0x00	; 0
    293e:	80 81       	ld	r24, Z
    2940:	87 7f       	andi	r24, 0xF7	; 247
    2942:	8c 93       	st	X, r24
    2944:	56 c0       	rjmp	.+172    	; 0x29f2 <ADC_Read+0x252>
		break;
	case ADC_5:
		SET_BIT(ADMUX,MUX0);
    2946:	a7 e2       	ldi	r26, 0x27	; 39
    2948:	b0 e0       	ldi	r27, 0x00	; 0
    294a:	e7 e2       	ldi	r30, 0x27	; 39
    294c:	f0 e0       	ldi	r31, 0x00	; 0
    294e:	80 81       	ld	r24, Z
    2950:	81 60       	ori	r24, 0x01	; 1
    2952:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX1);
    2954:	a7 e2       	ldi	r26, 0x27	; 39
    2956:	b0 e0       	ldi	r27, 0x00	; 0
    2958:	e7 e2       	ldi	r30, 0x27	; 39
    295a:	f0 e0       	ldi	r31, 0x00	; 0
    295c:	80 81       	ld	r24, Z
    295e:	8d 7f       	andi	r24, 0xFD	; 253
    2960:	8c 93       	st	X, r24
		SET_BIT(ADMUX,MUX2);
    2962:	a7 e2       	ldi	r26, 0x27	; 39
    2964:	b0 e0       	ldi	r27, 0x00	; 0
    2966:	e7 e2       	ldi	r30, 0x27	; 39
    2968:	f0 e0       	ldi	r31, 0x00	; 0
    296a:	80 81       	ld	r24, Z
    296c:	84 60       	ori	r24, 0x04	; 4
    296e:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX3);
    2970:	a7 e2       	ldi	r26, 0x27	; 39
    2972:	b0 e0       	ldi	r27, 0x00	; 0
    2974:	e7 e2       	ldi	r30, 0x27	; 39
    2976:	f0 e0       	ldi	r31, 0x00	; 0
    2978:	80 81       	ld	r24, Z
    297a:	87 7f       	andi	r24, 0xF7	; 247
    297c:	8c 93       	st	X, r24
    297e:	39 c0       	rjmp	.+114    	; 0x29f2 <ADC_Read+0x252>
		break;
	case ADC_6:
		CLR_BIT(ADMUX,MUX0);
    2980:	a7 e2       	ldi	r26, 0x27	; 39
    2982:	b0 e0       	ldi	r27, 0x00	; 0
    2984:	e7 e2       	ldi	r30, 0x27	; 39
    2986:	f0 e0       	ldi	r31, 0x00	; 0
    2988:	80 81       	ld	r24, Z
    298a:	8e 7f       	andi	r24, 0xFE	; 254
    298c:	8c 93       	st	X, r24
		SET_BIT(ADMUX,MUX1);
    298e:	a7 e2       	ldi	r26, 0x27	; 39
    2990:	b0 e0       	ldi	r27, 0x00	; 0
    2992:	e7 e2       	ldi	r30, 0x27	; 39
    2994:	f0 e0       	ldi	r31, 0x00	; 0
    2996:	80 81       	ld	r24, Z
    2998:	82 60       	ori	r24, 0x02	; 2
    299a:	8c 93       	st	X, r24
		SET_BIT(ADMUX,MUX2);
    299c:	a7 e2       	ldi	r26, 0x27	; 39
    299e:	b0 e0       	ldi	r27, 0x00	; 0
    29a0:	e7 e2       	ldi	r30, 0x27	; 39
    29a2:	f0 e0       	ldi	r31, 0x00	; 0
    29a4:	80 81       	ld	r24, Z
    29a6:	84 60       	ori	r24, 0x04	; 4
    29a8:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX3);
    29aa:	a7 e2       	ldi	r26, 0x27	; 39
    29ac:	b0 e0       	ldi	r27, 0x00	; 0
    29ae:	e7 e2       	ldi	r30, 0x27	; 39
    29b0:	f0 e0       	ldi	r31, 0x00	; 0
    29b2:	80 81       	ld	r24, Z
    29b4:	87 7f       	andi	r24, 0xF7	; 247
    29b6:	8c 93       	st	X, r24
    29b8:	1c c0       	rjmp	.+56     	; 0x29f2 <ADC_Read+0x252>
		break;
	case ADC_7:
		SET_BIT(ADMUX,MUX0);
    29ba:	a7 e2       	ldi	r26, 0x27	; 39
    29bc:	b0 e0       	ldi	r27, 0x00	; 0
    29be:	e7 e2       	ldi	r30, 0x27	; 39
    29c0:	f0 e0       	ldi	r31, 0x00	; 0
    29c2:	80 81       	ld	r24, Z
    29c4:	81 60       	ori	r24, 0x01	; 1
    29c6:	8c 93       	st	X, r24
		SET_BIT(ADMUX,MUX1);
    29c8:	a7 e2       	ldi	r26, 0x27	; 39
    29ca:	b0 e0       	ldi	r27, 0x00	; 0
    29cc:	e7 e2       	ldi	r30, 0x27	; 39
    29ce:	f0 e0       	ldi	r31, 0x00	; 0
    29d0:	80 81       	ld	r24, Z
    29d2:	82 60       	ori	r24, 0x02	; 2
    29d4:	8c 93       	st	X, r24
		SET_BIT(ADMUX,MUX2);
    29d6:	a7 e2       	ldi	r26, 0x27	; 39
    29d8:	b0 e0       	ldi	r27, 0x00	; 0
    29da:	e7 e2       	ldi	r30, 0x27	; 39
    29dc:	f0 e0       	ldi	r31, 0x00	; 0
    29de:	80 81       	ld	r24, Z
    29e0:	84 60       	ori	r24, 0x04	; 4
    29e2:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,MUX3);
    29e4:	a7 e2       	ldi	r26, 0x27	; 39
    29e6:	b0 e0       	ldi	r27, 0x00	; 0
    29e8:	e7 e2       	ldi	r30, 0x27	; 39
    29ea:	f0 e0       	ldi	r31, 0x00	; 0
    29ec:	80 81       	ld	r24, Z
    29ee:	87 7f       	andi	r24, 0xF7	; 247
    29f0:	8c 93       	st	X, r24
		// Start Conversion
		SET_BIT(ADCSRA,ADSC);
   }

	// Wait till interrupt flag is cleared then reset it for the next conversion
	while(GET_BIT(ADCSRA,ADIF) == 0);
    29f2:	e6 e2       	ldi	r30, 0x26	; 38
    29f4:	f0 e0       	ldi	r31, 0x00	; 0
    29f6:	80 81       	ld	r24, Z
    29f8:	82 95       	swap	r24
    29fa:	8f 70       	andi	r24, 0x0F	; 15
    29fc:	88 2f       	mov	r24, r24
    29fe:	90 e0       	ldi	r25, 0x00	; 0
    2a00:	81 70       	andi	r24, 0x01	; 1
    2a02:	90 70       	andi	r25, 0x00	; 0
    2a04:	00 97       	sbiw	r24, 0x00	; 0
    2a06:	a9 f3       	breq	.-22     	; 0x29f2 <ADC_Read+0x252>
	SET_BIT(ADCSRA,ADIF);
    2a08:	a6 e2       	ldi	r26, 0x26	; 38
    2a0a:	b0 e0       	ldi	r27, 0x00	; 0
    2a0c:	e6 e2       	ldi	r30, 0x26	; 38
    2a0e:	f0 e0       	ldi	r31, 0x00	; 0
    2a10:	80 81       	ld	r24, Z
    2a12:	80 61       	ori	r24, 0x10	; 16
    2a14:	8c 93       	st	X, r24
	unit16 result = ADC;
    2a16:	e4 e2       	ldi	r30, 0x24	; 36
    2a18:	f0 e0       	ldi	r31, 0x00	; 0
    2a1a:	80 81       	ld	r24, Z
    2a1c:	91 81       	ldd	r25, Z+1	; 0x01
    2a1e:	9a 83       	std	Y+2, r25	; 0x02
    2a20:	89 83       	std	Y+1, r24	; 0x01
    return result;
    2a22:	89 81       	ldd	r24, Y+1	; 0x01
    2a24:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2a26:	0f 90       	pop	r0
    2a28:	0f 90       	pop	r0
    2a2a:	0f 90       	pop	r0
    2a2c:	0f 90       	pop	r0
    2a2e:	0f 90       	pop	r0
    2a30:	cf 91       	pop	r28
    2a32:	df 91       	pop	r29
    2a34:	08 95       	ret

00002a36 <Seg7_init>:
 *      Author: Mostafa Sayed
 */
#include "7Seg.h"

void Seg7_init()
{
    2a36:	df 93       	push	r29
    2a38:	cf 93       	push	r28
    2a3a:	cd b7       	in	r28, 0x3d	; 61
    2a3c:	de b7       	in	r29, 0x3e	; 62
    2a3e:	28 97       	sbiw	r28, 0x08	; 8
    2a40:	0f b6       	in	r0, 0x3f	; 63
    2a42:	f8 94       	cli
    2a44:	de bf       	out	0x3e, r29	; 62
    2a46:	0f be       	out	0x3f, r0	; 63
    2a48:	cd bf       	out	0x3d, r28	; 61
	{
		for(int i=0 ; i<7;i++) SET_BIT(DDRB,i);
	}
	else if(seg7Port == PORT_C)
		{
		for(int i=0 ; i<7;i++) SET_BIT(DDRC,i);
    2a4a:	1c 82       	std	Y+4, r1	; 0x04
    2a4c:	1b 82       	std	Y+3, r1	; 0x03
    2a4e:	15 c0       	rjmp	.+42     	; 0x2a7a <Seg7_init+0x44>
    2a50:	a4 e3       	ldi	r26, 0x34	; 52
    2a52:	b0 e0       	ldi	r27, 0x00	; 0
    2a54:	e4 e3       	ldi	r30, 0x34	; 52
    2a56:	f0 e0       	ldi	r31, 0x00	; 0
    2a58:	80 81       	ld	r24, Z
    2a5a:	28 2f       	mov	r18, r24
    2a5c:	81 e0       	ldi	r24, 0x01	; 1
    2a5e:	90 e0       	ldi	r25, 0x00	; 0
    2a60:	0b 80       	ldd	r0, Y+3	; 0x03
    2a62:	02 c0       	rjmp	.+4      	; 0x2a68 <Seg7_init+0x32>
    2a64:	88 0f       	add	r24, r24
    2a66:	99 1f       	adc	r25, r25
    2a68:	0a 94       	dec	r0
    2a6a:	e2 f7       	brpl	.-8      	; 0x2a64 <Seg7_init+0x2e>
    2a6c:	82 2b       	or	r24, r18
    2a6e:	8c 93       	st	X, r24
    2a70:	8b 81       	ldd	r24, Y+3	; 0x03
    2a72:	9c 81       	ldd	r25, Y+4	; 0x04
    2a74:	01 96       	adiw	r24, 0x01	; 1
    2a76:	9c 83       	std	Y+4, r25	; 0x04
    2a78:	8b 83       	std	Y+3, r24	; 0x03
    2a7a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a7c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a7e:	87 30       	cpi	r24, 0x07	; 7
    2a80:	91 05       	cpc	r25, r1
    2a82:	34 f3       	brlt	.-52     	; 0x2a50 <Seg7_init+0x1a>
	else if(seg7Port == PORT_D)
		{
		for(int i=0 ; i<7;i++) SET_BIT(DDRD,i);
		}

}
    2a84:	28 96       	adiw	r28, 0x08	; 8
    2a86:	0f b6       	in	r0, 0x3f	; 63
    2a88:	f8 94       	cli
    2a8a:	de bf       	out	0x3e, r29	; 62
    2a8c:	0f be       	out	0x3f, r0	; 63
    2a8e:	cd bf       	out	0x3d, r28	; 61
    2a90:	cf 91       	pop	r28
    2a92:	df 91       	pop	r29
    2a94:	08 95       	ret

00002a96 <Seg7_Write>:

void Seg7_Write(unit8 Num)
{
    2a96:	df 93       	push	r29
    2a98:	cf 93       	push	r28
    2a9a:	0f 92       	push	r0
    2a9c:	cd b7       	in	r28, 0x3d	; 61
    2a9e:	de b7       	in	r29, 0x3e	; 62
    2aa0:	89 83       	std	Y+1, r24	; 0x01
	GET_BIT(Num,0) ? DIO_Write(a,HIGH) : DIO_Write(a,LOW);
    2aa2:	89 81       	ldd	r24, Y+1	; 0x01
    2aa4:	88 2f       	mov	r24, r24
    2aa6:	90 e0       	ldi	r25, 0x00	; 0
    2aa8:	81 70       	andi	r24, 0x01	; 1
    2aaa:	90 70       	andi	r25, 0x00	; 0
    2aac:	88 23       	and	r24, r24
    2aae:	29 f0       	breq	.+10     	; 0x2aba <Seg7_Write+0x24>
    2ab0:	80 e1       	ldi	r24, 0x10	; 16
    2ab2:	61 e0       	ldi	r22, 0x01	; 1
    2ab4:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_Write>
    2ab8:	04 c0       	rjmp	.+8      	; 0x2ac2 <Seg7_Write+0x2c>
    2aba:	80 e1       	ldi	r24, 0x10	; 16
    2abc:	60 e0       	ldi	r22, 0x00	; 0
    2abe:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_Write>
	GET_BIT(Num,1) ? DIO_Write(b,HIGH) : DIO_Write(b,LOW);
    2ac2:	89 81       	ldd	r24, Y+1	; 0x01
    2ac4:	86 95       	lsr	r24
    2ac6:	88 2f       	mov	r24, r24
    2ac8:	90 e0       	ldi	r25, 0x00	; 0
    2aca:	81 70       	andi	r24, 0x01	; 1
    2acc:	90 70       	andi	r25, 0x00	; 0
    2ace:	88 23       	and	r24, r24
    2ad0:	29 f0       	breq	.+10     	; 0x2adc <Seg7_Write+0x46>
    2ad2:	81 e1       	ldi	r24, 0x11	; 17
    2ad4:	61 e0       	ldi	r22, 0x01	; 1
    2ad6:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_Write>
    2ada:	04 c0       	rjmp	.+8      	; 0x2ae4 <Seg7_Write+0x4e>
    2adc:	81 e1       	ldi	r24, 0x11	; 17
    2ade:	60 e0       	ldi	r22, 0x00	; 0
    2ae0:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_Write>
	GET_BIT(Num,2) ? DIO_Write(c,HIGH) : DIO_Write(c,LOW);
    2ae4:	89 81       	ldd	r24, Y+1	; 0x01
    2ae6:	86 95       	lsr	r24
    2ae8:	86 95       	lsr	r24
    2aea:	88 2f       	mov	r24, r24
    2aec:	90 e0       	ldi	r25, 0x00	; 0
    2aee:	81 70       	andi	r24, 0x01	; 1
    2af0:	90 70       	andi	r25, 0x00	; 0
    2af2:	88 23       	and	r24, r24
    2af4:	29 f0       	breq	.+10     	; 0x2b00 <Seg7_Write+0x6a>
    2af6:	82 e1       	ldi	r24, 0x12	; 18
    2af8:	61 e0       	ldi	r22, 0x01	; 1
    2afa:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_Write>
    2afe:	04 c0       	rjmp	.+8      	; 0x2b08 <Seg7_Write+0x72>
    2b00:	82 e1       	ldi	r24, 0x12	; 18
    2b02:	60 e0       	ldi	r22, 0x00	; 0
    2b04:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_Write>
	GET_BIT(Num,3) ? DIO_Write(d,HIGH) : DIO_Write(d,LOW);
    2b08:	89 81       	ldd	r24, Y+1	; 0x01
    2b0a:	86 95       	lsr	r24
    2b0c:	86 95       	lsr	r24
    2b0e:	86 95       	lsr	r24
    2b10:	88 2f       	mov	r24, r24
    2b12:	90 e0       	ldi	r25, 0x00	; 0
    2b14:	81 70       	andi	r24, 0x01	; 1
    2b16:	90 70       	andi	r25, 0x00	; 0
    2b18:	88 23       	and	r24, r24
    2b1a:	29 f0       	breq	.+10     	; 0x2b26 <Seg7_Write+0x90>
    2b1c:	83 e1       	ldi	r24, 0x13	; 19
    2b1e:	61 e0       	ldi	r22, 0x01	; 1
    2b20:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_Write>
    2b24:	04 c0       	rjmp	.+8      	; 0x2b2e <Seg7_Write+0x98>
    2b26:	83 e1       	ldi	r24, 0x13	; 19
    2b28:	60 e0       	ldi	r22, 0x00	; 0
    2b2a:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_Write>
	GET_BIT(Num,4) ? DIO_Write(e,HIGH) : DIO_Write(e,LOW);
    2b2e:	89 81       	ldd	r24, Y+1	; 0x01
    2b30:	82 95       	swap	r24
    2b32:	8f 70       	andi	r24, 0x0F	; 15
    2b34:	88 2f       	mov	r24, r24
    2b36:	90 e0       	ldi	r25, 0x00	; 0
    2b38:	81 70       	andi	r24, 0x01	; 1
    2b3a:	90 70       	andi	r25, 0x00	; 0
    2b3c:	88 23       	and	r24, r24
    2b3e:	29 f0       	breq	.+10     	; 0x2b4a <Seg7_Write+0xb4>
    2b40:	84 e1       	ldi	r24, 0x14	; 20
    2b42:	61 e0       	ldi	r22, 0x01	; 1
    2b44:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_Write>
    2b48:	04 c0       	rjmp	.+8      	; 0x2b52 <Seg7_Write+0xbc>
    2b4a:	84 e1       	ldi	r24, 0x14	; 20
    2b4c:	60 e0       	ldi	r22, 0x00	; 0
    2b4e:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_Write>
	GET_BIT(Num,5) ? DIO_Write(f,HIGH) : DIO_Write(f,LOW);
    2b52:	89 81       	ldd	r24, Y+1	; 0x01
    2b54:	82 95       	swap	r24
    2b56:	86 95       	lsr	r24
    2b58:	87 70       	andi	r24, 0x07	; 7
    2b5a:	88 2f       	mov	r24, r24
    2b5c:	90 e0       	ldi	r25, 0x00	; 0
    2b5e:	81 70       	andi	r24, 0x01	; 1
    2b60:	90 70       	andi	r25, 0x00	; 0
    2b62:	88 23       	and	r24, r24
    2b64:	29 f0       	breq	.+10     	; 0x2b70 <Seg7_Write+0xda>
    2b66:	85 e1       	ldi	r24, 0x15	; 21
    2b68:	61 e0       	ldi	r22, 0x01	; 1
    2b6a:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_Write>
    2b6e:	04 c0       	rjmp	.+8      	; 0x2b78 <Seg7_Write+0xe2>
    2b70:	85 e1       	ldi	r24, 0x15	; 21
    2b72:	60 e0       	ldi	r22, 0x00	; 0
    2b74:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_Write>
	GET_BIT(Num,6) ? DIO_Write(g,HIGH) : DIO_Write(g,LOW);
    2b78:	89 81       	ldd	r24, Y+1	; 0x01
    2b7a:	82 95       	swap	r24
    2b7c:	86 95       	lsr	r24
    2b7e:	86 95       	lsr	r24
    2b80:	83 70       	andi	r24, 0x03	; 3
    2b82:	88 2f       	mov	r24, r24
    2b84:	90 e0       	ldi	r25, 0x00	; 0
    2b86:	81 70       	andi	r24, 0x01	; 1
    2b88:	90 70       	andi	r25, 0x00	; 0
    2b8a:	88 23       	and	r24, r24
    2b8c:	29 f0       	breq	.+10     	; 0x2b98 <Seg7_Write+0x102>
    2b8e:	86 e1       	ldi	r24, 0x16	; 22
    2b90:	61 e0       	ldi	r22, 0x01	; 1
    2b92:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_Write>
    2b96:	04 c0       	rjmp	.+8      	; 0x2ba0 <Seg7_Write+0x10a>
    2b98:	86 e1       	ldi	r24, 0x16	; 22
    2b9a:	60 e0       	ldi	r22, 0x00	; 0
    2b9c:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_Write>
	GET_BIT(Num,7) ? DIO_Write(EN,HIGH) : DIO_Write(EN,LOW);
    2ba0:	89 81       	ldd	r24, Y+1	; 0x01
    2ba2:	88 23       	and	r24, r24
    2ba4:	2c f4       	brge	.+10     	; 0x2bb0 <Seg7_Write+0x11a>
    2ba6:	87 e1       	ldi	r24, 0x17	; 23
    2ba8:	61 e0       	ldi	r22, 0x01	; 1
    2baa:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_Write>
    2bae:	04 c0       	rjmp	.+8      	; 0x2bb8 <Seg7_Write+0x122>
    2bb0:	87 e1       	ldi	r24, 0x17	; 23
    2bb2:	60 e0       	ldi	r22, 0x00	; 0
    2bb4:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_Write>
}
    2bb8:	0f 90       	pop	r0
    2bba:	cf 91       	pop	r28
    2bbc:	df 91       	pop	r29
    2bbe:	08 95       	ret

00002bc0 <Trigger>:
#include "LCD.h"
#include <util/delay.h>
#include "../../Units.h"

static void Trigger()
{
    2bc0:	df 93       	push	r29
    2bc2:	cf 93       	push	r28
    2bc4:	cd b7       	in	r28, 0x3d	; 61
    2bc6:	de b7       	in	r29, 0x3e	; 62
    2bc8:	a6 97       	sbiw	r28, 0x26	; 38
    2bca:	0f b6       	in	r0, 0x3f	; 63
    2bcc:	f8 94       	cli
    2bce:	de bf       	out	0x3e, r29	; 62
    2bd0:	0f be       	out	0x3f, r0	; 63
    2bd2:	cd bf       	out	0x3d, r28	; 61
	  DIO_Write(E,HIGH);
    2bd4:	8b e0       	ldi	r24, 0x0B	; 11
    2bd6:	61 e0       	ldi	r22, 0x01	; 1
    2bd8:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_Write>
    2bdc:	80 e0       	ldi	r24, 0x00	; 0
    2bde:	90 e0       	ldi	r25, 0x00	; 0
    2be0:	a0 e0       	ldi	r26, 0x00	; 0
    2be2:	b0 e4       	ldi	r27, 0x40	; 64
    2be4:	8b a3       	std	Y+35, r24	; 0x23
    2be6:	9c a3       	std	Y+36, r25	; 0x24
    2be8:	ad a3       	std	Y+37, r26	; 0x25
    2bea:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bec:	6b a1       	ldd	r22, Y+35	; 0x23
    2bee:	7c a1       	ldd	r23, Y+36	; 0x24
    2bf0:	8d a1       	ldd	r24, Y+37	; 0x25
    2bf2:	9e a1       	ldd	r25, Y+38	; 0x26
    2bf4:	20 e0       	ldi	r18, 0x00	; 0
    2bf6:	30 e0       	ldi	r19, 0x00	; 0
    2bf8:	4a e7       	ldi	r20, 0x7A	; 122
    2bfa:	55 e4       	ldi	r21, 0x45	; 69
    2bfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c00:	dc 01       	movw	r26, r24
    2c02:	cb 01       	movw	r24, r22
    2c04:	8f 8f       	std	Y+31, r24	; 0x1f
    2c06:	98 a3       	std	Y+32, r25	; 0x20
    2c08:	a9 a3       	std	Y+33, r26	; 0x21
    2c0a:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2c0c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2c0e:	78 a1       	ldd	r23, Y+32	; 0x20
    2c10:	89 a1       	ldd	r24, Y+33	; 0x21
    2c12:	9a a1       	ldd	r25, Y+34	; 0x22
    2c14:	20 e0       	ldi	r18, 0x00	; 0
    2c16:	30 e0       	ldi	r19, 0x00	; 0
    2c18:	40 e8       	ldi	r20, 0x80	; 128
    2c1a:	5f e3       	ldi	r21, 0x3F	; 63
    2c1c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c20:	88 23       	and	r24, r24
    2c22:	2c f4       	brge	.+10     	; 0x2c2e <Trigger+0x6e>
		__ticks = 1;
    2c24:	81 e0       	ldi	r24, 0x01	; 1
    2c26:	90 e0       	ldi	r25, 0x00	; 0
    2c28:	9e 8f       	std	Y+30, r25	; 0x1e
    2c2a:	8d 8f       	std	Y+29, r24	; 0x1d
    2c2c:	3f c0       	rjmp	.+126    	; 0x2cac <Trigger+0xec>
	else if (__tmp > 65535)
    2c2e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2c30:	78 a1       	ldd	r23, Y+32	; 0x20
    2c32:	89 a1       	ldd	r24, Y+33	; 0x21
    2c34:	9a a1       	ldd	r25, Y+34	; 0x22
    2c36:	20 e0       	ldi	r18, 0x00	; 0
    2c38:	3f ef       	ldi	r19, 0xFF	; 255
    2c3a:	4f e7       	ldi	r20, 0x7F	; 127
    2c3c:	57 e4       	ldi	r21, 0x47	; 71
    2c3e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c42:	18 16       	cp	r1, r24
    2c44:	4c f5       	brge	.+82     	; 0x2c98 <Trigger+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c46:	6b a1       	ldd	r22, Y+35	; 0x23
    2c48:	7c a1       	ldd	r23, Y+36	; 0x24
    2c4a:	8d a1       	ldd	r24, Y+37	; 0x25
    2c4c:	9e a1       	ldd	r25, Y+38	; 0x26
    2c4e:	20 e0       	ldi	r18, 0x00	; 0
    2c50:	30 e0       	ldi	r19, 0x00	; 0
    2c52:	40 e2       	ldi	r20, 0x20	; 32
    2c54:	51 e4       	ldi	r21, 0x41	; 65
    2c56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c5a:	dc 01       	movw	r26, r24
    2c5c:	cb 01       	movw	r24, r22
    2c5e:	bc 01       	movw	r22, r24
    2c60:	cd 01       	movw	r24, r26
    2c62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c66:	dc 01       	movw	r26, r24
    2c68:	cb 01       	movw	r24, r22
    2c6a:	9e 8f       	std	Y+30, r25	; 0x1e
    2c6c:	8d 8f       	std	Y+29, r24	; 0x1d
    2c6e:	0f c0       	rjmp	.+30     	; 0x2c8e <Trigger+0xce>
    2c70:	80 e9       	ldi	r24, 0x90	; 144
    2c72:	91 e0       	ldi	r25, 0x01	; 1
    2c74:	9c 8f       	std	Y+28, r25	; 0x1c
    2c76:	8b 8f       	std	Y+27, r24	; 0x1b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2c78:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c7a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c7c:	01 97       	sbiw	r24, 0x01	; 1
    2c7e:	f1 f7       	brne	.-4      	; 0x2c7c <Trigger+0xbc>
    2c80:	9c 8f       	std	Y+28, r25	; 0x1c
    2c82:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c84:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c86:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c88:	01 97       	sbiw	r24, 0x01	; 1
    2c8a:	9e 8f       	std	Y+30, r25	; 0x1e
    2c8c:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c8e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c90:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c92:	00 97       	sbiw	r24, 0x00	; 0
    2c94:	69 f7       	brne	.-38     	; 0x2c70 <Trigger+0xb0>
    2c96:	14 c0       	rjmp	.+40     	; 0x2cc0 <Trigger+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c98:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2c9a:	78 a1       	ldd	r23, Y+32	; 0x20
    2c9c:	89 a1       	ldd	r24, Y+33	; 0x21
    2c9e:	9a a1       	ldd	r25, Y+34	; 0x22
    2ca0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ca4:	dc 01       	movw	r26, r24
    2ca6:	cb 01       	movw	r24, r22
    2ca8:	9e 8f       	std	Y+30, r25	; 0x1e
    2caa:	8d 8f       	std	Y+29, r24	; 0x1d
    2cac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2cae:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2cb0:	9a 8f       	std	Y+26, r25	; 0x1a
    2cb2:	89 8f       	std	Y+25, r24	; 0x19
    2cb4:	89 8d       	ldd	r24, Y+25	; 0x19
    2cb6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2cb8:	01 97       	sbiw	r24, 0x01	; 1
    2cba:	f1 f7       	brne	.-4      	; 0x2cb8 <Trigger+0xf8>
    2cbc:	9a 8f       	std	Y+26, r25	; 0x1a
    2cbe:	89 8f       	std	Y+25, r24	; 0x19
	  _delay_ms(2);
	  DIO_Write(E,LOW);
    2cc0:	8b e0       	ldi	r24, 0x0B	; 11
    2cc2:	60 e0       	ldi	r22, 0x00	; 0
    2cc4:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_Write>
    2cc8:	80 e0       	ldi	r24, 0x00	; 0
    2cca:	90 e0       	ldi	r25, 0x00	; 0
    2ccc:	a0 ea       	ldi	r26, 0xA0	; 160
    2cce:	b1 e4       	ldi	r27, 0x41	; 65
    2cd0:	8d 8b       	std	Y+21, r24	; 0x15
    2cd2:	9e 8b       	std	Y+22, r25	; 0x16
    2cd4:	af 8b       	std	Y+23, r26	; 0x17
    2cd6:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2cd8:	6d 89       	ldd	r22, Y+21	; 0x15
    2cda:	7e 89       	ldd	r23, Y+22	; 0x16
    2cdc:	8f 89       	ldd	r24, Y+23	; 0x17
    2cde:	98 8d       	ldd	r25, Y+24	; 0x18
    2ce0:	2b ea       	ldi	r18, 0xAB	; 171
    2ce2:	3a ea       	ldi	r19, 0xAA	; 170
    2ce4:	4a ea       	ldi	r20, 0xAA	; 170
    2ce6:	50 e4       	ldi	r21, 0x40	; 64
    2ce8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cec:	dc 01       	movw	r26, r24
    2cee:	cb 01       	movw	r24, r22
    2cf0:	89 8b       	std	Y+17, r24	; 0x11
    2cf2:	9a 8b       	std	Y+18, r25	; 0x12
    2cf4:	ab 8b       	std	Y+19, r26	; 0x13
    2cf6:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2cf8:	69 89       	ldd	r22, Y+17	; 0x11
    2cfa:	7a 89       	ldd	r23, Y+18	; 0x12
    2cfc:	8b 89       	ldd	r24, Y+19	; 0x13
    2cfe:	9c 89       	ldd	r25, Y+20	; 0x14
    2d00:	20 e0       	ldi	r18, 0x00	; 0
    2d02:	30 e0       	ldi	r19, 0x00	; 0
    2d04:	40 e8       	ldi	r20, 0x80	; 128
    2d06:	5f e3       	ldi	r21, 0x3F	; 63
    2d08:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d0c:	88 23       	and	r24, r24
    2d0e:	1c f4       	brge	.+6      	; 0x2d16 <Trigger+0x156>
		__ticks = 1;
    2d10:	81 e0       	ldi	r24, 0x01	; 1
    2d12:	88 8b       	std	Y+16, r24	; 0x10
    2d14:	91 c0       	rjmp	.+290    	; 0x2e38 <Trigger+0x278>
	else if (__tmp > 255)
    2d16:	69 89       	ldd	r22, Y+17	; 0x11
    2d18:	7a 89       	ldd	r23, Y+18	; 0x12
    2d1a:	8b 89       	ldd	r24, Y+19	; 0x13
    2d1c:	9c 89       	ldd	r25, Y+20	; 0x14
    2d1e:	20 e0       	ldi	r18, 0x00	; 0
    2d20:	30 e0       	ldi	r19, 0x00	; 0
    2d22:	4f e7       	ldi	r20, 0x7F	; 127
    2d24:	53 e4       	ldi	r21, 0x43	; 67
    2d26:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d2a:	18 16       	cp	r1, r24
    2d2c:	0c f0       	brlt	.+2      	; 0x2d30 <Trigger+0x170>
    2d2e:	7b c0       	rjmp	.+246    	; 0x2e26 <Trigger+0x266>
	{
		_delay_ms(__us / 1000.0);
    2d30:	6d 89       	ldd	r22, Y+21	; 0x15
    2d32:	7e 89       	ldd	r23, Y+22	; 0x16
    2d34:	8f 89       	ldd	r24, Y+23	; 0x17
    2d36:	98 8d       	ldd	r25, Y+24	; 0x18
    2d38:	20 e0       	ldi	r18, 0x00	; 0
    2d3a:	30 e0       	ldi	r19, 0x00	; 0
    2d3c:	4a e7       	ldi	r20, 0x7A	; 122
    2d3e:	54 e4       	ldi	r21, 0x44	; 68
    2d40:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2d44:	dc 01       	movw	r26, r24
    2d46:	cb 01       	movw	r24, r22
    2d48:	8c 87       	std	Y+12, r24	; 0x0c
    2d4a:	9d 87       	std	Y+13, r25	; 0x0d
    2d4c:	ae 87       	std	Y+14, r26	; 0x0e
    2d4e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d50:	6c 85       	ldd	r22, Y+12	; 0x0c
    2d52:	7d 85       	ldd	r23, Y+13	; 0x0d
    2d54:	8e 85       	ldd	r24, Y+14	; 0x0e
    2d56:	9f 85       	ldd	r25, Y+15	; 0x0f
    2d58:	20 e0       	ldi	r18, 0x00	; 0
    2d5a:	30 e0       	ldi	r19, 0x00	; 0
    2d5c:	4a e7       	ldi	r20, 0x7A	; 122
    2d5e:	55 e4       	ldi	r21, 0x45	; 69
    2d60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d64:	dc 01       	movw	r26, r24
    2d66:	cb 01       	movw	r24, r22
    2d68:	88 87       	std	Y+8, r24	; 0x08
    2d6a:	99 87       	std	Y+9, r25	; 0x09
    2d6c:	aa 87       	std	Y+10, r26	; 0x0a
    2d6e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2d70:	68 85       	ldd	r22, Y+8	; 0x08
    2d72:	79 85       	ldd	r23, Y+9	; 0x09
    2d74:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d76:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d78:	20 e0       	ldi	r18, 0x00	; 0
    2d7a:	30 e0       	ldi	r19, 0x00	; 0
    2d7c:	40 e8       	ldi	r20, 0x80	; 128
    2d7e:	5f e3       	ldi	r21, 0x3F	; 63
    2d80:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d84:	88 23       	and	r24, r24
    2d86:	2c f4       	brge	.+10     	; 0x2d92 <Trigger+0x1d2>
		__ticks = 1;
    2d88:	81 e0       	ldi	r24, 0x01	; 1
    2d8a:	90 e0       	ldi	r25, 0x00	; 0
    2d8c:	9f 83       	std	Y+7, r25	; 0x07
    2d8e:	8e 83       	std	Y+6, r24	; 0x06
    2d90:	3f c0       	rjmp	.+126    	; 0x2e10 <Trigger+0x250>
	else if (__tmp > 65535)
    2d92:	68 85       	ldd	r22, Y+8	; 0x08
    2d94:	79 85       	ldd	r23, Y+9	; 0x09
    2d96:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d98:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d9a:	20 e0       	ldi	r18, 0x00	; 0
    2d9c:	3f ef       	ldi	r19, 0xFF	; 255
    2d9e:	4f e7       	ldi	r20, 0x7F	; 127
    2da0:	57 e4       	ldi	r21, 0x47	; 71
    2da2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2da6:	18 16       	cp	r1, r24
    2da8:	4c f5       	brge	.+82     	; 0x2dfc <Trigger+0x23c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2daa:	6c 85       	ldd	r22, Y+12	; 0x0c
    2dac:	7d 85       	ldd	r23, Y+13	; 0x0d
    2dae:	8e 85       	ldd	r24, Y+14	; 0x0e
    2db0:	9f 85       	ldd	r25, Y+15	; 0x0f
    2db2:	20 e0       	ldi	r18, 0x00	; 0
    2db4:	30 e0       	ldi	r19, 0x00	; 0
    2db6:	40 e2       	ldi	r20, 0x20	; 32
    2db8:	51 e4       	ldi	r21, 0x41	; 65
    2dba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dbe:	dc 01       	movw	r26, r24
    2dc0:	cb 01       	movw	r24, r22
    2dc2:	bc 01       	movw	r22, r24
    2dc4:	cd 01       	movw	r24, r26
    2dc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dca:	dc 01       	movw	r26, r24
    2dcc:	cb 01       	movw	r24, r22
    2dce:	9f 83       	std	Y+7, r25	; 0x07
    2dd0:	8e 83       	std	Y+6, r24	; 0x06
    2dd2:	0f c0       	rjmp	.+30     	; 0x2df2 <Trigger+0x232>
    2dd4:	80 e9       	ldi	r24, 0x90	; 144
    2dd6:	91 e0       	ldi	r25, 0x01	; 1
    2dd8:	9d 83       	std	Y+5, r25	; 0x05
    2dda:	8c 83       	std	Y+4, r24	; 0x04
    2ddc:	8c 81       	ldd	r24, Y+4	; 0x04
    2dde:	9d 81       	ldd	r25, Y+5	; 0x05
    2de0:	01 97       	sbiw	r24, 0x01	; 1
    2de2:	f1 f7       	brne	.-4      	; 0x2de0 <Trigger+0x220>
    2de4:	9d 83       	std	Y+5, r25	; 0x05
    2de6:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2de8:	8e 81       	ldd	r24, Y+6	; 0x06
    2dea:	9f 81       	ldd	r25, Y+7	; 0x07
    2dec:	01 97       	sbiw	r24, 0x01	; 1
    2dee:	9f 83       	std	Y+7, r25	; 0x07
    2df0:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2df2:	8e 81       	ldd	r24, Y+6	; 0x06
    2df4:	9f 81       	ldd	r25, Y+7	; 0x07
    2df6:	00 97       	sbiw	r24, 0x00	; 0
    2df8:	69 f7       	brne	.-38     	; 0x2dd4 <Trigger+0x214>
    2dfa:	24 c0       	rjmp	.+72     	; 0x2e44 <Trigger+0x284>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dfc:	68 85       	ldd	r22, Y+8	; 0x08
    2dfe:	79 85       	ldd	r23, Y+9	; 0x09
    2e00:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e02:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e08:	dc 01       	movw	r26, r24
    2e0a:	cb 01       	movw	r24, r22
    2e0c:	9f 83       	std	Y+7, r25	; 0x07
    2e0e:	8e 83       	std	Y+6, r24	; 0x06
    2e10:	8e 81       	ldd	r24, Y+6	; 0x06
    2e12:	9f 81       	ldd	r25, Y+7	; 0x07
    2e14:	9b 83       	std	Y+3, r25	; 0x03
    2e16:	8a 83       	std	Y+2, r24	; 0x02
    2e18:	8a 81       	ldd	r24, Y+2	; 0x02
    2e1a:	9b 81       	ldd	r25, Y+3	; 0x03
    2e1c:	01 97       	sbiw	r24, 0x01	; 1
    2e1e:	f1 f7       	brne	.-4      	; 0x2e1c <Trigger+0x25c>
    2e20:	9b 83       	std	Y+3, r25	; 0x03
    2e22:	8a 83       	std	Y+2, r24	; 0x02
    2e24:	0f c0       	rjmp	.+30     	; 0x2e44 <Trigger+0x284>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2e26:	69 89       	ldd	r22, Y+17	; 0x11
    2e28:	7a 89       	ldd	r23, Y+18	; 0x12
    2e2a:	8b 89       	ldd	r24, Y+19	; 0x13
    2e2c:	9c 89       	ldd	r25, Y+20	; 0x14
    2e2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e32:	dc 01       	movw	r26, r24
    2e34:	cb 01       	movw	r24, r22
    2e36:	88 8b       	std	Y+16, r24	; 0x10
    2e38:	88 89       	ldd	r24, Y+16	; 0x10
    2e3a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2e3c:	89 81       	ldd	r24, Y+1	; 0x01
    2e3e:	8a 95       	dec	r24
    2e40:	f1 f7       	brne	.-4      	; 0x2e3e <Trigger+0x27e>
    2e42:	89 83       	std	Y+1, r24	; 0x01
	  _delay_us(20);
}
    2e44:	a6 96       	adiw	r28, 0x26	; 38
    2e46:	0f b6       	in	r0, 0x3f	; 63
    2e48:	f8 94       	cli
    2e4a:	de bf       	out	0x3e, r29	; 62
    2e4c:	0f be       	out	0x3f, r0	; 63
    2e4e:	cd bf       	out	0x3d, r28	; 61
    2e50:	cf 91       	pop	r28
    2e52:	df 91       	pop	r29
    2e54:	08 95       	ret

00002e56 <LCD_init>:

void LCD_init()
{
    2e56:	df 93       	push	r29
    2e58:	cf 93       	push	r28
    2e5a:	cd b7       	in	r28, 0x3d	; 61
    2e5c:	de b7       	in	r29, 0x3e	; 62
	//DIO_init();
	LCD_SendCMD(BIT4MODE);
    2e5e:	82 e3       	ldi	r24, 0x32	; 50
    2e60:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <LCD_SendCMD>
	LCD_SendCMD(CURSOR_BLINK_ON);
    2e64:	8f e0       	ldi	r24, 0x0F	; 15
    2e66:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <LCD_SendCMD>
	LCD_SendCMD(CURSOR_MOVE_RIGHT);
    2e6a:	86 e0       	ldi	r24, 0x06	; 6
    2e6c:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <LCD_SendCMD>
	LCD_SendCMD(CLEAR_DISPLAY);
    2e70:	81 e0       	ldi	r24, 0x01	; 1
    2e72:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <LCD_SendCMD>

}
    2e76:	cf 91       	pop	r28
    2e78:	df 91       	pop	r29
    2e7a:	08 95       	ret

00002e7c <LCD_SendCMD>:
void LCD_SendCMD(unit8 cmd)
{
    2e7c:	df 93       	push	r29
    2e7e:	cf 93       	push	r28
    2e80:	cd b7       	in	r28, 0x3d	; 61
    2e82:	de b7       	in	r29, 0x3e	; 62
    2e84:	69 97       	sbiw	r28, 0x19	; 25
    2e86:	0f b6       	in	r0, 0x3f	; 63
    2e88:	f8 94       	cli
    2e8a:	de bf       	out	0x3e, r29	; 62
    2e8c:	0f be       	out	0x3f, r0	; 63
    2e8e:	cd bf       	out	0x3d, r28	; 61
    2e90:	89 8f       	std	Y+25, r24	; 0x19
	  DIO_Write(RS,LOW);
    2e92:	89 e0       	ldi	r24, 0x09	; 9
    2e94:	60 e0       	ldi	r22, 0x00	; 0
    2e96:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_Write>
	  DIO_Write(RW,LOW);
    2e9a:	8a e0       	ldi	r24, 0x0A	; 10
    2e9c:	60 e0       	ldi	r22, 0x00	; 0
    2e9e:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_Write>
	  GET_BIT(cmd,7) ? DIO_Write(D7,HIGH) : DIO_Write(D7,LOW);
    2ea2:	89 8d       	ldd	r24, Y+25	; 0x19
    2ea4:	88 23       	and	r24, r24
    2ea6:	2c f4       	brge	.+10     	; 0x2eb2 <LCD_SendCMD+0x36>
    2ea8:	8f e0       	ldi	r24, 0x0F	; 15
    2eaa:	61 e0       	ldi	r22, 0x01	; 1
    2eac:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_Write>
    2eb0:	04 c0       	rjmp	.+8      	; 0x2eba <LCD_SendCMD+0x3e>
    2eb2:	8f e0       	ldi	r24, 0x0F	; 15
    2eb4:	60 e0       	ldi	r22, 0x00	; 0
    2eb6:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_Write>
	  GET_BIT(cmd,6) ? DIO_Write(D6,HIGH) : DIO_Write(D6,LOW);
    2eba:	89 8d       	ldd	r24, Y+25	; 0x19
    2ebc:	82 95       	swap	r24
    2ebe:	86 95       	lsr	r24
    2ec0:	86 95       	lsr	r24
    2ec2:	83 70       	andi	r24, 0x03	; 3
    2ec4:	88 2f       	mov	r24, r24
    2ec6:	90 e0       	ldi	r25, 0x00	; 0
    2ec8:	81 70       	andi	r24, 0x01	; 1
    2eca:	90 70       	andi	r25, 0x00	; 0
    2ecc:	88 23       	and	r24, r24
    2ece:	29 f0       	breq	.+10     	; 0x2eda <LCD_SendCMD+0x5e>
    2ed0:	8e e0       	ldi	r24, 0x0E	; 14
    2ed2:	61 e0       	ldi	r22, 0x01	; 1
    2ed4:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_Write>
    2ed8:	04 c0       	rjmp	.+8      	; 0x2ee2 <LCD_SendCMD+0x66>
    2eda:	8e e0       	ldi	r24, 0x0E	; 14
    2edc:	60 e0       	ldi	r22, 0x00	; 0
    2ede:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_Write>
	  GET_BIT(cmd,5) ? DIO_Write(D5,HIGH) : DIO_Write(D5,LOW);
    2ee2:	89 8d       	ldd	r24, Y+25	; 0x19
    2ee4:	82 95       	swap	r24
    2ee6:	86 95       	lsr	r24
    2ee8:	87 70       	andi	r24, 0x07	; 7
    2eea:	88 2f       	mov	r24, r24
    2eec:	90 e0       	ldi	r25, 0x00	; 0
    2eee:	81 70       	andi	r24, 0x01	; 1
    2ef0:	90 70       	andi	r25, 0x00	; 0
    2ef2:	88 23       	and	r24, r24
    2ef4:	29 f0       	breq	.+10     	; 0x2f00 <LCD_SendCMD+0x84>
    2ef6:	8d e0       	ldi	r24, 0x0D	; 13
    2ef8:	61 e0       	ldi	r22, 0x01	; 1
    2efa:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_Write>
    2efe:	04 c0       	rjmp	.+8      	; 0x2f08 <LCD_SendCMD+0x8c>
    2f00:	8d e0       	ldi	r24, 0x0D	; 13
    2f02:	60 e0       	ldi	r22, 0x00	; 0
    2f04:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_Write>
	  GET_BIT(cmd,4) ? DIO_Write(D4,HIGH) : DIO_Write(D4,LOW);
    2f08:	89 8d       	ldd	r24, Y+25	; 0x19
    2f0a:	82 95       	swap	r24
    2f0c:	8f 70       	andi	r24, 0x0F	; 15
    2f0e:	88 2f       	mov	r24, r24
    2f10:	90 e0       	ldi	r25, 0x00	; 0
    2f12:	81 70       	andi	r24, 0x01	; 1
    2f14:	90 70       	andi	r25, 0x00	; 0
    2f16:	88 23       	and	r24, r24
    2f18:	29 f0       	breq	.+10     	; 0x2f24 <LCD_SendCMD+0xa8>
    2f1a:	8c e0       	ldi	r24, 0x0C	; 12
    2f1c:	61 e0       	ldi	r22, 0x01	; 1
    2f1e:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_Write>
    2f22:	04 c0       	rjmp	.+8      	; 0x2f2c <LCD_SendCMD+0xb0>
    2f24:	8c e0       	ldi	r24, 0x0C	; 12
    2f26:	60 e0       	ldi	r22, 0x00	; 0
    2f28:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_Write>
	  Trigger();
    2f2c:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <Trigger>
	  GET_BIT(cmd,3) ? DIO_Write(D7,HIGH) : DIO_Write(D7,LOW);
    2f30:	89 8d       	ldd	r24, Y+25	; 0x19
    2f32:	86 95       	lsr	r24
    2f34:	86 95       	lsr	r24
    2f36:	86 95       	lsr	r24
    2f38:	88 2f       	mov	r24, r24
    2f3a:	90 e0       	ldi	r25, 0x00	; 0
    2f3c:	81 70       	andi	r24, 0x01	; 1
    2f3e:	90 70       	andi	r25, 0x00	; 0
    2f40:	88 23       	and	r24, r24
    2f42:	29 f0       	breq	.+10     	; 0x2f4e <LCD_SendCMD+0xd2>
    2f44:	8f e0       	ldi	r24, 0x0F	; 15
    2f46:	61 e0       	ldi	r22, 0x01	; 1
    2f48:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_Write>
    2f4c:	04 c0       	rjmp	.+8      	; 0x2f56 <LCD_SendCMD+0xda>
    2f4e:	8f e0       	ldi	r24, 0x0F	; 15
    2f50:	60 e0       	ldi	r22, 0x00	; 0
    2f52:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_Write>
	  GET_BIT(cmd,2) ? DIO_Write(D6,HIGH) : DIO_Write(D6,LOW);
    2f56:	89 8d       	ldd	r24, Y+25	; 0x19
    2f58:	86 95       	lsr	r24
    2f5a:	86 95       	lsr	r24
    2f5c:	88 2f       	mov	r24, r24
    2f5e:	90 e0       	ldi	r25, 0x00	; 0
    2f60:	81 70       	andi	r24, 0x01	; 1
    2f62:	90 70       	andi	r25, 0x00	; 0
    2f64:	88 23       	and	r24, r24
    2f66:	29 f0       	breq	.+10     	; 0x2f72 <LCD_SendCMD+0xf6>
    2f68:	8e e0       	ldi	r24, 0x0E	; 14
    2f6a:	61 e0       	ldi	r22, 0x01	; 1
    2f6c:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_Write>
    2f70:	04 c0       	rjmp	.+8      	; 0x2f7a <LCD_SendCMD+0xfe>
    2f72:	8e e0       	ldi	r24, 0x0E	; 14
    2f74:	60 e0       	ldi	r22, 0x00	; 0
    2f76:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_Write>
	  GET_BIT(cmd,1) ? DIO_Write(D5,HIGH) : DIO_Write(D5,LOW);
    2f7a:	89 8d       	ldd	r24, Y+25	; 0x19
    2f7c:	86 95       	lsr	r24
    2f7e:	88 2f       	mov	r24, r24
    2f80:	90 e0       	ldi	r25, 0x00	; 0
    2f82:	81 70       	andi	r24, 0x01	; 1
    2f84:	90 70       	andi	r25, 0x00	; 0
    2f86:	88 23       	and	r24, r24
    2f88:	29 f0       	breq	.+10     	; 0x2f94 <LCD_SendCMD+0x118>
    2f8a:	8d e0       	ldi	r24, 0x0D	; 13
    2f8c:	61 e0       	ldi	r22, 0x01	; 1
    2f8e:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_Write>
    2f92:	04 c0       	rjmp	.+8      	; 0x2f9c <LCD_SendCMD+0x120>
    2f94:	8d e0       	ldi	r24, 0x0D	; 13
    2f96:	60 e0       	ldi	r22, 0x00	; 0
    2f98:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_Write>
	  GET_BIT(cmd,0) ? DIO_Write(D4,HIGH) : DIO_Write(D4,LOW);
    2f9c:	89 8d       	ldd	r24, Y+25	; 0x19
    2f9e:	88 2f       	mov	r24, r24
    2fa0:	90 e0       	ldi	r25, 0x00	; 0
    2fa2:	81 70       	andi	r24, 0x01	; 1
    2fa4:	90 70       	andi	r25, 0x00	; 0
    2fa6:	88 23       	and	r24, r24
    2fa8:	29 f0       	breq	.+10     	; 0x2fb4 <LCD_SendCMD+0x138>
    2faa:	8c e0       	ldi	r24, 0x0C	; 12
    2fac:	61 e0       	ldi	r22, 0x01	; 1
    2fae:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_Write>
    2fb2:	04 c0       	rjmp	.+8      	; 0x2fbc <LCD_SendCMD+0x140>
    2fb4:	8c e0       	ldi	r24, 0x0C	; 12
    2fb6:	60 e0       	ldi	r22, 0x00	; 0
    2fb8:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_Write>
	  Trigger();
    2fbc:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <Trigger>
    2fc0:	80 e0       	ldi	r24, 0x00	; 0
    2fc2:	90 e0       	ldi	r25, 0x00	; 0
    2fc4:	a0 ea       	ldi	r26, 0xA0	; 160
    2fc6:	b1 e4       	ldi	r27, 0x41	; 65
    2fc8:	8d 8b       	std	Y+21, r24	; 0x15
    2fca:	9e 8b       	std	Y+22, r25	; 0x16
    2fcc:	af 8b       	std	Y+23, r26	; 0x17
    2fce:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2fd0:	6d 89       	ldd	r22, Y+21	; 0x15
    2fd2:	7e 89       	ldd	r23, Y+22	; 0x16
    2fd4:	8f 89       	ldd	r24, Y+23	; 0x17
    2fd6:	98 8d       	ldd	r25, Y+24	; 0x18
    2fd8:	2b ea       	ldi	r18, 0xAB	; 171
    2fda:	3a ea       	ldi	r19, 0xAA	; 170
    2fdc:	4a ea       	ldi	r20, 0xAA	; 170
    2fde:	50 e4       	ldi	r21, 0x40	; 64
    2fe0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fe4:	dc 01       	movw	r26, r24
    2fe6:	cb 01       	movw	r24, r22
    2fe8:	89 8b       	std	Y+17, r24	; 0x11
    2fea:	9a 8b       	std	Y+18, r25	; 0x12
    2fec:	ab 8b       	std	Y+19, r26	; 0x13
    2fee:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2ff0:	69 89       	ldd	r22, Y+17	; 0x11
    2ff2:	7a 89       	ldd	r23, Y+18	; 0x12
    2ff4:	8b 89       	ldd	r24, Y+19	; 0x13
    2ff6:	9c 89       	ldd	r25, Y+20	; 0x14
    2ff8:	20 e0       	ldi	r18, 0x00	; 0
    2ffa:	30 e0       	ldi	r19, 0x00	; 0
    2ffc:	40 e8       	ldi	r20, 0x80	; 128
    2ffe:	5f e3       	ldi	r21, 0x3F	; 63
    3000:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3004:	88 23       	and	r24, r24
    3006:	1c f4       	brge	.+6      	; 0x300e <LCD_SendCMD+0x192>
		__ticks = 1;
    3008:	81 e0       	ldi	r24, 0x01	; 1
    300a:	88 8b       	std	Y+16, r24	; 0x10
    300c:	91 c0       	rjmp	.+290    	; 0x3130 <LCD_SendCMD+0x2b4>
	else if (__tmp > 255)
    300e:	69 89       	ldd	r22, Y+17	; 0x11
    3010:	7a 89       	ldd	r23, Y+18	; 0x12
    3012:	8b 89       	ldd	r24, Y+19	; 0x13
    3014:	9c 89       	ldd	r25, Y+20	; 0x14
    3016:	20 e0       	ldi	r18, 0x00	; 0
    3018:	30 e0       	ldi	r19, 0x00	; 0
    301a:	4f e7       	ldi	r20, 0x7F	; 127
    301c:	53 e4       	ldi	r21, 0x43	; 67
    301e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3022:	18 16       	cp	r1, r24
    3024:	0c f0       	brlt	.+2      	; 0x3028 <LCD_SendCMD+0x1ac>
    3026:	7b c0       	rjmp	.+246    	; 0x311e <LCD_SendCMD+0x2a2>
	{
		_delay_ms(__us / 1000.0);
    3028:	6d 89       	ldd	r22, Y+21	; 0x15
    302a:	7e 89       	ldd	r23, Y+22	; 0x16
    302c:	8f 89       	ldd	r24, Y+23	; 0x17
    302e:	98 8d       	ldd	r25, Y+24	; 0x18
    3030:	20 e0       	ldi	r18, 0x00	; 0
    3032:	30 e0       	ldi	r19, 0x00	; 0
    3034:	4a e7       	ldi	r20, 0x7A	; 122
    3036:	54 e4       	ldi	r21, 0x44	; 68
    3038:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    303c:	dc 01       	movw	r26, r24
    303e:	cb 01       	movw	r24, r22
    3040:	8c 87       	std	Y+12, r24	; 0x0c
    3042:	9d 87       	std	Y+13, r25	; 0x0d
    3044:	ae 87       	std	Y+14, r26	; 0x0e
    3046:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3048:	6c 85       	ldd	r22, Y+12	; 0x0c
    304a:	7d 85       	ldd	r23, Y+13	; 0x0d
    304c:	8e 85       	ldd	r24, Y+14	; 0x0e
    304e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3050:	20 e0       	ldi	r18, 0x00	; 0
    3052:	30 e0       	ldi	r19, 0x00	; 0
    3054:	4a e7       	ldi	r20, 0x7A	; 122
    3056:	55 e4       	ldi	r21, 0x45	; 69
    3058:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    305c:	dc 01       	movw	r26, r24
    305e:	cb 01       	movw	r24, r22
    3060:	88 87       	std	Y+8, r24	; 0x08
    3062:	99 87       	std	Y+9, r25	; 0x09
    3064:	aa 87       	std	Y+10, r26	; 0x0a
    3066:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3068:	68 85       	ldd	r22, Y+8	; 0x08
    306a:	79 85       	ldd	r23, Y+9	; 0x09
    306c:	8a 85       	ldd	r24, Y+10	; 0x0a
    306e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3070:	20 e0       	ldi	r18, 0x00	; 0
    3072:	30 e0       	ldi	r19, 0x00	; 0
    3074:	40 e8       	ldi	r20, 0x80	; 128
    3076:	5f e3       	ldi	r21, 0x3F	; 63
    3078:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    307c:	88 23       	and	r24, r24
    307e:	2c f4       	brge	.+10     	; 0x308a <LCD_SendCMD+0x20e>
		__ticks = 1;
    3080:	81 e0       	ldi	r24, 0x01	; 1
    3082:	90 e0       	ldi	r25, 0x00	; 0
    3084:	9f 83       	std	Y+7, r25	; 0x07
    3086:	8e 83       	std	Y+6, r24	; 0x06
    3088:	3f c0       	rjmp	.+126    	; 0x3108 <LCD_SendCMD+0x28c>
	else if (__tmp > 65535)
    308a:	68 85       	ldd	r22, Y+8	; 0x08
    308c:	79 85       	ldd	r23, Y+9	; 0x09
    308e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3090:	9b 85       	ldd	r25, Y+11	; 0x0b
    3092:	20 e0       	ldi	r18, 0x00	; 0
    3094:	3f ef       	ldi	r19, 0xFF	; 255
    3096:	4f e7       	ldi	r20, 0x7F	; 127
    3098:	57 e4       	ldi	r21, 0x47	; 71
    309a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    309e:	18 16       	cp	r1, r24
    30a0:	4c f5       	brge	.+82     	; 0x30f4 <LCD_SendCMD+0x278>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30a2:	6c 85       	ldd	r22, Y+12	; 0x0c
    30a4:	7d 85       	ldd	r23, Y+13	; 0x0d
    30a6:	8e 85       	ldd	r24, Y+14	; 0x0e
    30a8:	9f 85       	ldd	r25, Y+15	; 0x0f
    30aa:	20 e0       	ldi	r18, 0x00	; 0
    30ac:	30 e0       	ldi	r19, 0x00	; 0
    30ae:	40 e2       	ldi	r20, 0x20	; 32
    30b0:	51 e4       	ldi	r21, 0x41	; 65
    30b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30b6:	dc 01       	movw	r26, r24
    30b8:	cb 01       	movw	r24, r22
    30ba:	bc 01       	movw	r22, r24
    30bc:	cd 01       	movw	r24, r26
    30be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30c2:	dc 01       	movw	r26, r24
    30c4:	cb 01       	movw	r24, r22
    30c6:	9f 83       	std	Y+7, r25	; 0x07
    30c8:	8e 83       	std	Y+6, r24	; 0x06
    30ca:	0f c0       	rjmp	.+30     	; 0x30ea <LCD_SendCMD+0x26e>
    30cc:	80 e9       	ldi	r24, 0x90	; 144
    30ce:	91 e0       	ldi	r25, 0x01	; 1
    30d0:	9d 83       	std	Y+5, r25	; 0x05
    30d2:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    30d4:	8c 81       	ldd	r24, Y+4	; 0x04
    30d6:	9d 81       	ldd	r25, Y+5	; 0x05
    30d8:	01 97       	sbiw	r24, 0x01	; 1
    30da:	f1 f7       	brne	.-4      	; 0x30d8 <LCD_SendCMD+0x25c>
    30dc:	9d 83       	std	Y+5, r25	; 0x05
    30de:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30e0:	8e 81       	ldd	r24, Y+6	; 0x06
    30e2:	9f 81       	ldd	r25, Y+7	; 0x07
    30e4:	01 97       	sbiw	r24, 0x01	; 1
    30e6:	9f 83       	std	Y+7, r25	; 0x07
    30e8:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30ea:	8e 81       	ldd	r24, Y+6	; 0x06
    30ec:	9f 81       	ldd	r25, Y+7	; 0x07
    30ee:	00 97       	sbiw	r24, 0x00	; 0
    30f0:	69 f7       	brne	.-38     	; 0x30cc <LCD_SendCMD+0x250>
    30f2:	24 c0       	rjmp	.+72     	; 0x313c <LCD_SendCMD+0x2c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30f4:	68 85       	ldd	r22, Y+8	; 0x08
    30f6:	79 85       	ldd	r23, Y+9	; 0x09
    30f8:	8a 85       	ldd	r24, Y+10	; 0x0a
    30fa:	9b 85       	ldd	r25, Y+11	; 0x0b
    30fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3100:	dc 01       	movw	r26, r24
    3102:	cb 01       	movw	r24, r22
    3104:	9f 83       	std	Y+7, r25	; 0x07
    3106:	8e 83       	std	Y+6, r24	; 0x06
    3108:	8e 81       	ldd	r24, Y+6	; 0x06
    310a:	9f 81       	ldd	r25, Y+7	; 0x07
    310c:	9b 83       	std	Y+3, r25	; 0x03
    310e:	8a 83       	std	Y+2, r24	; 0x02
    3110:	8a 81       	ldd	r24, Y+2	; 0x02
    3112:	9b 81       	ldd	r25, Y+3	; 0x03
    3114:	01 97       	sbiw	r24, 0x01	; 1
    3116:	f1 f7       	brne	.-4      	; 0x3114 <LCD_SendCMD+0x298>
    3118:	9b 83       	std	Y+3, r25	; 0x03
    311a:	8a 83       	std	Y+2, r24	; 0x02
    311c:	0f c0       	rjmp	.+30     	; 0x313c <LCD_SendCMD+0x2c0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    311e:	69 89       	ldd	r22, Y+17	; 0x11
    3120:	7a 89       	ldd	r23, Y+18	; 0x12
    3122:	8b 89       	ldd	r24, Y+19	; 0x13
    3124:	9c 89       	ldd	r25, Y+20	; 0x14
    3126:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    312a:	dc 01       	movw	r26, r24
    312c:	cb 01       	movw	r24, r22
    312e:	88 8b       	std	Y+16, r24	; 0x10
    3130:	88 89       	ldd	r24, Y+16	; 0x10
    3132:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3134:	89 81       	ldd	r24, Y+1	; 0x01
    3136:	8a 95       	dec	r24
    3138:	f1 f7       	brne	.-4      	; 0x3136 <LCD_SendCMD+0x2ba>
    313a:	89 83       	std	Y+1, r24	; 0x01
	  _delay_us(20);
}
    313c:	69 96       	adiw	r28, 0x19	; 25
    313e:	0f b6       	in	r0, 0x3f	; 63
    3140:	f8 94       	cli
    3142:	de bf       	out	0x3e, r29	; 62
    3144:	0f be       	out	0x3f, r0	; 63
    3146:	cd bf       	out	0x3d, r28	; 61
    3148:	cf 91       	pop	r28
    314a:	df 91       	pop	r29
    314c:	08 95       	ret

0000314e <LCD_SendData>:
void LCD_SendData(unit8 data)
{
    314e:	df 93       	push	r29
    3150:	cf 93       	push	r28
    3152:	cd b7       	in	r28, 0x3d	; 61
    3154:	de b7       	in	r29, 0x3e	; 62
    3156:	69 97       	sbiw	r28, 0x19	; 25
    3158:	0f b6       	in	r0, 0x3f	; 63
    315a:	f8 94       	cli
    315c:	de bf       	out	0x3e, r29	; 62
    315e:	0f be       	out	0x3f, r0	; 63
    3160:	cd bf       	out	0x3d, r28	; 61
    3162:	89 8f       	std	Y+25, r24	; 0x19
	  DIO_Write(RS,HIGH);
    3164:	89 e0       	ldi	r24, 0x09	; 9
    3166:	61 e0       	ldi	r22, 0x01	; 1
    3168:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_Write>
	  DIO_Write(RW,LOW);
    316c:	8a e0       	ldi	r24, 0x0A	; 10
    316e:	60 e0       	ldi	r22, 0x00	; 0
    3170:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_Write>
	  GET_BIT(data,7) ? DIO_Write(D7,HIGH) : DIO_Write(D7,LOW);
    3174:	89 8d       	ldd	r24, Y+25	; 0x19
    3176:	88 23       	and	r24, r24
    3178:	2c f4       	brge	.+10     	; 0x3184 <LCD_SendData+0x36>
    317a:	8f e0       	ldi	r24, 0x0F	; 15
    317c:	61 e0       	ldi	r22, 0x01	; 1
    317e:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_Write>
    3182:	04 c0       	rjmp	.+8      	; 0x318c <LCD_SendData+0x3e>
    3184:	8f e0       	ldi	r24, 0x0F	; 15
    3186:	60 e0       	ldi	r22, 0x00	; 0
    3188:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_Write>
	  GET_BIT(data,6) ? DIO_Write(D6,HIGH) : DIO_Write(D6,LOW);
    318c:	89 8d       	ldd	r24, Y+25	; 0x19
    318e:	82 95       	swap	r24
    3190:	86 95       	lsr	r24
    3192:	86 95       	lsr	r24
    3194:	83 70       	andi	r24, 0x03	; 3
    3196:	88 2f       	mov	r24, r24
    3198:	90 e0       	ldi	r25, 0x00	; 0
    319a:	81 70       	andi	r24, 0x01	; 1
    319c:	90 70       	andi	r25, 0x00	; 0
    319e:	88 23       	and	r24, r24
    31a0:	29 f0       	breq	.+10     	; 0x31ac <LCD_SendData+0x5e>
    31a2:	8e e0       	ldi	r24, 0x0E	; 14
    31a4:	61 e0       	ldi	r22, 0x01	; 1
    31a6:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_Write>
    31aa:	04 c0       	rjmp	.+8      	; 0x31b4 <LCD_SendData+0x66>
    31ac:	8e e0       	ldi	r24, 0x0E	; 14
    31ae:	60 e0       	ldi	r22, 0x00	; 0
    31b0:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_Write>
	  GET_BIT(data,5) ? DIO_Write(D5,HIGH) : DIO_Write(D5,LOW);
    31b4:	89 8d       	ldd	r24, Y+25	; 0x19
    31b6:	82 95       	swap	r24
    31b8:	86 95       	lsr	r24
    31ba:	87 70       	andi	r24, 0x07	; 7
    31bc:	88 2f       	mov	r24, r24
    31be:	90 e0       	ldi	r25, 0x00	; 0
    31c0:	81 70       	andi	r24, 0x01	; 1
    31c2:	90 70       	andi	r25, 0x00	; 0
    31c4:	88 23       	and	r24, r24
    31c6:	29 f0       	breq	.+10     	; 0x31d2 <LCD_SendData+0x84>
    31c8:	8d e0       	ldi	r24, 0x0D	; 13
    31ca:	61 e0       	ldi	r22, 0x01	; 1
    31cc:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_Write>
    31d0:	04 c0       	rjmp	.+8      	; 0x31da <LCD_SendData+0x8c>
    31d2:	8d e0       	ldi	r24, 0x0D	; 13
    31d4:	60 e0       	ldi	r22, 0x00	; 0
    31d6:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_Write>
	  GET_BIT(data,4) ? DIO_Write(D4,HIGH) : DIO_Write(D4,LOW);
    31da:	89 8d       	ldd	r24, Y+25	; 0x19
    31dc:	82 95       	swap	r24
    31de:	8f 70       	andi	r24, 0x0F	; 15
    31e0:	88 2f       	mov	r24, r24
    31e2:	90 e0       	ldi	r25, 0x00	; 0
    31e4:	81 70       	andi	r24, 0x01	; 1
    31e6:	90 70       	andi	r25, 0x00	; 0
    31e8:	88 23       	and	r24, r24
    31ea:	29 f0       	breq	.+10     	; 0x31f6 <LCD_SendData+0xa8>
    31ec:	8c e0       	ldi	r24, 0x0C	; 12
    31ee:	61 e0       	ldi	r22, 0x01	; 1
    31f0:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_Write>
    31f4:	04 c0       	rjmp	.+8      	; 0x31fe <LCD_SendData+0xb0>
    31f6:	8c e0       	ldi	r24, 0x0C	; 12
    31f8:	60 e0       	ldi	r22, 0x00	; 0
    31fa:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_Write>
	  Trigger();
    31fe:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <Trigger>
	  GET_BIT(data,3) ? DIO_Write(D7,HIGH) : DIO_Write(D7,LOW);
    3202:	89 8d       	ldd	r24, Y+25	; 0x19
    3204:	86 95       	lsr	r24
    3206:	86 95       	lsr	r24
    3208:	86 95       	lsr	r24
    320a:	88 2f       	mov	r24, r24
    320c:	90 e0       	ldi	r25, 0x00	; 0
    320e:	81 70       	andi	r24, 0x01	; 1
    3210:	90 70       	andi	r25, 0x00	; 0
    3212:	88 23       	and	r24, r24
    3214:	29 f0       	breq	.+10     	; 0x3220 <LCD_SendData+0xd2>
    3216:	8f e0       	ldi	r24, 0x0F	; 15
    3218:	61 e0       	ldi	r22, 0x01	; 1
    321a:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_Write>
    321e:	04 c0       	rjmp	.+8      	; 0x3228 <LCD_SendData+0xda>
    3220:	8f e0       	ldi	r24, 0x0F	; 15
    3222:	60 e0       	ldi	r22, 0x00	; 0
    3224:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_Write>
	  GET_BIT(data,2) ? DIO_Write(D6,HIGH) : DIO_Write(D6,LOW);
    3228:	89 8d       	ldd	r24, Y+25	; 0x19
    322a:	86 95       	lsr	r24
    322c:	86 95       	lsr	r24
    322e:	88 2f       	mov	r24, r24
    3230:	90 e0       	ldi	r25, 0x00	; 0
    3232:	81 70       	andi	r24, 0x01	; 1
    3234:	90 70       	andi	r25, 0x00	; 0
    3236:	88 23       	and	r24, r24
    3238:	29 f0       	breq	.+10     	; 0x3244 <LCD_SendData+0xf6>
    323a:	8e e0       	ldi	r24, 0x0E	; 14
    323c:	61 e0       	ldi	r22, 0x01	; 1
    323e:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_Write>
    3242:	04 c0       	rjmp	.+8      	; 0x324c <LCD_SendData+0xfe>
    3244:	8e e0       	ldi	r24, 0x0E	; 14
    3246:	60 e0       	ldi	r22, 0x00	; 0
    3248:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_Write>
	  GET_BIT(data,1) ? DIO_Write(D5,HIGH) : DIO_Write(D5,LOW);
    324c:	89 8d       	ldd	r24, Y+25	; 0x19
    324e:	86 95       	lsr	r24
    3250:	88 2f       	mov	r24, r24
    3252:	90 e0       	ldi	r25, 0x00	; 0
    3254:	81 70       	andi	r24, 0x01	; 1
    3256:	90 70       	andi	r25, 0x00	; 0
    3258:	88 23       	and	r24, r24
    325a:	29 f0       	breq	.+10     	; 0x3266 <LCD_SendData+0x118>
    325c:	8d e0       	ldi	r24, 0x0D	; 13
    325e:	61 e0       	ldi	r22, 0x01	; 1
    3260:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_Write>
    3264:	04 c0       	rjmp	.+8      	; 0x326e <LCD_SendData+0x120>
    3266:	8d e0       	ldi	r24, 0x0D	; 13
    3268:	60 e0       	ldi	r22, 0x00	; 0
    326a:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_Write>
	  GET_BIT(data,0) ? DIO_Write(D4,HIGH) : DIO_Write(D4,LOW);
    326e:	89 8d       	ldd	r24, Y+25	; 0x19
    3270:	88 2f       	mov	r24, r24
    3272:	90 e0       	ldi	r25, 0x00	; 0
    3274:	81 70       	andi	r24, 0x01	; 1
    3276:	90 70       	andi	r25, 0x00	; 0
    3278:	88 23       	and	r24, r24
    327a:	29 f0       	breq	.+10     	; 0x3286 <LCD_SendData+0x138>
    327c:	8c e0       	ldi	r24, 0x0C	; 12
    327e:	61 e0       	ldi	r22, 0x01	; 1
    3280:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_Write>
    3284:	04 c0       	rjmp	.+8      	; 0x328e <LCD_SendData+0x140>
    3286:	8c e0       	ldi	r24, 0x0C	; 12
    3288:	60 e0       	ldi	r22, 0x00	; 0
    328a:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_Write>
	  Trigger();
    328e:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <Trigger>
    3292:	80 e0       	ldi	r24, 0x00	; 0
    3294:	90 e0       	ldi	r25, 0x00	; 0
    3296:	a0 ea       	ldi	r26, 0xA0	; 160
    3298:	b1 e4       	ldi	r27, 0x41	; 65
    329a:	8d 8b       	std	Y+21, r24	; 0x15
    329c:	9e 8b       	std	Y+22, r25	; 0x16
    329e:	af 8b       	std	Y+23, r26	; 0x17
    32a0:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    32a2:	6d 89       	ldd	r22, Y+21	; 0x15
    32a4:	7e 89       	ldd	r23, Y+22	; 0x16
    32a6:	8f 89       	ldd	r24, Y+23	; 0x17
    32a8:	98 8d       	ldd	r25, Y+24	; 0x18
    32aa:	2b ea       	ldi	r18, 0xAB	; 171
    32ac:	3a ea       	ldi	r19, 0xAA	; 170
    32ae:	4a ea       	ldi	r20, 0xAA	; 170
    32b0:	50 e4       	ldi	r21, 0x40	; 64
    32b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32b6:	dc 01       	movw	r26, r24
    32b8:	cb 01       	movw	r24, r22
    32ba:	89 8b       	std	Y+17, r24	; 0x11
    32bc:	9a 8b       	std	Y+18, r25	; 0x12
    32be:	ab 8b       	std	Y+19, r26	; 0x13
    32c0:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    32c2:	69 89       	ldd	r22, Y+17	; 0x11
    32c4:	7a 89       	ldd	r23, Y+18	; 0x12
    32c6:	8b 89       	ldd	r24, Y+19	; 0x13
    32c8:	9c 89       	ldd	r25, Y+20	; 0x14
    32ca:	20 e0       	ldi	r18, 0x00	; 0
    32cc:	30 e0       	ldi	r19, 0x00	; 0
    32ce:	40 e8       	ldi	r20, 0x80	; 128
    32d0:	5f e3       	ldi	r21, 0x3F	; 63
    32d2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32d6:	88 23       	and	r24, r24
    32d8:	1c f4       	brge	.+6      	; 0x32e0 <LCD_SendData+0x192>
		__ticks = 1;
    32da:	81 e0       	ldi	r24, 0x01	; 1
    32dc:	88 8b       	std	Y+16, r24	; 0x10
    32de:	91 c0       	rjmp	.+290    	; 0x3402 <LCD_SendData+0x2b4>
	else if (__tmp > 255)
    32e0:	69 89       	ldd	r22, Y+17	; 0x11
    32e2:	7a 89       	ldd	r23, Y+18	; 0x12
    32e4:	8b 89       	ldd	r24, Y+19	; 0x13
    32e6:	9c 89       	ldd	r25, Y+20	; 0x14
    32e8:	20 e0       	ldi	r18, 0x00	; 0
    32ea:	30 e0       	ldi	r19, 0x00	; 0
    32ec:	4f e7       	ldi	r20, 0x7F	; 127
    32ee:	53 e4       	ldi	r21, 0x43	; 67
    32f0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32f4:	18 16       	cp	r1, r24
    32f6:	0c f0       	brlt	.+2      	; 0x32fa <LCD_SendData+0x1ac>
    32f8:	7b c0       	rjmp	.+246    	; 0x33f0 <LCD_SendData+0x2a2>
	{
		_delay_ms(__us / 1000.0);
    32fa:	6d 89       	ldd	r22, Y+21	; 0x15
    32fc:	7e 89       	ldd	r23, Y+22	; 0x16
    32fe:	8f 89       	ldd	r24, Y+23	; 0x17
    3300:	98 8d       	ldd	r25, Y+24	; 0x18
    3302:	20 e0       	ldi	r18, 0x00	; 0
    3304:	30 e0       	ldi	r19, 0x00	; 0
    3306:	4a e7       	ldi	r20, 0x7A	; 122
    3308:	54 e4       	ldi	r21, 0x44	; 68
    330a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    330e:	dc 01       	movw	r26, r24
    3310:	cb 01       	movw	r24, r22
    3312:	8c 87       	std	Y+12, r24	; 0x0c
    3314:	9d 87       	std	Y+13, r25	; 0x0d
    3316:	ae 87       	std	Y+14, r26	; 0x0e
    3318:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    331a:	6c 85       	ldd	r22, Y+12	; 0x0c
    331c:	7d 85       	ldd	r23, Y+13	; 0x0d
    331e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3320:	9f 85       	ldd	r25, Y+15	; 0x0f
    3322:	20 e0       	ldi	r18, 0x00	; 0
    3324:	30 e0       	ldi	r19, 0x00	; 0
    3326:	4a e7       	ldi	r20, 0x7A	; 122
    3328:	55 e4       	ldi	r21, 0x45	; 69
    332a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    332e:	dc 01       	movw	r26, r24
    3330:	cb 01       	movw	r24, r22
    3332:	88 87       	std	Y+8, r24	; 0x08
    3334:	99 87       	std	Y+9, r25	; 0x09
    3336:	aa 87       	std	Y+10, r26	; 0x0a
    3338:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    333a:	68 85       	ldd	r22, Y+8	; 0x08
    333c:	79 85       	ldd	r23, Y+9	; 0x09
    333e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3340:	9b 85       	ldd	r25, Y+11	; 0x0b
    3342:	20 e0       	ldi	r18, 0x00	; 0
    3344:	30 e0       	ldi	r19, 0x00	; 0
    3346:	40 e8       	ldi	r20, 0x80	; 128
    3348:	5f e3       	ldi	r21, 0x3F	; 63
    334a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    334e:	88 23       	and	r24, r24
    3350:	2c f4       	brge	.+10     	; 0x335c <LCD_SendData+0x20e>
		__ticks = 1;
    3352:	81 e0       	ldi	r24, 0x01	; 1
    3354:	90 e0       	ldi	r25, 0x00	; 0
    3356:	9f 83       	std	Y+7, r25	; 0x07
    3358:	8e 83       	std	Y+6, r24	; 0x06
    335a:	3f c0       	rjmp	.+126    	; 0x33da <LCD_SendData+0x28c>
	else if (__tmp > 65535)
    335c:	68 85       	ldd	r22, Y+8	; 0x08
    335e:	79 85       	ldd	r23, Y+9	; 0x09
    3360:	8a 85       	ldd	r24, Y+10	; 0x0a
    3362:	9b 85       	ldd	r25, Y+11	; 0x0b
    3364:	20 e0       	ldi	r18, 0x00	; 0
    3366:	3f ef       	ldi	r19, 0xFF	; 255
    3368:	4f e7       	ldi	r20, 0x7F	; 127
    336a:	57 e4       	ldi	r21, 0x47	; 71
    336c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3370:	18 16       	cp	r1, r24
    3372:	4c f5       	brge	.+82     	; 0x33c6 <LCD_SendData+0x278>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3374:	6c 85       	ldd	r22, Y+12	; 0x0c
    3376:	7d 85       	ldd	r23, Y+13	; 0x0d
    3378:	8e 85       	ldd	r24, Y+14	; 0x0e
    337a:	9f 85       	ldd	r25, Y+15	; 0x0f
    337c:	20 e0       	ldi	r18, 0x00	; 0
    337e:	30 e0       	ldi	r19, 0x00	; 0
    3380:	40 e2       	ldi	r20, 0x20	; 32
    3382:	51 e4       	ldi	r21, 0x41	; 65
    3384:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3388:	dc 01       	movw	r26, r24
    338a:	cb 01       	movw	r24, r22
    338c:	bc 01       	movw	r22, r24
    338e:	cd 01       	movw	r24, r26
    3390:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3394:	dc 01       	movw	r26, r24
    3396:	cb 01       	movw	r24, r22
    3398:	9f 83       	std	Y+7, r25	; 0x07
    339a:	8e 83       	std	Y+6, r24	; 0x06
    339c:	0f c0       	rjmp	.+30     	; 0x33bc <LCD_SendData+0x26e>
    339e:	80 e9       	ldi	r24, 0x90	; 144
    33a0:	91 e0       	ldi	r25, 0x01	; 1
    33a2:	9d 83       	std	Y+5, r25	; 0x05
    33a4:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    33a6:	8c 81       	ldd	r24, Y+4	; 0x04
    33a8:	9d 81       	ldd	r25, Y+5	; 0x05
    33aa:	01 97       	sbiw	r24, 0x01	; 1
    33ac:	f1 f7       	brne	.-4      	; 0x33aa <LCD_SendData+0x25c>
    33ae:	9d 83       	std	Y+5, r25	; 0x05
    33b0:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33b2:	8e 81       	ldd	r24, Y+6	; 0x06
    33b4:	9f 81       	ldd	r25, Y+7	; 0x07
    33b6:	01 97       	sbiw	r24, 0x01	; 1
    33b8:	9f 83       	std	Y+7, r25	; 0x07
    33ba:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33bc:	8e 81       	ldd	r24, Y+6	; 0x06
    33be:	9f 81       	ldd	r25, Y+7	; 0x07
    33c0:	00 97       	sbiw	r24, 0x00	; 0
    33c2:	69 f7       	brne	.-38     	; 0x339e <LCD_SendData+0x250>
    33c4:	24 c0       	rjmp	.+72     	; 0x340e <LCD_SendData+0x2c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33c6:	68 85       	ldd	r22, Y+8	; 0x08
    33c8:	79 85       	ldd	r23, Y+9	; 0x09
    33ca:	8a 85       	ldd	r24, Y+10	; 0x0a
    33cc:	9b 85       	ldd	r25, Y+11	; 0x0b
    33ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33d2:	dc 01       	movw	r26, r24
    33d4:	cb 01       	movw	r24, r22
    33d6:	9f 83       	std	Y+7, r25	; 0x07
    33d8:	8e 83       	std	Y+6, r24	; 0x06
    33da:	8e 81       	ldd	r24, Y+6	; 0x06
    33dc:	9f 81       	ldd	r25, Y+7	; 0x07
    33de:	9b 83       	std	Y+3, r25	; 0x03
    33e0:	8a 83       	std	Y+2, r24	; 0x02
    33e2:	8a 81       	ldd	r24, Y+2	; 0x02
    33e4:	9b 81       	ldd	r25, Y+3	; 0x03
    33e6:	01 97       	sbiw	r24, 0x01	; 1
    33e8:	f1 f7       	brne	.-4      	; 0x33e6 <LCD_SendData+0x298>
    33ea:	9b 83       	std	Y+3, r25	; 0x03
    33ec:	8a 83       	std	Y+2, r24	; 0x02
    33ee:	0f c0       	rjmp	.+30     	; 0x340e <LCD_SendData+0x2c0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    33f0:	69 89       	ldd	r22, Y+17	; 0x11
    33f2:	7a 89       	ldd	r23, Y+18	; 0x12
    33f4:	8b 89       	ldd	r24, Y+19	; 0x13
    33f6:	9c 89       	ldd	r25, Y+20	; 0x14
    33f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33fc:	dc 01       	movw	r26, r24
    33fe:	cb 01       	movw	r24, r22
    3400:	88 8b       	std	Y+16, r24	; 0x10
    3402:	88 89       	ldd	r24, Y+16	; 0x10
    3404:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3406:	89 81       	ldd	r24, Y+1	; 0x01
    3408:	8a 95       	dec	r24
    340a:	f1 f7       	brne	.-4      	; 0x3408 <LCD_SendData+0x2ba>
    340c:	89 83       	std	Y+1, r24	; 0x01
	  _delay_us(20);
}
    340e:	69 96       	adiw	r28, 0x19	; 25
    3410:	0f b6       	in	r0, 0x3f	; 63
    3412:	f8 94       	cli
    3414:	de bf       	out	0x3e, r29	; 62
    3416:	0f be       	out	0x3f, r0	; 63
    3418:	cd bf       	out	0x3d, r28	; 61
    341a:	cf 91       	pop	r28
    341c:	df 91       	pop	r29
    341e:	08 95       	ret

00003420 <LCD_SendString>:

void LCD_SendString(char* data)
{
    3420:	df 93       	push	r29
    3422:	cf 93       	push	r28
    3424:	00 d0       	rcall	.+0      	; 0x3426 <LCD_SendString+0x6>
    3426:	cd b7       	in	r28, 0x3d	; 61
    3428:	de b7       	in	r29, 0x3e	; 62
    342a:	9a 83       	std	Y+2, r25	; 0x02
    342c:	89 83       	std	Y+1, r24	; 0x01
    342e:	0a c0       	rjmp	.+20     	; 0x3444 <LCD_SendString+0x24>
	for(;*data!='\0';data++) LCD_SendData(*data);
    3430:	e9 81       	ldd	r30, Y+1	; 0x01
    3432:	fa 81       	ldd	r31, Y+2	; 0x02
    3434:	80 81       	ld	r24, Z
    3436:	0e 94 a7 18 	call	0x314e	; 0x314e <LCD_SendData>
    343a:	89 81       	ldd	r24, Y+1	; 0x01
    343c:	9a 81       	ldd	r25, Y+2	; 0x02
    343e:	01 96       	adiw	r24, 0x01	; 1
    3440:	9a 83       	std	Y+2, r25	; 0x02
    3442:	89 83       	std	Y+1, r24	; 0x01
    3444:	e9 81       	ldd	r30, Y+1	; 0x01
    3446:	fa 81       	ldd	r31, Y+2	; 0x02
    3448:	80 81       	ld	r24, Z
    344a:	88 23       	and	r24, r24
    344c:	89 f7       	brne	.-30     	; 0x3430 <LCD_SendString+0x10>
}
    344e:	0f 90       	pop	r0
    3450:	0f 90       	pop	r0
    3452:	cf 91       	pop	r28
    3454:	df 91       	pop	r29
    3456:	08 95       	ret

00003458 <LCD_SendStringxy>:
void LCD_SendStringxy(char* data,unit8 x,unit8 y)
{
    3458:	df 93       	push	r29
    345a:	cf 93       	push	r28
    345c:	00 d0       	rcall	.+0      	; 0x345e <LCD_SendStringxy+0x6>
    345e:	00 d0       	rcall	.+0      	; 0x3460 <LCD_SendStringxy+0x8>
    3460:	00 d0       	rcall	.+0      	; 0x3462 <LCD_SendStringxy+0xa>
    3462:	cd b7       	in	r28, 0x3d	; 61
    3464:	de b7       	in	r29, 0x3e	; 62
    3466:	9c 83       	std	Y+4, r25	; 0x04
    3468:	8b 83       	std	Y+3, r24	; 0x03
    346a:	6d 83       	std	Y+5, r22	; 0x05
    346c:	4e 83       	std	Y+6, r20	; 0x06
	LCD_SendCMD(0x02); // Return Cursor to it's Original Position
    346e:	82 e0       	ldi	r24, 0x02	; 2
    3470:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <LCD_SendCMD>
	LCD_SendCMD(0x2c); // Set DL to 4-bit Mode and 2-line display Mode with 5x11 dot format display mode
    3474:	8c e2       	ldi	r24, 0x2C	; 44
    3476:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <LCD_SendCMD>
	for(int i=0;i<cal(x,y);i++) LCD_SendCMD(0x14);
    347a:	1a 82       	std	Y+2, r1	; 0x02
    347c:	19 82       	std	Y+1, r1	; 0x01
    347e:	08 c0       	rjmp	.+16     	; 0x3490 <LCD_SendStringxy+0x38>
    3480:	84 e1       	ldi	r24, 0x14	; 20
    3482:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <LCD_SendCMD>
    3486:	89 81       	ldd	r24, Y+1	; 0x01
    3488:	9a 81       	ldd	r25, Y+2	; 0x02
    348a:	01 96       	adiw	r24, 0x01	; 1
    348c:	9a 83       	std	Y+2, r25	; 0x02
    348e:	89 83       	std	Y+1, r24	; 0x01
    3490:	8d 81       	ldd	r24, Y+5	; 0x05
    3492:	28 2f       	mov	r18, r24
    3494:	30 e0       	ldi	r19, 0x00	; 0
    3496:	8e 81       	ldd	r24, Y+6	; 0x06
    3498:	88 2f       	mov	r24, r24
    349a:	90 e0       	ldi	r25, 0x00	; 0
    349c:	00 24       	eor	r0, r0
    349e:	96 95       	lsr	r25
    34a0:	87 95       	ror	r24
    34a2:	07 94       	ror	r0
    34a4:	96 95       	lsr	r25
    34a6:	87 95       	ror	r24
    34a8:	07 94       	ror	r0
    34aa:	98 2f       	mov	r25, r24
    34ac:	80 2d       	mov	r24, r0
    34ae:	28 0f       	add	r18, r24
    34b0:	39 1f       	adc	r19, r25
    34b2:	89 81       	ldd	r24, Y+1	; 0x01
    34b4:	9a 81       	ldd	r25, Y+2	; 0x02
    34b6:	82 17       	cp	r24, r18
    34b8:	93 07       	cpc	r25, r19
    34ba:	14 f3       	brlt	.-60     	; 0x3480 <LCD_SendStringxy+0x28>
	LCD_SendString(data);
    34bc:	8b 81       	ldd	r24, Y+3	; 0x03
    34be:	9c 81       	ldd	r25, Y+4	; 0x04
    34c0:	0e 94 10 1a 	call	0x3420	; 0x3420 <LCD_SendString>

}
    34c4:	26 96       	adiw	r28, 0x06	; 6
    34c6:	0f b6       	in	r0, 0x3f	; 63
    34c8:	f8 94       	cli
    34ca:	de bf       	out	0x3e, r29	; 62
    34cc:	0f be       	out	0x3f, r0	; 63
    34ce:	cd bf       	out	0x3d, r28	; 61
    34d0:	cf 91       	pop	r28
    34d2:	df 91       	pop	r29
    34d4:	08 95       	ret

000034d6 <LCD_SetCursor>:

void LCD_SetCursor(unit8 x , unit8 y)
{
    34d6:	df 93       	push	r29
    34d8:	cf 93       	push	r28
    34da:	00 d0       	rcall	.+0      	; 0x34dc <LCD_SetCursor+0x6>
    34dc:	00 d0       	rcall	.+0      	; 0x34de <LCD_SetCursor+0x8>
    34de:	cd b7       	in	r28, 0x3d	; 61
    34e0:	de b7       	in	r29, 0x3e	; 62
    34e2:	8b 83       	std	Y+3, r24	; 0x03
    34e4:	6c 83       	std	Y+4, r22	; 0x04
	LCD_SendCMD(0x02); // Return Cursor to it's Original Position
    34e6:	82 e0       	ldi	r24, 0x02	; 2
    34e8:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <LCD_SendCMD>
	LCD_SendCMD(0x2c); // Set DL to 4-bit Mode and 2-line display Mode with 5x11 dot format display mode
    34ec:	8c e2       	ldi	r24, 0x2C	; 44
    34ee:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <LCD_SendCMD>
	for(int i=0;i<cal(x,y);i++) LCD_SendCMD(0x14);
    34f2:	1a 82       	std	Y+2, r1	; 0x02
    34f4:	19 82       	std	Y+1, r1	; 0x01
    34f6:	08 c0       	rjmp	.+16     	; 0x3508 <LCD_SetCursor+0x32>
    34f8:	84 e1       	ldi	r24, 0x14	; 20
    34fa:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <LCD_SendCMD>
    34fe:	89 81       	ldd	r24, Y+1	; 0x01
    3500:	9a 81       	ldd	r25, Y+2	; 0x02
    3502:	01 96       	adiw	r24, 0x01	; 1
    3504:	9a 83       	std	Y+2, r25	; 0x02
    3506:	89 83       	std	Y+1, r24	; 0x01
    3508:	8b 81       	ldd	r24, Y+3	; 0x03
    350a:	28 2f       	mov	r18, r24
    350c:	30 e0       	ldi	r19, 0x00	; 0
    350e:	8c 81       	ldd	r24, Y+4	; 0x04
    3510:	88 2f       	mov	r24, r24
    3512:	90 e0       	ldi	r25, 0x00	; 0
    3514:	00 24       	eor	r0, r0
    3516:	96 95       	lsr	r25
    3518:	87 95       	ror	r24
    351a:	07 94       	ror	r0
    351c:	96 95       	lsr	r25
    351e:	87 95       	ror	r24
    3520:	07 94       	ror	r0
    3522:	98 2f       	mov	r25, r24
    3524:	80 2d       	mov	r24, r0
    3526:	28 0f       	add	r18, r24
    3528:	39 1f       	adc	r19, r25
    352a:	89 81       	ldd	r24, Y+1	; 0x01
    352c:	9a 81       	ldd	r25, Y+2	; 0x02
    352e:	82 17       	cp	r24, r18
    3530:	93 07       	cpc	r25, r19
    3532:	14 f3       	brlt	.-60     	; 0x34f8 <LCD_SetCursor+0x22>
}
    3534:	0f 90       	pop	r0
    3536:	0f 90       	pop	r0
    3538:	0f 90       	pop	r0
    353a:	0f 90       	pop	r0
    353c:	cf 91       	pop	r28
    353e:	df 91       	pop	r29
    3540:	08 95       	ret

00003542 <COL_Check>:
		{'1','2','3','-'},
		{'C','0','=','+'}
};

static unit8 COL_Check()
{
    3542:	df 93       	push	r29
    3544:	cf 93       	push	r28
    3546:	0f 92       	push	r0
    3548:	cd b7       	in	r28, 0x3d	; 61
    354a:	de b7       	in	r29, 0x3e	; 62
	unit8 checker = NO_KEY ;
    354c:	8f ef       	ldi	r24, 0xFF	; 255
    354e:	89 83       	std	Y+1, r24	; 0x01
	if(!DIO_Read(C0)) checker = 0;
    3550:	84 e1       	ldi	r24, 0x14	; 20
    3552:	0e 94 90 12 	call	0x2520	; 0x2520 <DIO_Read>
    3556:	88 23       	and	r24, r24
    3558:	11 f4       	brne	.+4      	; 0x355e <COL_Check+0x1c>
    355a:	19 82       	std	Y+1, r1	; 0x01
    355c:	17 c0       	rjmp	.+46     	; 0x358c <COL_Check+0x4a>
	else if (!DIO_Read(C1)) checker = 1;
    355e:	85 e1       	ldi	r24, 0x15	; 21
    3560:	0e 94 90 12 	call	0x2520	; 0x2520 <DIO_Read>
    3564:	88 23       	and	r24, r24
    3566:	19 f4       	brne	.+6      	; 0x356e <COL_Check+0x2c>
    3568:	81 e0       	ldi	r24, 0x01	; 1
    356a:	89 83       	std	Y+1, r24	; 0x01
    356c:	0f c0       	rjmp	.+30     	; 0x358c <COL_Check+0x4a>
	else if (!DIO_Read(C2)) checker = 2;
    356e:	86 e1       	ldi	r24, 0x16	; 22
    3570:	0e 94 90 12 	call	0x2520	; 0x2520 <DIO_Read>
    3574:	88 23       	and	r24, r24
    3576:	19 f4       	brne	.+6      	; 0x357e <COL_Check+0x3c>
    3578:	82 e0       	ldi	r24, 0x02	; 2
    357a:	89 83       	std	Y+1, r24	; 0x01
    357c:	07 c0       	rjmp	.+14     	; 0x358c <COL_Check+0x4a>
	else if (!DIO_Read(C3)) checker = 3;
    357e:	87 e1       	ldi	r24, 0x17	; 23
    3580:	0e 94 90 12 	call	0x2520	; 0x2520 <DIO_Read>
    3584:	88 23       	and	r24, r24
    3586:	11 f4       	brne	.+4      	; 0x358c <COL_Check+0x4a>
    3588:	83 e0       	ldi	r24, 0x03	; 3
    358a:	89 83       	std	Y+1, r24	; 0x01
	return checker;
    358c:	89 81       	ldd	r24, Y+1	; 0x01
}
    358e:	0f 90       	pop	r0
    3590:	cf 91       	pop	r28
    3592:	df 91       	pop	r29
    3594:	08 95       	ret

00003596 <Keypad_Read>:

unit8 Keypad_Read()
{
    3596:	df 93       	push	r29
    3598:	cf 93       	push	r28
    359a:	00 d0       	rcall	.+0      	; 0x359c <Keypad_Read+0x6>
    359c:	cd b7       	in	r28, 0x3d	; 61
    359e:	de b7       	in	r29, 0x3e	; 62
   unit8 key = NO_KEY;
    35a0:	8f ef       	ldi	r24, 0xFF	; 255
    35a2:	8a 83       	std	Y+2, r24	; 0x02
   unit8 value = NO_KEY ;
    35a4:	8f ef       	ldi	r24, 0xFF	; 255
    35a6:	89 83       	std	Y+1, r24	; 0x01

   DIO_Write(R0,LOW);
    35a8:	80 e1       	ldi	r24, 0x10	; 16
    35aa:	60 e0       	ldi	r22, 0x00	; 0
    35ac:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_Write>
   DIO_Write(R1,HIGH);
    35b0:	81 e1       	ldi	r24, 0x11	; 17
    35b2:	61 e0       	ldi	r22, 0x01	; 1
    35b4:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_Write>
   DIO_Write(R2,HIGH);
    35b8:	82 e1       	ldi	r24, 0x12	; 18
    35ba:	61 e0       	ldi	r22, 0x01	; 1
    35bc:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_Write>
   DIO_Write(R3,HIGH);
    35c0:	83 e1       	ldi	r24, 0x13	; 19
    35c2:	61 e0       	ldi	r22, 0x01	; 1
    35c4:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_Write>
   key = COL_Check();
    35c8:	0e 94 a1 1a 	call	0x3542	; 0x3542 <COL_Check>
    35cc:	8a 83       	std	Y+2, r24	; 0x02
   if(key != NO_KEY){
    35ce:	8a 81       	ldd	r24, Y+2	; 0x02
    35d0:	8f 3f       	cpi	r24, 0xFF	; 255
    35d2:	41 f0       	breq	.+16     	; 0x35e4 <Keypad_Read+0x4e>
	   value = KeysTable[0][key];
    35d4:	8a 81       	ldd	r24, Y+2	; 0x02
    35d6:	88 2f       	mov	r24, r24
    35d8:	90 e0       	ldi	r25, 0x00	; 0
    35da:	fc 01       	movw	r30, r24
    35dc:	e8 59       	subi	r30, 0x98	; 152
    35de:	ff 4f       	sbci	r31, 0xFF	; 255
    35e0:	80 81       	ld	r24, Z
    35e2:	89 83       	std	Y+1, r24	; 0x01
   }

   DIO_Write(R0,HIGH);
    35e4:	80 e1       	ldi	r24, 0x10	; 16
    35e6:	61 e0       	ldi	r22, 0x01	; 1
    35e8:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_Write>
   DIO_Write(R1,LOW);
    35ec:	81 e1       	ldi	r24, 0x11	; 17
    35ee:	60 e0       	ldi	r22, 0x00	; 0
    35f0:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_Write>
   DIO_Write(R2,HIGH);
    35f4:	82 e1       	ldi	r24, 0x12	; 18
    35f6:	61 e0       	ldi	r22, 0x01	; 1
    35f8:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_Write>
   DIO_Write(R3,HIGH);
    35fc:	83 e1       	ldi	r24, 0x13	; 19
    35fe:	61 e0       	ldi	r22, 0x01	; 1
    3600:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_Write>
   key = COL_Check();
    3604:	0e 94 a1 1a 	call	0x3542	; 0x3542 <COL_Check>
    3608:	8a 83       	std	Y+2, r24	; 0x02
   if(key != NO_KEY){
    360a:	8a 81       	ldd	r24, Y+2	; 0x02
    360c:	8f 3f       	cpi	r24, 0xFF	; 255
    360e:	41 f0       	breq	.+16     	; 0x3620 <Keypad_Read+0x8a>
	   value = KeysTable[1][key];
    3610:	8a 81       	ldd	r24, Y+2	; 0x02
    3612:	88 2f       	mov	r24, r24
    3614:	90 e0       	ldi	r25, 0x00	; 0
    3616:	fc 01       	movw	r30, r24
    3618:	e4 59       	subi	r30, 0x94	; 148
    361a:	ff 4f       	sbci	r31, 0xFF	; 255
    361c:	80 81       	ld	r24, Z
    361e:	89 83       	std	Y+1, r24	; 0x01
   }

   DIO_Write(R0,HIGH);
    3620:	80 e1       	ldi	r24, 0x10	; 16
    3622:	61 e0       	ldi	r22, 0x01	; 1
    3624:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_Write>
   DIO_Write(R1,HIGH);
    3628:	81 e1       	ldi	r24, 0x11	; 17
    362a:	61 e0       	ldi	r22, 0x01	; 1
    362c:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_Write>
   DIO_Write(R2,LOW);
    3630:	82 e1       	ldi	r24, 0x12	; 18
    3632:	60 e0       	ldi	r22, 0x00	; 0
    3634:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_Write>
   DIO_Write(R3,HIGH);
    3638:	83 e1       	ldi	r24, 0x13	; 19
    363a:	61 e0       	ldi	r22, 0x01	; 1
    363c:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_Write>
   key = COL_Check();
    3640:	0e 94 a1 1a 	call	0x3542	; 0x3542 <COL_Check>
    3644:	8a 83       	std	Y+2, r24	; 0x02
   if(key != NO_KEY){
    3646:	8a 81       	ldd	r24, Y+2	; 0x02
    3648:	8f 3f       	cpi	r24, 0xFF	; 255
    364a:	41 f0       	breq	.+16     	; 0x365c <Keypad_Read+0xc6>
	   value = KeysTable[2][key];
    364c:	8a 81       	ldd	r24, Y+2	; 0x02
    364e:	88 2f       	mov	r24, r24
    3650:	90 e0       	ldi	r25, 0x00	; 0
    3652:	fc 01       	movw	r30, r24
    3654:	e0 59       	subi	r30, 0x90	; 144
    3656:	ff 4f       	sbci	r31, 0xFF	; 255
    3658:	80 81       	ld	r24, Z
    365a:	89 83       	std	Y+1, r24	; 0x01
   }

   DIO_Write(R0,HIGH);
    365c:	80 e1       	ldi	r24, 0x10	; 16
    365e:	61 e0       	ldi	r22, 0x01	; 1
    3660:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_Write>
   DIO_Write(R1,HIGH);
    3664:	81 e1       	ldi	r24, 0x11	; 17
    3666:	61 e0       	ldi	r22, 0x01	; 1
    3668:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_Write>
   DIO_Write(R2,HIGH);
    366c:	82 e1       	ldi	r24, 0x12	; 18
    366e:	61 e0       	ldi	r22, 0x01	; 1
    3670:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_Write>
   DIO_Write(R3,LOW);
    3674:	83 e1       	ldi	r24, 0x13	; 19
    3676:	60 e0       	ldi	r22, 0x00	; 0
    3678:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_Write>
   key = COL_Check();
    367c:	0e 94 a1 1a 	call	0x3542	; 0x3542 <COL_Check>
    3680:	8a 83       	std	Y+2, r24	; 0x02
   if(key != NO_KEY){
    3682:	8a 81       	ldd	r24, Y+2	; 0x02
    3684:	8f 3f       	cpi	r24, 0xFF	; 255
    3686:	41 f0       	breq	.+16     	; 0x3698 <Keypad_Read+0x102>
	   value = KeysTable[3][key];
    3688:	8a 81       	ldd	r24, Y+2	; 0x02
    368a:	88 2f       	mov	r24, r24
    368c:	90 e0       	ldi	r25, 0x00	; 0
    368e:	fc 01       	movw	r30, r24
    3690:	ec 58       	subi	r30, 0x8C	; 140
    3692:	ff 4f       	sbci	r31, 0xFF	; 255
    3694:	80 81       	ld	r24, Z
    3696:	89 83       	std	Y+1, r24	; 0x01
   }

   return value;
    3698:	89 81       	ldd	r24, Y+1	; 0x01
}
    369a:	0f 90       	pop	r0
    369c:	0f 90       	pop	r0
    369e:	cf 91       	pop	r28
    36a0:	df 91       	pop	r29
    36a2:	08 95       	ret

000036a4 <MotorInit>:

#include "DCMotor.h"

void MotorInit    (void)
{
    36a4:	df 93       	push	r29
    36a6:	cf 93       	push	r28
    36a8:	0f 92       	push	r0
    36aa:	cd b7       	in	r28, 0x3d	; 61
    36ac:	de b7       	in	r29, 0x3e	; 62
	unit8 Error;
	DIO_SetPinDir(RIGHTWHEELS_PIN, OUTPUT);
    36ae:	8f e1       	ldi	r24, 0x1F	; 31
    36b0:	61 e0       	ldi	r22, 0x01	; 1
    36b2:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <DIO_SetPinDir>
	DIO_SetPinDir(LEFTWHEELS_PIN, OUTPUT);
    36b6:	8b e0       	ldi	r24, 0x0B	; 11
    36b8:	61 e0       	ldi	r22, 0x01	; 1
    36ba:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <DIO_SetPinDir>
	Timer0_init();
    36be:	0e 94 df 07 	call	0xfbe	; 0xfbe <Timer0_init>
	Timer2_init();
    36c2:	0e 94 75 08 	call	0x10ea	; 0x10ea <Timer2_init>

	DIO_SetPinDir(PORTA_0,OUTPUT);
    36c6:	80 e0       	ldi	r24, 0x00	; 0
    36c8:	61 e0       	ldi	r22, 0x01	; 1
    36ca:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <DIO_SetPinDir>
	DIO_SetPinDir(PORTA_1,OUTPUT);
    36ce:	81 e0       	ldi	r24, 0x01	; 1
    36d0:	61 e0       	ldi	r22, 0x01	; 1
    36d2:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <DIO_SetPinDir>
	DIO_SetPinDir(PORTA_2,OUTPUT);
    36d6:	82 e0       	ldi	r24, 0x02	; 2
    36d8:	61 e0       	ldi	r22, 0x01	; 1
    36da:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <DIO_SetPinDir>
	DIO_SetPinDir(PORTA_3,OUTPUT);
    36de:	83 e0       	ldi	r24, 0x03	; 3
    36e0:	61 e0       	ldi	r22, 0x01	; 1
    36e2:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <DIO_SetPinDir>

	DIO_SetPinDir(PORTC_0,OUTPUT);
    36e6:	80 e1       	ldi	r24, 0x10	; 16
    36e8:	61 e0       	ldi	r22, 0x01	; 1
    36ea:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <DIO_SetPinDir>
	DIO_SetPinDir(PORTC_1,OUTPUT);
    36ee:	81 e1       	ldi	r24, 0x11	; 17
    36f0:	61 e0       	ldi	r22, 0x01	; 1
    36f2:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <DIO_SetPinDir>
	DIO_SetPinDir(PORTC_2,OUTPUT);
    36f6:	82 e1       	ldi	r24, 0x12	; 18
    36f8:	61 e0       	ldi	r22, 0x01	; 1
    36fa:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <DIO_SetPinDir>
	DIO_SetPinDir(PORTC_3,OUTPUT);
    36fe:	83 e1       	ldi	r24, 0x13	; 19
    3700:	61 e0       	ldi	r22, 0x01	; 1
    3702:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <DIO_SetPinDir>
}
    3706:	0f 90       	pop	r0
    3708:	cf 91       	pop	r28
    370a:	df 91       	pop	r29
    370c:	08 95       	ret

0000370e <MoveForward>:

unit8 MoveForward (unit8 speed)
{
    370e:	df 93       	push	r29
    3710:	cf 93       	push	r28
    3712:	00 d0       	rcall	.+0      	; 0x3714 <MoveForward+0x6>
    3714:	cd b7       	in	r28, 0x3d	; 61
    3716:	de b7       	in	r29, 0x3e	; 62
    3718:	89 83       	std	Y+1, r24	; 0x01
	// Left Direction
	DIO_Write(PORTA_0,LOW);
    371a:	80 e0       	ldi	r24, 0x00	; 0
    371c:	60 e0       	ldi	r22, 0x00	; 0
    371e:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_Write>


	// Right Direction
	DIO_Write(PORTC_0,LOW);
    3722:	80 e1       	ldi	r24, 0x10	; 16
    3724:	60 e0       	ldi	r22, 0x00	; 0
    3726:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_Write>


	PWM_Write(RIGHTWHEELS_PIN,speed);
    372a:	8f e1       	ldi	r24, 0x1F	; 31
    372c:	69 81       	ldd	r22, Y+1	; 0x01
    372e:	0e 94 3a 0b 	call	0x1674	; 0x1674 <PWM_Write>
	PWM_Write(LEFTWHEELS_PIN,speed);
    3732:	8b e0       	ldi	r24, 0x0B	; 11
    3734:	69 81       	ldd	r22, Y+1	; 0x01
    3736:	0e 94 3a 0b 	call	0x1674	; 0x1674 <PWM_Write>
}
    373a:	0f 90       	pop	r0
    373c:	0f 90       	pop	r0
    373e:	cf 91       	pop	r28
    3740:	df 91       	pop	r29
    3742:	08 95       	ret

00003744 <MoveBackward>:

unit8 MoveBackward(unit8 speed){
    3744:	df 93       	push	r29
    3746:	cf 93       	push	r28
    3748:	00 d0       	rcall	.+0      	; 0x374a <MoveBackward+0x6>
    374a:	cd b7       	in	r28, 0x3d	; 61
    374c:	de b7       	in	r29, 0x3e	; 62
    374e:	89 83       	std	Y+1, r24	; 0x01
	// Left Direction
	DIO_Write(PORTA_0,HIGH);
    3750:	80 e0       	ldi	r24, 0x00	; 0
    3752:	61 e0       	ldi	r22, 0x01	; 1
    3754:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_Write>


	// Right Direction
	DIO_Write(PORTC_0,HIGH);
    3758:	80 e1       	ldi	r24, 0x10	; 16
    375a:	61 e0       	ldi	r22, 0x01	; 1
    375c:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_Write>


	PWM_Write(RIGHTWHEELS_PIN,255 - speed);
    3760:	89 81       	ldd	r24, Y+1	; 0x01
    3762:	98 2f       	mov	r25, r24
    3764:	90 95       	com	r25
    3766:	8f e1       	ldi	r24, 0x1F	; 31
    3768:	69 2f       	mov	r22, r25
    376a:	0e 94 3a 0b 	call	0x1674	; 0x1674 <PWM_Write>
	PWM_Write(LEFTWHEELS_PIN,255 - speed);
    376e:	89 81       	ldd	r24, Y+1	; 0x01
    3770:	98 2f       	mov	r25, r24
    3772:	90 95       	com	r25
    3774:	8b e0       	ldi	r24, 0x0B	; 11
    3776:	69 2f       	mov	r22, r25
    3778:	0e 94 3a 0b 	call	0x1674	; 0x1674 <PWM_Write>
}
    377c:	0f 90       	pop	r0
    377e:	0f 90       	pop	r0
    3780:	cf 91       	pop	r28
    3782:	df 91       	pop	r29
    3784:	08 95       	ret

00003786 <MoveRight>:

unit8 MoveRight   (void)
{
    3786:	df 93       	push	r29
    3788:	cf 93       	push	r28
    378a:	0f 92       	push	r0
    378c:	cd b7       	in	r28, 0x3d	; 61
    378e:	de b7       	in	r29, 0x3e	; 62
	// Left Direction
	DIO_Write(PORTA_0,HIGH);
    3790:	80 e0       	ldi	r24, 0x00	; 0
    3792:	61 e0       	ldi	r22, 0x01	; 1
    3794:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_Write>


	// Right Direction
	DIO_Write(PORTC_0,LOW);
    3798:	80 e1       	ldi	r24, 0x10	; 16
    379a:	60 e0       	ldi	r22, 0x00	; 0
    379c:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_Write>


	PWM_Write(RIGHTWHEELS_PIN,255);
    37a0:	8f e1       	ldi	r24, 0x1F	; 31
    37a2:	6f ef       	ldi	r22, 0xFF	; 255
    37a4:	0e 94 3a 0b 	call	0x1674	; 0x1674 <PWM_Write>
	PWM_Write(LEFTWHEELS_PIN,0);
    37a8:	8b e0       	ldi	r24, 0x0B	; 11
    37aa:	60 e0       	ldi	r22, 0x00	; 0
    37ac:	0e 94 3a 0b 	call	0x1674	; 0x1674 <PWM_Write>
}
    37b0:	0f 90       	pop	r0
    37b2:	cf 91       	pop	r28
    37b4:	df 91       	pop	r29
    37b6:	08 95       	ret

000037b8 <MoveLeft>:
unit8 MoveLeft    (void)
{
    37b8:	df 93       	push	r29
    37ba:	cf 93       	push	r28
    37bc:	0f 92       	push	r0
    37be:	cd b7       	in	r28, 0x3d	; 61
    37c0:	de b7       	in	r29, 0x3e	; 62
	// Left Direction
	DIO_Write(PORTA_0,LOW);
    37c2:	80 e0       	ldi	r24, 0x00	; 0
    37c4:	60 e0       	ldi	r22, 0x00	; 0
    37c6:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_Write>


	// Right Direction
	DIO_Write(PORTC_0,HIGH);
    37ca:	80 e1       	ldi	r24, 0x10	; 16
    37cc:	61 e0       	ldi	r22, 0x01	; 1
    37ce:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_Write>


	PWM_Write(RIGHTWHEELS_PIN,0);
    37d2:	8f e1       	ldi	r24, 0x1F	; 31
    37d4:	60 e0       	ldi	r22, 0x00	; 0
    37d6:	0e 94 3a 0b 	call	0x1674	; 0x1674 <PWM_Write>
	PWM_Write(LEFTWHEELS_PIN,255);
    37da:	8b e0       	ldi	r24, 0x0B	; 11
    37dc:	6f ef       	ldi	r22, 0xFF	; 255
    37de:	0e 94 3a 0b 	call	0x1674	; 0x1674 <PWM_Write>
}
    37e2:	0f 90       	pop	r0
    37e4:	cf 91       	pop	r28
    37e6:	df 91       	pop	r29
    37e8:	08 95       	ret

000037ea <Stop>:


unit8 Stop        (void)
{
    37ea:	df 93       	push	r29
    37ec:	cf 93       	push	r28
    37ee:	0f 92       	push	r0
    37f0:	cd b7       	in	r28, 0x3d	; 61
    37f2:	de b7       	in	r29, 0x3e	; 62
	// Left Direction
	DIO_Write(PORTA_0,LOW);
    37f4:	80 e0       	ldi	r24, 0x00	; 0
    37f6:	60 e0       	ldi	r22, 0x00	; 0
    37f8:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_Write>


	// Right Direction
	DIO_Write(PORTC_0,LOW);
    37fc:	80 e1       	ldi	r24, 0x10	; 16
    37fe:	60 e0       	ldi	r22, 0x00	; 0
    3800:	0e 94 c1 11 	call	0x2382	; 0x2382 <DIO_Write>


	PWM_Write(RIGHTWHEELS_PIN,0);
    3804:	8f e1       	ldi	r24, 0x1F	; 31
    3806:	60 e0       	ldi	r22, 0x00	; 0
    3808:	0e 94 3a 0b 	call	0x1674	; 0x1674 <PWM_Write>
	PWM_Write(LEFTWHEELS_PIN,0);
    380c:	8b e0       	ldi	r24, 0x0B	; 11
    380e:	60 e0       	ldi	r22, 0x00	; 0
    3810:	0e 94 3a 0b 	call	0x1674	; 0x1674 <PWM_Write>
}
    3814:	0f 90       	pop	r0
    3816:	cf 91       	pop	r28
    3818:	df 91       	pop	r29
    381a:	08 95       	ret

0000381c <USART_RX_ISR>:
/* ******************** Global Declaration Section End ********************* */

/* ******************** Sub-Program Declaration Section Start ************** */

void USART_RX_ISR(void)
{
    381c:	df 93       	push	r29
    381e:	cf 93       	push	r28
    3820:	cd b7       	in	r28, 0x3d	; 61
    3822:	de b7       	in	r29, 0x3e	; 62
	USART_Receiver = Rx_Interrupt();
    3824:	0e 94 42 07 	call	0xe84	; 0xe84 <Rx_Interrupt>
    3828:	80 93 8c 00 	sts	0x008C, r24
}
    382c:	cf 91       	pop	r28
    382e:	df 91       	pop	r29
    3830:	08 95       	ret

00003832 <main>:

/* Main Program Section */
/* -------------------- */

void main(void)
{
    3832:	df 93       	push	r29
    3834:	cf 93       	push	r28
    3836:	cd b7       	in	r28, 0x3d	; 61
    3838:	de b7       	in	r29, 0x3e	; 62
	USART_init();
    383a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <USART_init>
	MotorInit();
    383e:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <MotorInit>

	SetUSARTReceiveCallBack(&USART_RX_ISR);
    3842:	8e e0       	ldi	r24, 0x0E	; 14
    3844:	9c e1       	ldi	r25, 0x1C	; 28
    3846:	0e 94 4d 07 	call	0xe9a	; 0xe9a <SetUSARTReceiveCallBack>
	while(1)
	{
      if(USART_Receiver == 'A')
    384a:	80 91 8c 00 	lds	r24, 0x008C
    384e:	81 34       	cpi	r24, 0x41	; 65
    3850:	21 f4       	brne	.+8      	; 0x385a <main+0x28>
      MoveForward(128);
    3852:	80 e8       	ldi	r24, 0x80	; 128
    3854:	0e 94 87 1b 	call	0x370e	; 0x370e <MoveForward>
    3858:	f8 cf       	rjmp	.-16     	; 0x384a <main+0x18>

      else if(USART_Receiver == 'B')
    385a:	80 91 8c 00 	lds	r24, 0x008C
    385e:	82 34       	cpi	r24, 0x42	; 66
    3860:	21 f4       	brne	.+8      	; 0x386a <main+0x38>
    	  MoveBackward(255);
    3862:	8f ef       	ldi	r24, 0xFF	; 255
    3864:	0e 94 a2 1b 	call	0x3744	; 0x3744 <MoveBackward>
    3868:	f0 cf       	rjmp	.-32     	; 0x384a <main+0x18>

      else if(USART_Receiver == 'C')
    386a:	80 91 8c 00 	lds	r24, 0x008C
    386e:	83 34       	cpi	r24, 0x43	; 67
    3870:	19 f4       	brne	.+6      	; 0x3878 <main+0x46>
    	  MoveRight();
    3872:	0e 94 c3 1b 	call	0x3786	; 0x3786 <MoveRight>
    3876:	e9 cf       	rjmp	.-46     	; 0x384a <main+0x18>

      else if(USART_Receiver == 'D')
    3878:	80 91 8c 00 	lds	r24, 0x008C
    387c:	84 34       	cpi	r24, 0x44	; 68
    387e:	19 f4       	brne	.+6      	; 0x3886 <main+0x54>
    	  MoveLeft();
    3880:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <MoveLeft>
    3884:	e2 cf       	rjmp	.-60     	; 0x384a <main+0x18>
      else
    	  Stop();
    3886:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <Stop>
    388a:	df cf       	rjmp	.-66     	; 0x384a <main+0x18>

0000388c <__prologue_saves__>:
    388c:	2f 92       	push	r2
    388e:	3f 92       	push	r3
    3890:	4f 92       	push	r4
    3892:	5f 92       	push	r5
    3894:	6f 92       	push	r6
    3896:	7f 92       	push	r7
    3898:	8f 92       	push	r8
    389a:	9f 92       	push	r9
    389c:	af 92       	push	r10
    389e:	bf 92       	push	r11
    38a0:	cf 92       	push	r12
    38a2:	df 92       	push	r13
    38a4:	ef 92       	push	r14
    38a6:	ff 92       	push	r15
    38a8:	0f 93       	push	r16
    38aa:	1f 93       	push	r17
    38ac:	cf 93       	push	r28
    38ae:	df 93       	push	r29
    38b0:	cd b7       	in	r28, 0x3d	; 61
    38b2:	de b7       	in	r29, 0x3e	; 62
    38b4:	ca 1b       	sub	r28, r26
    38b6:	db 0b       	sbc	r29, r27
    38b8:	0f b6       	in	r0, 0x3f	; 63
    38ba:	f8 94       	cli
    38bc:	de bf       	out	0x3e, r29	; 62
    38be:	0f be       	out	0x3f, r0	; 63
    38c0:	cd bf       	out	0x3d, r28	; 61
    38c2:	09 94       	ijmp

000038c4 <__epilogue_restores__>:
    38c4:	2a 88       	ldd	r2, Y+18	; 0x12
    38c6:	39 88       	ldd	r3, Y+17	; 0x11
    38c8:	48 88       	ldd	r4, Y+16	; 0x10
    38ca:	5f 84       	ldd	r5, Y+15	; 0x0f
    38cc:	6e 84       	ldd	r6, Y+14	; 0x0e
    38ce:	7d 84       	ldd	r7, Y+13	; 0x0d
    38d0:	8c 84       	ldd	r8, Y+12	; 0x0c
    38d2:	9b 84       	ldd	r9, Y+11	; 0x0b
    38d4:	aa 84       	ldd	r10, Y+10	; 0x0a
    38d6:	b9 84       	ldd	r11, Y+9	; 0x09
    38d8:	c8 84       	ldd	r12, Y+8	; 0x08
    38da:	df 80       	ldd	r13, Y+7	; 0x07
    38dc:	ee 80       	ldd	r14, Y+6	; 0x06
    38de:	fd 80       	ldd	r15, Y+5	; 0x05
    38e0:	0c 81       	ldd	r16, Y+4	; 0x04
    38e2:	1b 81       	ldd	r17, Y+3	; 0x03
    38e4:	aa 81       	ldd	r26, Y+2	; 0x02
    38e6:	b9 81       	ldd	r27, Y+1	; 0x01
    38e8:	ce 0f       	add	r28, r30
    38ea:	d1 1d       	adc	r29, r1
    38ec:	0f b6       	in	r0, 0x3f	; 63
    38ee:	f8 94       	cli
    38f0:	de bf       	out	0x3e, r29	; 62
    38f2:	0f be       	out	0x3f, r0	; 63
    38f4:	cd bf       	out	0x3d, r28	; 61
    38f6:	ed 01       	movw	r28, r26
    38f8:	08 95       	ret

000038fa <_exit>:
    38fa:	f8 94       	cli

000038fc <__stop_program>:
    38fc:	ff cf       	rjmp	.-2      	; 0x38fc <__stop_program>
